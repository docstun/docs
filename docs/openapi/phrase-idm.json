{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.100",
    "title": "IDM Service",
    "license": {
      "name": "Proprietary"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8052/idm"
    }
  ],
  "tags": [
    {
      "name": "application-token",
      "description": "Operations for issuing application access tokens."
    },
    {
      "name": "audit",
      "description": "Audit related calls"
    },
    {
      "name": "bh-actions",
      "description": "Bughunter actions under management API"
    },
    {
      "name": "check-credentials",
      "description": "Operations for checking credentials"
    },
    {
      "name": "config",
      "description": "Endpoints giving list of enums or other configuration options that are accessible publicly."
    },
    {
      "name": "discovery",
      "description": "Operations for discovering IDM state for application integration."
    },
    {
      "name": "email-verification",
      "description": "Operation for verifying emails."
    },
    {
      "name": "invitation",
      "description": "Operations for IDM user invitations."
    },
    {
      "name": "key-management",
      "description": "APIs related to key management"
    },
    {
      "name": "management",
      "description": "Operations related to managing applications, identities, accounts."
    },
    {
      "name": "management-data-retention",
      "description": "Operations related to data retention management."
    },
    {
      "name": "management-oauth",
      "description": "Operations related to managing oauth resources."
    },
    {
      "name": "management-subscription-groups",
      "description": "Operations related to subscription groups management (subscriptions)"
    },
    {
      "name": "misc",
      "description": "Miscellaneous operations"
    },
    {
      "name": "oauth",
      "description": "OAuth related endpoints"
    },
    {
      "name": "password-recovery",
      "description": "Operation for recovering passwords."
    },
    {
      "name": "platform-thinkific",
      "description": "Phrase platform Thinkific integration related endpoints"
    },
    {
      "name": "platform",
      "description": "Phrase platform related endpoints"
    },
    {
      "name": "session",
      "description": "Operations for managing user login session."
    },
    {
      "name": "signup",
      "description": "Operations for signing up new users."
    },
    {
      "name": "socials",
      "description": "Support for social logins"
    },
    {
      "name": "sso",
      "description": "Endpoints related to external SSO."
    },
    {
      "name": "subscriptions",
      "description": "Operations related to new pricing model"
    },
    {
      "name": "suite-subscriptions",
      "description": "Support for new pricing (suite) user subscriptions"
    },
    {
      "name": "token-bifrost",
      "description": "Operations for management access from Bifrost service."
    },
    {
      "name": "token",
      "description": "Operations for issuing and validating user access tokens."
    },
    {
      "name": "tracking",
      "description": "Tracking related operations"
    },
    {
      "name": "user-bifrost",
      "description": "Endpoint for Bifrost related operations"
    },
    {
      "name": "user-settings",
      "description": "Endpoints related to managing user settings."
    },
    {
      "name": "user-socials",
      "description": "User endpoints for managing social accounts."
    },
    {
      "name": "user",
      "description": "Endpoints related to the calling user (authenticated by user access token)."
    },
    {
      "name": "user-widgets",
      "description": "Endpoints related to shared application widgets dedicated to the calling user (authenticated by user access token)."
    }
  ],
  "paths": {
    "/api/v1/apptoken/grant": {
      "post": {
        "summary": "Grant access token to the application",
        "tags": [
          "application-token"
        ],
        "operationId": "grantApplicationToken",
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationTokenGrantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token was granted to the application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationToken"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/apptoken/validate": {
      "post": {
        "summary": "Validate access token of the application",
        "tags": [
          "application-token"
        ],
        "operationId": "validateApplicationToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationTokenValidateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token of the application is valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationToken"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/apptoken/revoke": {
      "post": {
        "summary": "Revoke access token of the application",
        "tags": [
          "application-token"
        ],
        "operationId": "revokeApplicationToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationTokenValidateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Application access token is invalidated"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/audit/organizations/{organizationUid}/{auditType}/last": {
      "get": {
        "summary": "Returns last audit action of given type from organization audit log",
        "tags": [
          "audit"
        ],
        "operationId": "getLastOrganizationAuditLogForType",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auditType",
            "in": "path",
            "description": "Type of the audit action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns last audit action for organization of given type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LastAuditAction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/audit/identity/{identityUid}": {
      "get": {
        "summary": "List identity audit actions",
        "description": "List all audit actions for the identity",
        "tags": [
          "audit"
        ],
        "operationId": "listIdentityAuditActions",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IdentityAuditActionType"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all audit actions for the identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityAuditActionPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/audit/organizations/{organizationUid}": {
      "get": {
        "summary": "List organization audit actions",
        "description": "List all audit actions for the organization",
        "tags": [
          "audit"
        ],
        "operationId": "listOrgAuditActions",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrganizationAuditActionType"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all audit actions for the organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAuditActionPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/bh-actions": {
      "get": {
        "summary": "Returns a list of supported Bughunter actions",
        "tags": [
          "bh-actions"
        ],
        "operationId": "listAllActions",
        "responses": {
          "200": {
            "description": "A list of supported Bughunter actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BhAction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/bh-actions/{actionId}": {
      "get": {
        "summary": "Gets data for the action specified by the actionId",
        "tags": [
          "bh-actions"
        ],
        "operationId": "getActionData",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "p",
            "in": "query",
            "description": "A list of URL encoded map of parameters for the action in the form of URL encoded JSON object",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A string representation of the action result - supports Markdown",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/check-credentials": {
      "post": {
        "summary": "Returns if sent credentials are valid",
        "tags": [
          "check-credentials"
        ],
        "operationId": "checkCredentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CheckCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response if credentials are valid or not",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsChecked"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/check-credentials/user": {
      "post": {
        "summary": "Checks credentials and returns user info in case the credentials are valid",
        "tags": [
          "check-credentials"
        ],
        "operationId": "checkCredentialsUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CheckCredentialsUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Info about the user when credentials are valid",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/config/countries": {
      "get": {
        "summary": "List supported countries",
        "tags": [
          "config"
        ],
        "operationId": "listCountries",
        "responses": {
          "200": {
            "description": "List of countries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/config/locales": {
      "get": {
        "summary": "List supported locales",
        "tags": [
          "config"
        ],
        "operationId": "listLocales",
        "responses": {
          "200": {
            "description": "List of locales",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocaleInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/config/timezones": {
      "get": {
        "summary": "List supported timezones",
        "tags": [
          "config"
        ],
        "operationId": "listTimezones",
        "responses": {
          "200": {
            "description": "List of timezones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimezoneInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/config/job-roles": {
      "get": {
        "summary": "List supported job roles",
        "tags": [
          "config"
        ],
        "operationId": "listJobRoles",
        "responses": {
          "200": {
            "description": "List of job roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobRoleInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/config/properties": {
      "get": {
        "summary": "Configuration properties",
        "tags": [
          "config"
        ],
        "operationId": "listProperties",
        "responses": {
          "200": {
            "description": "List of public configuration properties",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigPropertyValue"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/discovery/usernames": {
      "post": {
        "summary": "Check username uniqueness across integrated applications",
        "tags": [
          "discovery"
        ],
        "operationId": "checkUsername",
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UsernameCheck"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Username check result is known",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/UsernameChecked"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/discovery/organizations/{organizationUid}/identities": {
      "get": {
        "summary": "Lists users in organization",
        "tags": [
          "discovery"
        ],
        "operationId": "listUsersInOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationUid",
            "in": "query",
            "required": false,
            "description": "application UID, limit users who have account to the specific application",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountRole",
            "in": "query",
            "required": false,
            "description": "account role, limit users who have an account to a specific application with a particular role  or have the role in any account when no applicationUid is provided. The filter for this field is  case-insensitive.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "UID",
                "USERNAME",
                "FIRST_NAME",
                "LAST_NAME",
                "EMAIL"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user in organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentitiesInOrganizationPage"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/discovery/organizations/{organizationUid}": {
      "get": {
        "summary": "Validates the organization exists and returns all know uids for the whole platform",
        "tags": [
          "discovery"
        ],
        "operationId": "checkOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID in any supported format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Map of all known uids for the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/email-verification/verify": {
      "post": {
        "summary": "Verifies user's email",
        "tags": [
          "email-verification"
        ],
        "operationId": "verifyEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email was verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/invitations": {
      "post": {
        "summary": "Invitation creation - called by Suite application when user invitation is requested",
        "tags": [
          "invitation"
        ],
        "operationId": "createInvitation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/invitations/accept": {
      "post": {
        "summary": "Evaluate invitation token and provide a list of available identity's accounts for the assignment",
        "tags": [
          "invitation"
        ],
        "operationId": "invitationAccept",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationAcceptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation can be accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationAcceptResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/invitations/finalize": {
      "post": {
        "summary": "Finalize invitation process",
        "tags": [
          "invitation"
        ],
        "operationId": "invitationFinalize",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationFinalizeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "invitation finalized and session is verified by user with password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/key-management/organizations/{organizationUid}/api-keys": {
      "get": {
        "summary": "Returns all API keys for the organization provided",
        "description": "Returns all API keys for the organization provided, does no other filtering",
        "tags": [
          "key-management"
        ],
        "operationId": "getApiKeys",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID or external id in form `applicationUid-externalId`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search string to filter the API keys - supported fields are `name` (using `like` operator)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of API keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/key-management/organizations/{organizationUid}/api-keys/{apiKeyUid}": {
      "get": {
        "summary": "Returns all API keys for the organization provided",
        "description": "Returns all API keys for the organization provided, does no other filtering",
        "tags": [
          "key-management"
        ],
        "operationId": "getApiKey",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID or external id in form `applicationUid-externalId`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyUid",
            "in": "path",
            "description": "Unique identifier of the API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key returned based on its UID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/api-keys": {
      "get": {
        "summary": "Get all API keys of the organization",
        "tags": [
          "key-management"
        ],
        "operationId": "getOrganizationApiKeys",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of configured API keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementApiKey"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Create new API key for the organization",
        "tags": [
          "key-management"
        ],
        "operationId": "createOrganizationApiKey",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API key created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementApiKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/api-keys/{apiKeyUid}": {
      "get": {
        "summary": "Get API key of the organization",
        "tags": [
          "key-management"
        ],
        "operationId": "getOrganizationApiKey",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyUid",
            "in": "path",
            "description": "UID of the API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key of the organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementApiKey"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update API key in the organization",
        "tags": [
          "key-management"
        ],
        "operationId": "updateOrganizationApiKey",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyUid",
            "in": "path",
            "description": "UID of the API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API key updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementApiKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete API key of the organization",
        "tags": [
          "key-management"
        ],
        "operationId": "deleteOrganizationApiKey",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyUid",
            "in": "path",
            "description": "UID of the API key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "API key deleted"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/keys": {
      "post": {
        "summary": "Register new auth key",
        "tags": [
          "management"
        ],
        "operationId": "createAuthKey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthKeyCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Auth key registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthKeyInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "summary": "List all registered keys",
        "tags": [
          "management"
        ],
        "operationId": "listAuthKeys",
        "responses": {
          "200": {
            "description": "Auth key registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthKeyInfo"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/keys/{keyUid}": {
      "get": {
        "summary": "Gets info about auth key",
        "tags": [
          "management"
        ],
        "operationId": "getAuthKey",
        "parameters": [
          {
            "name": "keyUid",
            "in": "path",
            "description": "UID of the auth key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Auth key info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update registered auth key",
        "tags": [
          "management"
        ],
        "operationId": "updateAuthKey",
        "parameters": [
          {
            "name": "keyUid",
            "in": "path",
            "description": "UID of the auth key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthKeyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Auth key updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthKeyInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete registered auth key",
        "tags": [
          "management"
        ],
        "operationId": "deleteAuthKey",
        "parameters": [
          {
            "name": "keyUid",
            "in": "path",
            "description": "UID of the auth key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Auth key deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/applications": {
      "post": {
        "summary": "Register new application",
        "tags": [
          "management"
        ],
        "operationId": "createApplication",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Application created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "summary": "List all applications",
        "tags": [
          "management"
        ],
        "operationId": "listApplications",
        "responses": {
          "200": {
            "description": "Applications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/applications/{applicationUid}": {
      "get": {
        "summary": "Get application",
        "tags": [
          "management"
        ],
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update application",
        "tags": [
          "management"
        ],
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Application updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete application",
        "tags": [
          "management"
        ],
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Application deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/{identityUid}/organizations/{organizationUid}": {
      "put": {
        "summary": "Creates or updates the mapping with additional values",
        "tags": [
          "management"
        ],
        "operationId": "putIdentityOrganization",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "user UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityOrganization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Deletes a mapping with additional values",
        "tags": [
          "management"
        ],
        "operationId": "deleteIdentityOrganization",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "user UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/customers": {
      "post": {
        "summary": "Create new customer",
        "tags": [
          "management"
        ],
        "operationId": "createCustomer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "summary": "List customers",
        "description": "The <em>search</em> parameter looks for the value in the following fields&#58; <ul> <li>Customer <em>uid</em> attribute</li> <li>Customer <em>name</em> attribute</li> <li>Related organizations <em>name</em> attribute</li> </ul>",
        "tags": [
          "management"
        ],
        "operationId": "listCustomers",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/customers/{customerUid}": {
      "get": {
        "summary": "Get customer",
        "tags": [
          "management"
        ],
        "operationId": "getCustomer",
        "parameters": [
          {
            "name": "customerUid",
            "in": "path",
            "description": "UID of the customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update customer",
        "tags": [
          "management"
        ],
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "customerUid",
            "in": "path",
            "description": "UID of the customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/customers/{customerUid}/organizations": {
      "get": {
        "summary": "Get customer organizations",
        "tags": [
          "management"
        ],
        "operationId": "getCustomerOrganizations",
        "parameters": [
          {
            "name": "customerUid",
            "in": "path",
            "description": "UID of the customer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of customer organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations": {
      "post": {
        "summary": "Create new organization",
        "tags": [
          "management"
        ],
        "operationId": "createOrganization",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementOrganization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "summary": "List organizations",
        "description": "The <em>search</em> parameter looks for the value in the following fields&#58; <ul> <li>Organization <em>uid</em> attribute</li> <li>Organization <em>name</em> attribute</li> <li>Related external organization <em>externalId</em> attribute</li> <li>Related organization subscription <em>customerId</em> attribute</li> </ul>",
        "tags": [
          "management"
        ],
        "operationId": "listOrganizations",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/csv": {
      "get": {
        "summary": "List organizations",
        "description": "The <em>search</em> parameter looks for the value in the following fields&#58; <ul> <li>Organization <em>uid</em> attribute</li> <li>Organization <em>name</em> attribute</li> <li>Related external organization <em>externalId</em> attribute</li> <li>Related organization subscription <em>customerId</em> attribute</li> </ul>",
        "tags": [
          "management"
        ],
        "operationId": "listOrganizationsAsCsv",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "organizations",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}": {
      "get": {
        "summary": "Get organization",
        "tags": [
          "management"
        ],
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementOrganization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update organization",
        "tags": [
          "management"
        ],
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementOrganization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete organization",
        "tags": [
          "management"
        ],
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Application deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/members/csv": {
      "get": {
        "summary": "Get a list of organization members as CSV",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationMembersAsCsv",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization members as CSV",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/members": {
      "get": {
        "summary": "Get a list of organization members",
        "tags": [
          "management"
        ],
        "operationId": "listOrganizationMembers",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMembersPage"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/request-delete": {
      "post": {
        "summary": "Places request to delete organization",
        "tags": [
          "management"
        ],
        "operationId": "placeDeleteOrganizationRequest",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request to delete organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestPlaced"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/external/{applicationUid}/{externalId}": {
      "get": {
        "summary": "Get organization by its external ID",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationByExternalId",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "external ID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementOrganization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/external/{applicationUid}/{externalId}/request-delete": {
      "post": {
        "summary": "Places request to delete organization's external mapping",
        "tags": [
          "management"
        ],
        "operationId": "placeDeleteExternalOrganizationRequest",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "external ID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request to delete organization's external mapping created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestPlaced"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities": {
      "post": {
        "summary": "Register new identity",
        "tags": [
          "management"
        ],
        "operationId": "createIdentity",
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/IdentityCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Identity created",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "summary": "List all identities",
        "tags": [
          "management"
        ],
        "operationId": "listIdentities",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentitiesInOrganizationPage"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "The content type of the response.",
                "schema": {
                  "type": "string",
                  "enum": [
                    "application/json"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/csv": {
      "get": {
        "summary": "List all identities as csv",
        "tags": [
          "management"
        ],
        "operationId": "listIdentitiesAsCsv",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "description": "The content type of the response.",
                "schema": {
                  "type": "string",
                  "enum": [
                    "text/csv"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/{identityUid}": {
      "get": {
        "summary": "Get existing identity",
        "tags": [
          "management"
        ],
        "operationId": "getIdentity",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update identity",
        "tags": [
          "management"
        ],
        "operationId": "updateIdentity",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Identity updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete identity and all its accounts",
        "tags": [
          "management"
        ],
        "operationId": "deleteIdentity",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Identity deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/{identityUid}/memberships/{organizationUid}/request-delete": {
      "post": {
        "summary": "Places request to delete identity's membership in organization",
        "tags": [
          "management"
        ],
        "operationId": "placeDeleteIdentityOrganizationRequest",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request to delete identity's membership in organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestPlaced"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/username/{domain}/{username}": {
      "get": {
        "summary": "Get identity by its domain and username",
        "tags": [
          "management"
        ],
        "operationId": "getIdentityByUsername",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "domain of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "username of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/account/{applicationUid}/{externalId}": {
      "get": {
        "summary": "Get identity by its account",
        "tags": [
          "management"
        ],
        "operationId": "getIdentityByAccount",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the account application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "external id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/{identityUid}/accounts": {
      "post": {
        "summary": "Create or update new account",
        "tags": [
          "management"
        ],
        "operationId": "saveAccount",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created or updated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "summary": "List all accounts of identity",
        "tags": [
          "management"
        ],
        "operationId": "listAccounts",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationUid",
            "in": "query",
            "description": "application UID, limit listing to the specific application",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts of the identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityAccounts"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/{identityUid}/accounts/{applicationUid}/{externalId}": {
      "get": {
        "summary": "Get account of the specific identity",
        "tags": [
          "management"
        ],
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "external id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete identity's account",
        "tags": [
          "management"
        ],
        "operationId": "deleteAccount",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account is deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/{identityUid}/request-delete": {
      "post": {
        "summary": "Places request to delete identity",
        "tags": [
          "management"
        ],
        "operationId": "placeDeleteIdentityRequest",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request to delete identity created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestPlaced"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/identities/external/{applicationUid}/{externalId}/request-delete": {
      "post": {
        "summary": "Places request to delete external mapping of identity",
        "tags": [
          "management"
        ],
        "operationId": "placeDeleteExternalIdentityRequest",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External ID of identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request to delete external mapping of identity created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestPlaced"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/accounts/{applicationUid}/{externalId}/request-delete": {
      "post": {
        "summary": "Places request to delete account",
        "tags": [
          "management"
        ],
        "operationId": "placeDeleteAccountRequest",
        "parameters": [
          {
            "name": "applicationUid",
            "in": "path",
            "description": "UID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External ID of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request to delete account created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestPlaced"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/processing-queues": {
      "get": {
        "summary": "List status of Processing Queues",
        "tags": [
          "management"
        ],
        "operationId": "listProcessingQueues",
        "responses": {
          "200": {
            "description": "List of processing queues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingQueues"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/processing-queues/{queueUid}": {
      "post": {
        "summary": "Update configuration of processing queue",
        "tags": [
          "management"
        ],
        "operationId": "updateProcessingQueue",
        "parameters": [
          {
            "name": "queueUid",
            "in": "path",
            "description": "UID of the processing queue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessingQueueUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Processing queue updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingQueue"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/processing-queues/{queueUid}/start": {
      "post": {
        "summary": "Start processing queue",
        "tags": [
          "management"
        ],
        "operationId": "startProcessingQueue",
        "parameters": [
          {
            "name": "queueUid",
            "in": "path",
            "description": "UID of the processing queue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processing queue started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingQueue"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/processing-queues/{queueUid}/stop": {
      "post": {
        "summary": "Stop processing queue",
        "tags": [
          "management"
        ],
        "operationId": "stopProcessingQueue",
        "parameters": [
          {
            "name": "queueUid",
            "in": "path",
            "description": "UID of the processing queue",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processing queue stopped",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingQueue"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/config-properties": {
      "get": {
        "summary": "Get all config properties",
        "tags": [
          "management"
        ],
        "operationId": "listConfigProperties",
        "responses": {
          "200": {
            "description": "List of config properties",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigProperty"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/config-properties/{propertyName}": {
      "get": {
        "summary": "Get value of the runtime config property",
        "tags": [
          "management"
        ],
        "operationId": "getConfigProperty",
        "parameters": [
          {
            "name": "propertyName",
            "in": "path",
            "description": "Config property name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config property value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigProperty"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Set value of the runtime config property",
        "tags": [
          "management"
        ],
        "operationId": "updateConfigProperty",
        "parameters": [
          {
            "name": "propertyName",
            "in": "path",
            "description": "Config property name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigPropertyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Config property value updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigProperty"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/catalog/subscriptions/{subscriptionId}/entitlements": {
      "get": {
        "summary": "Get Chargebee Subscription entitlements ",
        "tags": [
          "management"
        ],
        "operationId": "getSubscriptionEntitlements",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Chargebee Subscription ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerEntitlements"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/billing-cycles": {
      "get": {
        "summary": "Returns a list of all organization billing cycles",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationBillingCycles",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization billing cycles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationBillingCyclesPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/metrics": {
      "get": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Returns a list of all organization metrics",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationMetrics",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/pricing": {
      "get": {
        "summary": "Returns state of the pricing of the given organization",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationPricing",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/user-items": {
      "get": {
        "summary": "Get purchased user items",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationUserItems",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization purchased items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementUserItemInformation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/indicators": {
      "get": {
        "summary": "Get indicators of the organization",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationIndicators",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization indicators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementIndicatorInformation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/indicators/{indicatorId}": {
      "get": {
        "summary": "Get indicator of the organization",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationIndicator",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "indicatorId",
            "in": "path",
            "description": "Indicator ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Updated indicator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementIndicatorInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update indicator of the organization",
        "tags": [
          "management"
        ],
        "operationId": "updateOrganizationIndicator",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "indicatorId",
            "in": "path",
            "description": "Indicator ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementIndicatorUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Updated indicator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementIndicatorInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/entitlements": {
      "get": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Get subscription entitlements of the organization",
        "tags": [
          "management"
        ],
        "operationId": "getOrganizationEntitlements",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementEntitlementInformation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Override value of entitlement",
        "tags": [
          "management"
        ],
        "operationId": "overrideEntitlement",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementEntitlementUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementEntitlementInformation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscriptions/organizations/{organizationUid}/entitlements/{featureId}": {
      "delete": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Remove entitlement override",
        "tags": [
          "management"
        ],
        "operationId": "removeEntitlementOverride",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureId",
            "in": "path",
            "description": "Feature ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entitlement override was removed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/subscriptions/trial": {
      "put": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Start or update Suite Trial",
        "tags": [
          "management"
        ],
        "operationId": "startOrUpdateSuiteTrial",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuiteTrialUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suite trial started/updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/subscriptions/subscription": {
      "put": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Start or renew Suite subscription",
        "tags": [
          "management"
        ],
        "operationId": "startOrRenewSuiteSubscription",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuiteSubscriptionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suite subscription started/renewed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/subscriptions/subscription/future": {
      "delete": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Deletes future subscription of the organization",
        "tags": [
          "management"
        ],
        "operationId": "deleteFutureSubscription",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Future subscription removed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/subscriptions/update": {
      "post": {
        "deprecated": true,
        "summary": "DEPRECATED: Moved to Organization Groups. Update/fix current billing cycle",
        "tags": [
          "management"
        ],
        "operationId": "updateSubscription",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suite subscription updated/fixed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/invitations": {
      "get": {
        "summary": "List all pending IDM invitations",
        "tags": [
          "management"
        ],
        "operationId": "listInvitations",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invitations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingInvitationsPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/invitations/{invUid}/finalize": {
      "post": {
        "summary": "Finalize the invitation",
        "tags": [
          "management"
        ],
        "operationId": "finalizeInvitation",
        "parameters": [
          {
            "name": "invUid",
            "in": "path",
            "description": "UID of the invitation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation finalized"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/organizations/{organizationUid}/sso": {
      "get": {
        "summary": "Returns SSO configuration of the organization",
        "tags": [
          "management"
        ],
        "operationId": "getSsoConfiguration",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated SSO configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementSsoConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Updates SSO configuration of the organization",
        "tags": [
          "management"
        ],
        "operationId": "updateSsoConfiguration",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementSsoConfigurationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated SSO configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementSsoConfiguration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/data-retention/organizations": {
      "get": {
        "summary": "List all organizations/records scheduled for data retention",
        "description": "The <em>search</em> parameter looks for the value in the following fields&#58; <ul> <li>Organization <em>uid</em> attribute</li> <li>Organization <em>name</em> attribute</li> <li>Record <em>state</em> attribute</li> </ul>",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "listDataRetentions",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all organizations/records scheduled for data retention",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Manually schedule an organization for data retention",
        "description": "Manually schedules an organization for data retention.",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "createDataRetention",
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created organization scheduled for data retention",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetention"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/data-retention/organizations/{organizationUid}": {
      "get": {
        "summary": "Gets details of an organization scheduled for data retention",
        "description": "Provides details about one organization scheduled for data retention.",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "getDataRetention",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provides details about one organization scheduled for data retention.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetention"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Updates an organization scheduled for data retention",
        "description": "Updates an organization scheduled for data retention.",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "updateDataRetention",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated organization scheduled for data retention",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetention"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Removes an organization from the data retention process",
        "description": "Removes an organization from the data retention process.",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "deleteDataRetention",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/data-retention/organizations/{organizationUid}/retry": {
      "post": {
        "summary": "Retries the current failed operation on the record - readiness check, execution or final deletions",
        "description": "Retries the current failed operation on the record - readiness check, execution or final deletions",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "retryDataRetentionAction",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/data-retention/organizations/{organizationUid}/targets/{targetStateUid}": {
      "get": {
        "summary": "Gets information of a target state of an organization scheduled for data retention",
        "description": "Provides information about a target state of an organization scheduled for data retention.",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "getDataRetentionTargetState",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetStateUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current target state of the organization scheduled for data retention",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionTargetState"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Updates a target state of an organization scheduled for data retention",
        "description": "Updates a target state of an organization scheduled for data retention.",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "updateDataRetentionTargetState",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetStateUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionTargetStateUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated target state of the organization scheduled for data retention",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionTargetState"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/data-retention/organizations/{organizationUid}/targets/{targetStateUid}/logs": {
      "get": {
        "summary": "Gets log information of a target state of an organization scheduled for data retention - the newest records first",
        "description": "Provides log information about a target state of an organization scheduled for data retention - the newest records first.",
        "tags": [
          "management-data-retention"
        ],
        "operationId": "getDataRetentionTargetStateLogs",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetStateUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all log messages of the target state of the organization scheduled for data retention",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionTargetStateLogPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/oauth/clients": {
      "post": {
        "summary": "Creates oauth client",
        "tags": [
          "management-oauth"
        ],
        "operationId": "createOauthClient",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthClientCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Oauth client created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "summary": "List all oauth clients",
        "tags": [
          "management-oauth"
        ],
        "operationId": "listOauthClients",
        "responses": {
          "200": {
            "description": "List of oauth clients returned to caller",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OauthClient"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/oauth/clients/{clientUid}": {
      "get": {
        "summary": "Get oauth client",
        "tags": [
          "management-oauth"
        ],
        "operationId": "getOauthClient",
        "parameters": [
          {
            "name": "clientUid",
            "in": "path",
            "description": "UID of the oauth client",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Oauth client returned to caller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update oauth client",
        "tags": [
          "management-oauth"
        ],
        "operationId": "updateOathClient",
        "parameters": [
          {
            "name": "clientUid",
            "in": "path",
            "description": "UID of the oauth client",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthClientUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Oauth client updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete oauth client",
        "tags": [
          "management-oauth"
        ],
        "operationId": "deleteOauthClient",
        "parameters": [
          {
            "name": "clientUid",
            "in": "path",
            "description": "UID of the oauth client",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Oauth client deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/oauth/clients/{clientUid}/uris": {
      "post": {
        "summary": "Create oauth client's URI",
        "tags": [
          "management-oauth"
        ],
        "operationId": "createOauthClientUri",
        "parameters": [
          {
            "name": "clientUid",
            "in": "path",
            "description": "ID of the oauth client to which URI belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthClientUriCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Oauth client URI created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthClientUri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/oauth/clients/{clientUid}/uris/{uriUid}": {
      "post": {
        "summary": "Update URI",
        "tags": [
          "management-oauth"
        ],
        "operationId": "updateOauthClientUri",
        "parameters": [
          {
            "name": "clientUid",
            "in": "path",
            "description": "ID of the oauth client to which URI belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uriUid",
            "in": "path",
            "description": "UID of the oauth client's URI",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthClientUriUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Oauth client URI updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthClientUri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete URI",
        "tags": [
          "management-oauth"
        ],
        "operationId": "deleteOauthClientUri",
        "parameters": [
          {
            "name": "clientUid",
            "in": "path",
            "description": "ID of the oauth client to which URI belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uriUid",
            "in": "path",
            "description": "UID of the oauth client's URI",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Oauth client URI deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups": {
      "get": {
        "summary": "Returns a list of all subscription group",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "listSubscriptionGroups",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of subscription group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroupPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}": {
      "get": {
        "summary": "Returns a subscription group",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "getSubscriptionGroup",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription Group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}/user-items": {
      "get": {
        "summary": "Get purchased user items for the subscription group",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "getSubscriptionGroupUserItems",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription Group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization purchased items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementUserItemInformation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}/entitlements": {
      "get": {
        "summary": "Get subscription group entitlements",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "getSubscriptionGroupEntitlements",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription Group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription group entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementEntitlementInformation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Override value of entitlement",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "overrideSubscriptionGroupEntitlement",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementEntitlementUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription entitlements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagementEntitlementInformation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}/entitlements/{entitlementId}": {
      "delete": {
        "summary": "Remove entitlement override",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "removeSubscriptionGroupEntitlementOverride",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entitlementId",
            "in": "path",
            "description": "Entitlement ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entitlement override was removed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}/trial": {
      "put": {
        "summary": "Start or update Suite Trial",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "startOrUpdatePlatformTrial",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuiteTrialUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Platform trial started/updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}/subscription": {
      "put": {
        "summary": "Start or renew Platform subscription",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "startOrRenewPlatformSubscriptionGroup",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuiteSubscriptionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Platform subscription started/renewed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}/subscription/future": {
      "delete": {
        "summary": "Deletes future subscription of the subscription",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "deleteSubscriptionGroupFutureSubscription",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Future subscription removed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/management/subscription-groups/{groupUid}/update-fix": {
      "post": {
        "summary": "Update/fix current billing cycle",
        "tags": [
          "management-subscription-groups"
        ],
        "operationId": "updateAndFixSubscriptionGroup",
        "parameters": [
          {
            "name": "groupUid",
            "in": "path",
            "description": "Subscription group UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suite subscription updated/fixed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPricingInformation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/misc/zendesk/sso/url": {
      "post": {
        "summary": "Generates Zendesk URL with SSO support",
        "tags": [
          "misc"
        ],
        "operationId": "generateSsoUrl",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZendeskUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Zendesk url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskUrlResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/misc/zendesk/request": {
      "post": {
        "summary": "Creates a request in Zendesk based on the data provided",
        "tags": [
          "misc"
        ],
        "operationId": "createZendeskRequest",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZendeskCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Zendesk url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZendeskCreateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "summary": "OpenId Configuration",
        "description": "Endpoint providing configuration of OpenId according to OIDC Discovery 1.0",
        "tags": [
          "oauth"
        ],
        "operationId": "getExternalConfiguration",
        "responses": {
          "200": {
            "description": "OpenId Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/config/openid": {
      "get": {
        "summary": "OpenId Configuration (internal version)",
        "description": "Endpoint providing configuration of OpenId according to OIDC Discovery 1.0. This endpoint returns internal URLs for accessing IDM endpoints.",
        "tags": [
          "oauth",
          "config"
        ],
        "operationId": "getInternalConfiguration",
        "responses": {
          "200": {
            "description": "OpenId Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/jwks": {
      "get": {
        "summary": "JWKS Endpoint",
        "description": "Endpoint that lists active JSON Web Keys (JWK)",
        "tags": [
          "oauth"
        ],
        "operationId": "getJwks",
        "responses": {
          "200": {
            "description": "Token is granted to caller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthJwkSet"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "summary": "Token Endpoint",
        "description": "Token Endpoint provides tokens according to OAuth 2.0/OIDC 1.0 specifications.",
        "tags": [
          "oauth"
        ],
        "operationId": "getToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is granted to caller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthToken"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthTokenError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/password-recovery/init": {
      "post": {
        "summary": "Initiates password recovery",
        "tags": [
          "password-recovery"
        ],
        "operationId": "recoveryPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordRecovery"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request for password recovery is received."
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/password-recovery/reset": {
      "post": {
        "summary": "Resets password",
        "tags": [
          "password-recovery"
        ],
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password was reset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/platform/redirect": {
      "get": {
        "summary": "Constructs a login redirect URL for the given parameters",
        "tags": [
          "platform"
        ],
        "operationId": "createLoginRedirect",
        "parameters": [
          {
            "name": "targetApplication",
            "in": "query",
            "description": "Unique identifier of the target application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetAccount",
            "in": "query",
            "description": "Unique identifier of the target account in the target application, or org:organizationUid if the account is not known.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetUrl",
            "in": "query",
            "description": "URL to return to after login",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "$ref": "#/components/responses/302"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/platform/redirect/ext/thinkific": {
      "get": {
        "summary": "Constructs a login redirect URL for Thinkific",
        "tags": [
          "platform-thinkific"
        ],
        "operationId": "createThinkificLoginRedirect",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "description": "Kind of error indication in case of error",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message",
            "in": "query",
            "description": "Error message in case of error",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "$ref": "#/components/responses/302"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions": {
      "post": {
        "summary": "creates session",
        "tags": [
          "session"
        ],
        "operationId": "createSession",
        "parameters": [
          {
            "name": "deviceUUID",
            "in": "query",
            "description": "Unique identifier of the UA",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}": {
      "get": {
        "summary": "Get the session info",
        "tags": [
          "session"
        ],
        "operationId": "getSession",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceUUID",
            "in": "query",
            "description": "Unique identifier of the UA",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Update the session",
        "tags": [
          "session"
        ],
        "operationId": "updateSession",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Invalidates session and all related (openapi) tokens",
        "tags": [
          "session"
        ],
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session closed and related access tokens invalidated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/recaptcha": {
      "get": {
        "summary": "Gets the information if Recaptcha is forced or not for the current session",
        "tags": [
          "session"
        ],
        "operationId": "getRecaptchaEnforcement",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recaptcha enforcement info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecaptchaEnforcement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/organization": {
      "get": {
        "summary": "Get the session current organization",
        "tags": [
          "session"
        ],
        "operationId": "getSessionCurrentOrganization",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about session current organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganization"
                }
              }
            }
          },
          "204": {
            "description": "Sessions has no current organization"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Set the current organization of the session",
        "tags": [
          "session"
        ],
        "operationId": "switchOrganization",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchOrganization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization that was set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/verify-by-password": {
      "post": {
        "summary": "Verify session using username/password",
        "tags": [
          "session"
        ],
        "operationId": "verifyByPassword",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/verify-by-sso": {
      "post": {
        "summary": "Verify session using redirect SSO token",
        "tags": [
          "session"
        ],
        "operationId": "verifyBySsoToken",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SsoTokenAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/verify-by-identity": {
      "post": {
        "summary": "Mark session verified for identity",
        "tags": [
          "session"
        ],
        "operationId": "verifyByIdentity",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "session verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data submitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/verify-by-remember-me-token": {
      "post": {
        "summary": "Mark session verified for remeber-me-token",
        "tags": [
          "session"
        ],
        "operationId": "verifyByRememberMeToken",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RememberMeAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "session verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data submitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed - no identity associated with the provider/social-id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/verify-by-social-login": {
      "post": {
        "summary": "Mark session verified for social login",
        "tags": [
          "session"
        ],
        "operationId": "verifyBySocialLogin",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialLoginAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "session verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data submitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/verify-by-impersonate-token": {
      "post": {
        "summary": "Mark session verified for impersonate token",
        "description": "Resulting verified session is marked as impersonated by the access token owner.",
        "tags": [
          "session"
        ],
        "operationId": "verifyByImpersonateToken",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpersonateTokenAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "session verified and impersonated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data submitted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/openid-requests": {
      "post": {
        "summary": "accept request by the session",
        "tags": [
          "session"
        ],
        "operationId": "acceptOpenIdRequest",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenIdAcceptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenIdRequestInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/openid-requests/{requestUid}": {
      "delete": {
        "summary": "Remove the request when SSO flow is closed without resolution (not confirmed, not denied)",
        "tags": [
          "session"
        ],
        "operationId": "deleteOpenIdRequest",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestUid",
            "in": "path",
            "description": "openid request UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session closed and related access tokens invalidated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/openid-requests/{requestUid}/account": {
      "get": {
        "summary": "Get account to be used to log the user in via SSO",
        "tags": [
          "session"
        ],
        "operationId": "getOpenIdRequestAccount",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestUid",
            "in": "path",
            "description": "openid request UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account that should be used to log user in via SSO or error code if the user cannot be deduced from the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenIdRequestAccount"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/openid-requests/{requestUid}/confirm": {
      "post": {
        "summary": "Confirm OpenId request and set the target account",
        "tags": [
          "session"
        ],
        "operationId": "confirmOpenIdRequest",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestUid",
            "in": "path",
            "description": "openid request UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenIdConfirmRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request is confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenIdRedirect"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionUid}/openid-requests/{requestUid}/deny": {
      "post": {
        "summary": "Deny OpenId request",
        "tags": [
          "session"
        ],
        "operationId": "denyOpenIdRequest",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "session UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestUid",
            "in": "path",
            "description": "openid request UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenIdDenyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request is confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenIdRedirect"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/signup-init": {
      "post": {
        "summary": "Create new user in the sign up flow",
        "tags": [
          "signup"
        ],
        "operationId": "signupInit",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Identity created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentitySignedUp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/signup-finalize": {
      "post": {
        "summary": "Update identity and organization details",
        "tags": [
          "signup"
        ],
        "operationId": "signupFinalize",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDetails"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Sign-up process successfully finished"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/socials/start": {
      "post": {
        "summary": "Starts social login",
        "tags": [
          "socials"
        ],
        "operationId": "startSocialLogin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialLoginStart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Where to redirect user to start the social login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialLoginRedirect"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/socials/verify": {
      "post": {
        "summary": "Verify social token and get information about the associated social login",
        "tags": [
          "socials"
        ],
        "operationId": "verifySocialLogin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialLoginVerify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Social token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedSocialLogin"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/socials/signup-init": {
      "post": {
        "summary": "Create new identity via social login",
        "tags": [
          "socials"
        ],
        "operationId": "socialSignupInit",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialSignupData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signup init successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentitySignedUp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/sso/saml/check": {
      "post": {
        "summary": "Gets data to perform sign-in via SAML",
        "tags": [
          "sso"
        ],
        "operationId": "checkSaml",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SamlCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "How to sign in via SAML",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlCheckResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/email-verification/sso-binding/verify": {
      "post": {
        "summary": "Confirmation the SSO binding between the user and the organization",
        "tags": [
          "sso"
        ],
        "operationId": "verifySsoBinding",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SsoBindingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SSO binding confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SsoBindingResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/email-verification/sso-binding/send": {
      "post": {
        "summary": "Resend email with SSO binding confirmation link",
        "tags": [
          "sso"
        ],
        "operationId": "sendSsoBindingEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SsoBindingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SSO binding email sent"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/strings/identity/{identityUid}": {
      "get": {
        "summary": "Get full identity by its uid for STRINGS application",
        "tags": [
          "strings"
        ],
        "operationId": "getIdentityByUid",
        "parameters": [
          {
            "name": "identityUid",
            "in": "path",
            "description": "UID of the identity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FullIdentity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullIdentity"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/subscriptions/coupons": {
      "post": {
        "summary": "Verifies discount coupon request and sends and email with the code if valid",
        "tags": [
          "subscriptions"
        ],
        "operationId": "verifyAndSendDiscountCode",
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCouponRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request validated and sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCouponResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/subscriptions/organizations/{organizationUid}": {
      "get": {
        "summary": "Get subscription information for the given organization",
        "tags": [
          "subscriptions"
        ],
        "operationId": "getOrganizationSubscription",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization we want to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PricingInformation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingInformation"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/subscriptions/organizations/{organizationUid}/indicators": {
      "get": {
        "summary": "Get indicators for the given organization. Deprecated, use /api/v1/subscriptions/organizations/{organizationUid}/plan-indicators instead",
        "tags": [
          "subscriptions"
        ],
        "operationId": "getOrganizationSubscriptionIndicators",
        "deprecated": true,
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "UID of the organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PricingInformation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Indicator"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/pending-action": {
      "get": {
        "summary": "Pending subscription action if exists",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getPendingSubscriptionAction",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pending action state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingSubscriptionAction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription": {
      "get": {
        "summary": "Suite Subscription details",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionDetails",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suite subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuiteSubscriptionDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/analytics": {
      "get": {
        "summary": "Suite Subscription pricing analytics. Provides pricing analytics dashboard url, along with the timestamp of the last update.",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionEmbeddingUrl",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pricing analytics dashboard embedding URL",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A map where keys are application uid and values are corresponding metabase embedding urls along with necessary metadata.",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/MetabaseEmbeddingUrl"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/settings": {
      "get": {
        "summary": "Suite Subscription catalog settings, used in new subscription purchase",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionCatalogSettings",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Suite subscription catalog settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuiteSubscriptionCatalogSettings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/plans": {
      "get": {
        "summary": "Returns a list of all plans available for the current organization, used in new subscription purchase",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionCatalogPlans",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "category",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SuitePlanCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all plans available for the current organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogPlan"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/plans/{planId}/capacity": {
      "get": {
        "summary": "Returns a list of add-ons that can change the capacity, used in new subscription purchase",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionAddonsCapacity",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "path",
            "description": "plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of add-ons that can change the capacity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogPlanAddonCapacity"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/plans/{planId}/capacity/{itemId}": {
      "post": {
        "summary": "Calculates the price for the given capacity, used in new subscription purchase",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "calculateSuiteSubscriptionCapacityPrice",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "path",
            "description": "plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "item ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ItemCapacityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of add-ons that can change the capacity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogPlanAddonCapacityPrice"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/purchasable-plugins": {
      "get": {
        "summary": "Returns a list of plugins that can be added to the plan, used for ongoing subscription",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuitePurchasablePlugins",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "query",
            "description": "plan ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency - Default EUR",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of plugins that can be bought with ongoing subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogPlanPlugin"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/plans/{planId}/plugins": {
      "get": {
        "summary": "Returns a list of plugins that can be added to the plan, used in new subscription purchase",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionAddonsPlugins",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "path",
            "description": "plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of plugins that can be added to the plan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogPlanPlugin"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/plans/{planId}/review": {
      "post": {
        "summary": "Prepares a review for a plan purchase",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "reviewSuiteSubscriptionPlanPurchase",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "path",
            "description": "plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CatalogPlanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A plan review response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogReviewResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/plans/{planId}/checkout": {
      "post": {
        "summary": "Finalizes the checkout of a plan",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "checkoutSuiteSubscriptionPlanPurchase",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "path",
            "description": "plan ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CatalogPlanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chargebee checkout Url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedPageUrlResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/products": {
      "get": {
        "summary": "List all available products for top-ups",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionCatalogProductsForTopUps",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of available products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/catalog/products/{productId}": {
      "get": {
        "summary": "Returns data for one particular product and its indicators in a subscription for top-ups",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "getSuiteSubscriptionCatalogProductInfoForTopUps",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings for one particular product in a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuiteProductConfiguration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/top-up/estimate": {
      "post": {
        "summary": "Estimates the price for the given product and its indicator for top-ups",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "estimateSuiteSubscriptionProductItemPriceForTopUps",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CatalogRequestItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Estimate for one particular item purchase in a plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogItemEstimationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/top-up/review": {
      "post": {
        "summary": "Provides Chargebee review price for the provided item purchase for top-ups",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "reviewSuiteSubscriptionProductItemPriceForTopUps",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogRequestItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review data for purchasing a list of items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogReviewResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/top-up/checkout": {
      "post": {
        "summary": "Checkout the provided items in Chargebee for top-ups",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "checkoutSuiteSubscriptionProductItemPriceForTopUps",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogRequestItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chargebee checkout Url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedPageUrlResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/reactivate": {
      "post": {
        "summary": "Reactivates already cancelled subscription or removes pending cancellation",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "reactivateSubscription",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reactivation was handled successfully"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/suite-subscription/cancel": {
      "post": {
        "summary": "Provides a hosted page URL to cancel the active",
        "tags": [
          "suite-subscriptions"
        ],
        "operationId": "cancelSubscription",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chargebee retention Url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedPageUrlResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/tokens/impersonate": {
      "post": {
        "summary": "Creates User Access Token for impersonating identity",
        "tags": [
          "token"
        ],
        "operationId": "grantImpersonateToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantImpersonateTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Granted impersonate token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantImpersonateTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/tokens/grant": {
      "post": {
        "summary": "Creates User Access Token for accessing applications",
        "tags": [
          "token"
        ],
        "operationId": "grantAccessToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Granted access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantAccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/tokens/validate": {
      "post": {
        "summary": "Validate User Access Token",
        "tags": [
          "token"
        ],
        "operationId": "validateAccessToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Access Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/bifrost/token/grant": {
      "post": {
        "summary": "Creates User Access Token for accessing a specific applications via Bifrost",
        "tags": [
          "token-bifrost"
        ],
        "operationId": "grantBifrostAccessToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantBifrostTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Granted user access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GrantBifrostTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/misc/tracking": {
      "post": {
        "summary": "Support for frontend tracking events",
        "description": "<h2>Mixpanel support</h2> <h3>People/identity content</h3> <code> { \"format\"&#58; \"MIXPANEL\", \"payload\"&#58; { \"people\"&#58; { \"distinct_id\"&#58; \"user id\", \"properties\"&#58; { \"$name\"&#58; \"Surname Family name\", \"$email\"&#58; \"full email\", \"Username\"&#58; \"username\", \"Language\"&#58; \"en\" } } } } </code> <h3>Group content</h3> <code> { \"format\"&#58; \"MIXPANEL\", \"payload\"&#58; { \"group\"&#58; { \"group_id\"&#58; \"group id\", \"group_key\"&#58; \"organization_id\", \"properties\"&#58; { \"Product\"&#58; \"Suite\", \"$name\"&#58; \"Phrase\" } } } } </code> <h3>Event content</h3> <code> { \"format\"&#58; \"MIXPANEL\", \"payload\"&#58; { \"event\"&#58; { \"distinct_id\"&#58; \"user id\", \"organization_id\"&#58; \"organization id\", \"event_name\"&#58; \"event name\", \"properties\"&#58; { \"attr 1 name\"&#58; \"attr 1 value\", \"attr N name\"&#58; \"attr N value\", } } } } </code>\n<h3>Recommendation</h3> Send all information (people and group) with every event and not separately. Backend can filter duplicate events. <code> { \"format\"&#58; \"MIXPANEL\", \"payload\"&#58; { \"people\"&#58; { ... }, \"group\"&#58; { ... }, \"event\"&#58; { ... } } } </code> <h2>HubSpot support</h2> <h3>Objects and associations</h3> <code> { \"format\"&#58; \"HUBSPOT\", \"payload\"&#58; { \"objects\"&#58; { \"UNIQUE-RECORD-ID-1\"&#58; { \"sourceType\"&#58; \"IDENTITY or ORGANIZATION or CUSTOM\", \"sourceUid\"&#58; \"IDM UID of the entity\", \"targetType\"&#58; \"HubSpot type\", \"properties\"&#58; { \"firstname\"&#58; \"...\", \"lastname\"&#58; \"...\" } } }, \"associations\"&#58; { \"UNIQUE-RECORD-ID-1\"&#58; { \"fromSourceUid\"&#58; \"IDM source entity UID\", \"fromTargetType\"&#58; \"HubSpot type\", \"toSourceUid\"&#58; \"IDM target entity UID\", \"toTargetType\"&#58; \"HubSpot type\", \"associationCategory\"&#58; \"USER_DEFINED or HUBSPOT_DEFINED\", \"associationTypeId\"&#58; \"ID of the association type\" } } } } </code>",
        "tags": [
          "tracking"
        ],
        "operationId": "trackEvent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TrackingEvent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The event was accepted for processing"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user": {
      "get": {
        "summary": "Returns information about caller",
        "tags": [
          "user"
        ],
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "Info about user is returned to caller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Updates caller user data",
        "tags": [
          "user"
        ],
        "operationId": "updateUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user data is returned to caller",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/logout": {
      "post": {
        "summary": "Logout the caller from all devices",
        "tags": [
          "user"
        ],
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "All user sessions were invalidated"
          }
        }
      }
    },
    "/api/v1/user/password": {
      "post": {
        "summary": "Updates a password",
        "tags": [
          "user"
        ],
        "operationId": "changePassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/login-history": {
      "get": {
        "summary": "Returns user login history",
        "tags": [
          "user"
        ],
        "operationId": "getUserLoginHistory",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "CREATED_AT",
                "IP_ADDRESS",
                "USER_AGENT"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User login history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginHistoryPage"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/login-history/csv": {
      "get": {
        "summary": "Returns user login history",
        "tags": [
          "user"
        ],
        "operationId": "getUserLoginHistoryCsv",
        "responses": {
          "200": {
            "description": "User login history CSV",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/saml": {
      "get": {
        "summary": "Returns organization SAML configuration",
        "tags": [
          "user"
        ],
        "operationId": "getSamlConfiguration",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization SAML configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlConfigurationSetting"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "SAML configuration",
        "tags": [
          "user"
        ],
        "operationId": "setSamlConfiguration",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SamlConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SAML configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamlConfigurationSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete the SAML configuration",
        "tags": [
          "user"
        ],
        "operationId": "deleteSamlConfiguration",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization SAML configuration deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/subscriptions": {
      "get": {
        "summary": "Subscription details",
        "tags": [
          "user"
        ],
        "operationId": "getSubscriptionDetails",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionDetails"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/billing-details": {
      "get": {
        "summary": "Billing details",
        "tags": [
          "user"
        ],
        "operationId": "getBillingDetails",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Billing details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Billing details",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingDetails"
              }
            }
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "postBillingDetails",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/invoices": {
      "get": {
        "summary": "Invoice",
        "tags": [
          "user"
        ],
        "operationId": "getInvoices",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/invoices/{invoiceUid}/pdf": {
      "get": {
        "summary": "Invoice in pdf format coming from Chargebee",
        "tags": [
          "user"
        ],
        "operationId": "getInvoicePdf",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUid",
            "in": "path",
            "description": "invoice UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice PDF",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/payment-method-update-hosted-page": {
      "get": {
        "summary": "Hosted page to update payment methods",
        "tags": [
          "user"
        ],
        "operationId": "getPaymentMethodUpdateHostedPage",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hosted page to update payment methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargebeeHostedPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/invitations/init": {
      "post": {
        "summary": "Initiate invitations",
        "tags": [
          "user"
        ],
        "operationId": "initInvitation",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationInitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationInitResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/invitations/validate-email": {
      "post": {
        "summary": "Validates email of a user that should be invited to the current organization",
        "tags": [
          "user"
        ],
        "operationId": "validateInvitationEmail",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationEmailValidationRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The email format is valid and can be used"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/invitations/{invitationUid}": {
      "get": {
        "summary": "Provides the details of invitation in the organization",
        "tags": [
          "user"
        ],
        "operationId": "getExistingInvitationInit",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitationUid",
            "in": "path",
            "description": "invitation UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Applications available within the invitations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationInitResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Resend invitation",
        "tags": [
          "user"
        ],
        "operationId": "resendInvitation",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitationUid",
            "in": "path",
            "description": "invitation UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email was resend"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete invitation",
        "tags": [
          "user"
        ],
        "operationId": "deleteInvitation",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitationUid",
            "in": "path",
            "description": "invitation UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/token/grant": {
      "post": {
        "summary": "Grant access token to user.",
        "tags": [
          "user"
        ],
        "operationId": "grantUserAccessToken",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantUserAccessToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/generate-qr": {
      "post": {
        "summary": "Generates QR code for 2FA",
        "tags": [
          "user"
        ],
        "operationId": "generateQr",
        "responses": {
          "200": {
            "description": "Secret is stored",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QrCode"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/otp": {
      "post": {
        "summary": "Stores secret for a user",
        "tags": [
          "user"
        ],
        "operationId": "storeSecret",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OtpSecret"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Secret is stored"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Disables otp for user",
        "tags": [
          "user"
        ],
        "operationId": "disableOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableOtp"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Otp is disabled"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/email-verification/send": {
      "post": {
        "summary": "Receives request to send e-mail address verification e-mail message",
        "tags": [
          "user"
        ],
        "operationId": "sendVerificationEmail",
        "responses": {
          "200": {
            "description": "Verification e-mail message sending requested"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/accept-invitation": {
      "post": {
        "summary": "Accept invitation to the Suite application.",
        "tags": [
          "user"
        ],
        "operationId": "acceptInvitation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation is accepted and a new account is being provisioned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations": {
      "get": {
        "summary": "Returns user's organizations",
        "tags": [
          "user"
        ],
        "operationId": "getUserOrganizations",
        "responses": {
          "200": {
            "description": "Organizations listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOrganization"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Creates new organization",
        "tags": [
          "user"
        ],
        "operationId": "createUserOrganization",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserOrganization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationCreated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{sessionUid}": {
      "post": {
        "summary": "Updates user organization",
        "tags": [
          "user"
        ],
        "operationId": "updateUserOrganization",
        "parameters": [
          {
            "name": "sessionUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/accounts": {
      "get": {
        "summary": "Lists user's accounts in selected organization",
        "tags": [
          "user"
        ],
        "operationId": "listAccountsInOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccountInfo"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/applications": {
      "get": {
        "summary": "Lists applications visible to the user and their state",
        "tags": [
          "user"
        ],
        "operationId": "listApplicationsInOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserApplication"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/dashboard": {
      "get": {
        "summary": "Lists products visible to the user in dashboard",
        "tags": [
          "user"
        ],
        "operationId": "getDashboard",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data for displaying user dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/users": {
      "get": {
        "summary": "Provides an information about users and their invitations in an organization",
        "tags": [
          "user"
        ],
        "operationId": "listAndSearchUsersInOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "UID",
                "USERNAME",
                "FIRST_NAME",
                "LAST_NAME",
                "EMAIL",
                "ROLE"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user in organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersInOrganizationPage"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/users/{userUid}": {
      "put": {
        "summary": "Updates user in organization",
        "tags": [
          "user"
        ],
        "operationId": "updateUserInOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userUid",
            "in": "path",
            "description": "user UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInOrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInOrganization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Removes user from organization",
        "tags": [
          "user"
        ],
        "operationId": "removeUserFromOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userUid",
            "in": "path",
            "description": "user UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request to remove user from organization was accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/provisioning": {
      "post": {
        "summary": "Inits user's account provisioning in the organization",
        "tags": [
          "user"
        ],
        "operationId": "initProvisioning",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvisioningInit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request id to be used for checking state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningInited"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/provisioning/{requestId}": {
      "get": {
        "summary": "Check status of user's account provisioning request",
        "tags": [
          "user"
        ],
        "operationId": "checkProvisioning",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of provisioning request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request id to be used for checking state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisioningStatus"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/invitations": {
      "get": {
        "summary": "Provides a paginated list of all pending invitations for the organization, excludes already existing users",
        "tags": [
          "user"
        ],
        "operationId": "listAndSearchInvitationsInOrganization",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EMAIL",
                "EMAIL_SENT"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending invitations in organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingInvitationsInOrganizationPage"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Creates invitation to organization",
        "tags": [
          "user"
        ],
        "operationId": "createUserInvitation",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvitationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The event was accepted for processing"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/settings/bifrost": {
      "get": {
        "summary": "Get the bifrost key hint for identity in organization",
        "tags": [
          "user-bifrost"
        ],
        "operationId": "getBifrostKeyHint",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bifrost key hint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BifrostKeyHint"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Generate bifrost key for an identity in organization",
        "tags": [
          "user-bifrost"
        ],
        "operationId": "generateBifrostKey",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Generate the bifrost key for an identity in organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BifrostKeyCreated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete bifrost key for an identity in organization",
        "tags": [
          "user-bifrost"
        ],
        "operationId": "deleteBifrostKey",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "bifrost key deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/settings/bifrost": {
      "get": {
        "summary": "Get list of all configured bifrost keys (hints) for identity",
        "tags": [
          "user-bifrost"
        ],
        "operationId": "listBifrostKeyInfos",
        "responses": {
          "200": {
            "description": "List of Bifrost keys (hints) for identity across organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BifrostKeyInfo"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/settings": {
      "get": {
        "summary": "Returns user settings",
        "tags": [
          "user-settings"
        ],
        "operationId": "getUserSettings",
        "parameters": [
          {
            "name": "includeApplications",
            "description": "Include application specific settings in the answer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Updates user settings",
        "tags": [
          "user-settings"
        ],
        "operationId": "updateUserSettings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonUserSettingsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shared global user settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonUserSettings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/settings/apps/{appUid}": {
      "get": {
        "summary": "Returns user settings for a specific app",
        "tags": [
          "user-settings"
        ],
        "operationId": "getUserAppSettings",
        "parameters": [
          {
            "name": "appUid",
            "in": "path",
            "description": "App UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User settings for a specific app in JSON format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserSettings"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Updates user settings for a specific app",
        "tags": [
          "user-settings"
        ],
        "operationId": "updateUserAppSettings",
        "parameters": [
          {
            "name": "appUid",
            "in": "path",
            "description": "App UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUserSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User settings for a specific app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserSettings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/socials": {
      "get": {
        "summary": "Returns list of user social accounts",
        "tags": [
          "user-socials"
        ],
        "operationId": "listSocialAccounts",
        "responses": {
          "200": {
            "description": "List of user social accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SocialAccount"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Link user social account to calling user identity",
        "tags": [
          "user-socials"
        ],
        "operationId": "linkSocialAccount",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkSocialAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Added social account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAccount"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/socials/{providerId}": {
      "delete": {
        "summary": "Unlinks user social account of the calling user",
        "tags": [
          "user-socials"
        ],
        "operationId": "unlinkSocialAccount",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "Provider id of the account to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationId}/product-switcher": {
      "get": {
        "summary": "Lists products visible to the user in Product Switcher",
        "tags": [
          "user-widgets"
        ],
        "operationId": "getProductSwitcher",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "organization UID or external id in form `applicationUid-externalId`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data for displaying product switcher",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSwitcher"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/widgets/subscription-status": {
      "get": {
        "summary": "Subscription Status widget data",
        "tags": [
          "user-widgets"
        ],
        "operationId": "getSubscriptionStatusWidget",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "widget data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionStatusWidget"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/widgets/indicator-notifications": {
      "get": {
        "summary": "Get indicator notifications for the user's organization",
        "tags": [
          "user-widgets"
        ],
        "operationId": "getIndicatorNotifications",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Indicator notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndicatorNotifications"
                }
              }
            }
          },
          "204": {
            "description": "All indicators are ok"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/v1/user/organizations/{organizationUid}/widgets/indicator-notifications/tracking": {
      "post": {
        "summary": "Emits a tracking event connected to the indicator notifications",
        "tags": [
          "user-widgets"
        ],
        "operationId": "sendIndicatorNotificationsTrackingEvent",
        "parameters": [
          {
            "name": "organizationUid",
            "in": "path",
            "description": "Organization UID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/IndicatorNotificationsTrackingEvent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event sent"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ApplicationTokenGrantRequest": {
        "required": [
          "clientId",
          "clientSecret"
        ],
        "properties": {
          "clientId": {
            "description": "corresponds to the application UID",
            "type": "string",
            "example": "some_application"
          },
          "clientSecret": {
            "description": "Secret of the application",
            "type": "string",
            "example": "secret12345"
          }
        }
      },
      "ApplicationToken": {
        "type": "object",
        "required": [
          "accessToken",
          "scopes",
          "expiresIn",
          "clientId"
        ],
        "properties": {
          "accessToken": {
            "description": "Access token for the application",
            "type": "string",
            "example": "token12345"
          },
          "scopes": {
            "description": "Scopes of the application",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "scope1",
              "scope2",
              "scope3"
            ]
          },
          "expiresIn": {
            "description": "Time in seconds the access token expires",
            "type": "integer",
            "example": 100
          },
          "clientId": {
            "description": "corresponds to the application UID",
            "type": "string",
            "example": "some_application"
          }
        }
      },
      "ApplicationTokenValidateRequest": {
        "required": [
          "clientId",
          "clientSecret",
          "accessToken"
        ],
        "properties": {
          "clientId": {
            "description": "corresponds to the application UID",
            "type": "string",
            "example": "some_application"
          },
          "clientSecret": {
            "description": "Secret of the application",
            "type": "string",
            "example": "secret12345"
          },
          "accessToken": {
            "description": "Access token for the application",
            "type": "string",
            "example": "token12345"
          }
        }
      },
      "IdentityAuditActionPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityAuditAction"
                }
              }
            }
          }
        ]
      },
      "OrganizationAuditActionPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationAuditAction"
                }
              }
            }
          }
        ]
      },
      "OrganizationAuditActionType": {
        "description": "Type of the audit record",
        "type": "string",
        "enum": [
          "DATA_RETENTION_EXCLUSION_CHANGED",
          "DATA_RETENTION_MANUALLY_REMOVED",
          "DATA_RETENTION_MANUALLY_SCHEDULED",
          "DATA_RETENTION_REMINDER_NOTIFICATION_SENT",
          "DATA_RETENTION_REMOVED",
          "DATA_RETENTION_SCHEDULE_NOTIFICATION_SENT",
          "INDICATOR_BLOCKING_STATE_CHANGED",
          "ORGANIZATION_DISABLING_CHANGED",
          "ORGANIZATION_MEMBERSHIP_ADDED",
          "ORGANIZATION_MEMBERSHIP_REMOVED"
        ]
      },
      "IdentityAuditActionType": {
        "description": "Type of the audit record",
        "type": "string",
        "enum": [
          "IDENTITY_DELETED",
          "IDENTITY_EMAIL_CHANGED",
          "IDENTITY_ENABLED",
          "IDENTITY_DISABLED",
          "IDENTITY_MEMBERSHIP_ADDED",
          "IDENTITY_MEMBERSHIP_REMOVED",
          "IDENTITY_PASSWORD_CHANGED",
          "IDENTITY_PASSWORD_RESET",
          "IDENTITY_SOURCE_CHANGED",
          "IDENTITY_USERNAME_CHANGED"
        ]
      },
      "LastAuditAction": {
        "properties": {
          "last": {
            "$ref": "#/components/schemas/OrganizationAuditAction"
          }
        }
      },
      "OrganizationAuditAction": {
        "description": "Audit record from audit log",
        "required": [
          "createdAt",
          "type",
          "author"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OrganizationAuditActionType"
          },
          "createdAt": {
            "description": "When the action happened",
            "type": "string"
          },
          "author": {
            "description": "Who performed the action",
            "type": "string"
          },
          "note": {
            "description": "Optional note associated with the audit action",
            "type": "string"
          }
        }
      },
      "IdentityAuditAction": {
        "description": "Audit record from audit log",
        "required": [
          "createdAt",
          "type",
          "author"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/IdentityAuditActionType"
          },
          "createdAt": {
            "description": "When the action happened",
            "type": "string"
          },
          "author": {
            "description": "Who performed the action",
            "type": "string"
          },
          "note": {
            "description": "Optional note associated with the audit action",
            "type": "string"
          }
        }
      },
      "BhAction": {
        "required": [
          "id",
          "name",
          "category",
          "description",
          "parameters"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the action",
            "type": "string"
          },
          "name": {
            "description": "The name of the action",
            "type": "string"
          },
          "category": {
            "description": "The category of the action",
            "type": "string"
          },
          "description": {
            "description": "The description of the action - supports Markdown",
            "type": "string"
          },
          "parameters": {
            "description": "The parameters of the action",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BhActionParameter"
            }
          }
        }
      },
      "BhActionParameter": {
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the parameter",
            "type": "string"
          },
          "name": {
            "description": "The name of the parameter",
            "type": "string"
          },
          "description": {
            "description": "The description of the parameter",
            "type": "string"
          }
        }
      },
      "CheckCredentials": {
        "required": [
          "domain",
          "username",
          "password"
        ],
        "properties": {
          "domain": {
            "description": "Domain",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "type": "string"
          },
          "password": {
            "description": "Plain text password",
            "type": "string",
            "format": "password"
          }
        }
      },
      "CredentialsChecked": {
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "description": "Result of checking",
            "type": "boolean"
          }
        }
      },
      "CheckCredentialsUser": {
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "description": "Username",
            "type": "string"
          },
          "password": {
            "description": "Plain text password",
            "type": "string",
            "format": "password"
          },
          "otpCode": {
            "description": "One-time password",
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "title": "Error code",
            "example": "NotBlank/NotFound/Error/...",
            "type": "string"
          },
          "message": {
            "title": "Error message",
            "example": "User UID cannot be null",
            "type": "string"
          },
          "args": {
            "title": "Map of error arguments - so they are not needed to be parsed from the message",
            "type": "object",
            "additionalProperties": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorEntry"
            },
            "description": "list of errors this error consist of"
          }
        }
      },
      "ErrorEntry": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "args": {
            "type": "object",
            "additionalProperties": true,
            "description": "More information about error"
          }
        }
      },
      "GenericField": {
        "description": "Field of the generic object",
        "required": [
          "id",
          "name",
          "value"
        ],
        "properties": {
          "id": {
            "description": "Identification of the field if needed",
            "type": "string"
          },
          "name": {
            "description": "Name displayed in UI",
            "type": "string"
          },
          "value": {
            "description": "Formated value displayed in UI",
            "type": "string"
          }
        }
      },
      "GenericObject": {
        "description": "Generic object",
        "type": "object",
        "required": [
          "fields"
        ],
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericField"
            }
          }
        }
      },
      "AuthKeyType": {
        "type": "string",
        "enum": [
          "RSA"
        ]
      },
      "AuthKeyCreate": {
        "required": [
          "description"
        ],
        "properties": {
          "keyType": {
            "$ref": "#/components/schemas/AuthKeyType"
          },
          "description": {
            "type": "string",
            "description": "Description of the key"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key"
          },
          "privateKey": {
            "type": "string",
            "description": "Private key"
          },
          "makeDefault": {
            "type": "boolean",
            "description": "Make the key default for signing",
            "default": false
          }
        }
      },
      "AuthKey": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthKeyInfo"
          },
          {
            "type": "object",
            "properties": {
              "publicKey": {
                "type": "string",
                "description": "Public key"
              },
              "privateKey": {
                "type": "string",
                "description": "Private key"
              }
            }
          }
        ]
      },
      "AuthKeyInfo": {
        "required": [
          "uid",
          "keyType",
          "description",
          "defaultKey"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "UID of the key"
          },
          "keyType": {
            "$ref": "#/components/schemas/AuthKeyType"
          },
          "description": {
            "type": "string",
            "description": "Description of the key"
          },
          "defaultKey": {
            "type": "boolean",
            "description": "Key is default for signing"
          }
        }
      },
      "AuthKeyUpdate": {
        "required": [
          "makeDefault"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the key (default: do not update)"
          },
          "makeDefault": {
            "type": "boolean",
            "description": "Make the key default for signing",
            "default": false
          }
        }
      },
      "ApplicationCreate": {
        "required": [
          "uid",
          "name",
          "baseUrl"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "Application UID"
          },
          "name": {
            "type": "string",
            "description": "Application display name"
          },
          "type": {
            "type": "string",
            "description": "Application type"
          },
          "baseUrl": {
            "type": "string",
            "description": "Url of the UI and Rest endpoint"
          },
          "ssoLoginUrl": {
            "type": "string",
            "description": "Url of the SSO login page"
          },
          "secret": {
            "type": "string",
            "description": "Plain secret code of the application"
          },
          "scope": {
            "description": "Array of application scopes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identityScope": {
            "description": "Array of identity scopes used when application create idm_access_token",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "docsUrl": {
            "description": "URL to documentation pages",
            "type": "string"
          },
          "enterpriseDocsUrl": {
            "description": "URL to documentation pages for Enterprise customers",
            "type": "string"
          }
        }
      },
      "ApplicationUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the application (if not set then the description is not changed)"
          },
          "baseUrl": {
            "type": "string",
            "description": "Url of the UI and Rest endpoint (if not set then the baseUrl is not changed)"
          },
          "ssoLoginUrl": {
            "type": "string",
            "description": "Url of the SSO login page (if not set then the ssoLoginUrl is not changed, if empty then url is cleared)"
          },
          "scope": {
            "description": "Array of application scopes  (if not set, scopes are not changed).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identityScope": {
            "description": "Array of identity scopes used when application create idm_access_token (if not set, scopes are not chamged)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "secret": {
            "type": "string",
            "description": "Plain secret code of the application (if not set, secret is not changed; if empty string, secret is removed)."
          },
          "docsUrl": {
            "description": "URL to documentation pages (if not set, url is not changed; if empty string, url is removed)",
            "type": "string"
          },
          "enterpriseDocsUrl": {
            "description": "URL to documentation pages for enterprise customers (if not set, url is not changed; if empty string, url is removed)",
            "type": "string"
          }
        }
      },
      "ProcessingQueueStatus": {
        "description": "Status of the processing queue",
        "type": "string",
        "enum": [
          "RUNNING",
          "PAUSED",
          "DONE"
        ]
      },
      "ProcessingQueue": {
        "required": [
          "uid",
          "from",
          "to",
          "current",
          "batchSize",
          "status"
        ],
        "properties": {
          "uid": {
            "description": "UID of the queue",
            "type": "string"
          },
          "from": {
            "description": "First id to process",
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "description": "Last id to process",
            "type": "integer",
            "format": "int64"
          },
          "current": {
            "description": "Current position of processing",
            "type": "integer",
            "format": "int64"
          },
          "batchSize": {
            "description": "How many records to process in one run",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ProcessingQueueStatus"
          }
        }
      },
      "ProcessingQueues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProcessingQueue"
        }
      },
      "ProcessingQueueUpdate": {
        "properties": {
          "from": {
            "description": "First id to process, use minimal available id if negative, use previous value if not set",
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "description": "Last id to process, use maximal available id if negative, use previous value if not set",
            "type": "integer",
            "format": "int64"
          },
          "batchSize": {
            "description": "How many records to process in one run, use previous value if not set",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConfigProperty": {
        "required": [
          "name",
          "visibility",
          "type",
          "description",
          "defaultValue"
        ],
        "properties": {
          "name": {
            "description": "Name of the config property",
            "type": "string"
          },
          "visibility": {
            "description": "Which APIs can expose value of this property.\n- `PUBLIC` - Property can be exposed via public unauthorized Config API.\n- `INTERNAL` - Property can be exposed only via Management API.\n",
            "type": "string"
          },
          "type": {
            "description": "Type of the value",
            "type": "string"
          },
          "description": {
            "description": "Description of the config property",
            "type": "string"
          },
          "defaultValue": {
            "description": "Default value of the config property",
            "type": "string"
          },
          "value": {
            "description": "Current value of the config property if set",
            "type": "string"
          },
          "updatedAt": {
            "description": "Last modification time of the property",
            "type": "string"
          },
          "updatedBy": {
            "description": "Author of the last modification",
            "type": "string"
          }
        }
      },
      "ConfigPropertyUpdate": {
        "required": [
          "updatedBy"
        ],
        "properties": {
          "value": {
            "description": "New value of the config property, use `null` to reset the value",
            "type": "string"
          },
          "author": {
            "description": "any string identifying the person that does the change, for example email",
            "type": "string"
          }
        }
      },
      "IdentityOrganization": {
        "required": [
          "role",
          "membershipType",
          "ssoBinding"
        ],
        "properties": {
          "role": {
            "description": "Role of the user in the organization",
            "type": "string"
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "ssoBinding": {
            "description": "Identity has SSO binding to the organization",
            "type": "boolean"
          }
        }
      },
      "IdentityCreate": {
        "required": [
          "domain",
          "username",
          "firstName",
          "lastName",
          "email",
          "jobRole",
          "locale",
          "timeZone"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain of the login name"
          },
          "username": {
            "type": "string",
            "description": "Identity login name"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Plain password (default: password authentication is disabled)"
          },
          "twoFactorAuthSecretKey": {
            "type": "string",
            "description": "Secret key used for 2 factor authentication(default: 2FA is disabled for the identity)"
          },
          "idmScope": {
            "description": "Idm scope of the identity",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "note": {
            "description": "Note",
            "type": "string"
          },
          "jobRole": {
            "$ref": "#/components/schemas/IdentityJobRole"
          },
          "locale": {
            "type": "string",
            "description": "Identity's locale in alpha-2 format",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone of user, 3 or 4 letter, ISO-8601 format",
            "example": "CET"
          },
          "zendeskId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the identity in Zendesk"
          },
          "excludedFromZendesk": {
            "type": "boolean",
            "description": "Identity is excluded from Zendesk synchronization"
          }
        }
      },
      "Identity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentityInfo"
          },
          {
            "type": "object",
            "required": [
              "passwordSet",
              "twoFactorAuthSecretKeySet",
              "organizations",
              "accounts",
              "emailVerificationState",
              "locale"
            ],
            "properties": {
              "passwordSet": {
                "description": "Identity has password set",
                "type": "boolean"
              },
              "twoFactorAuthSecretKeySet": {
                "description": "Identity hash 2FA key set",
                "type": "boolean"
              },
              "idmScope": {
                "description": "IDM scope of the identity",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "organizations": {
                "description": "Organizations of the identity",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MembershipInOrganization"
                }
              },
              "accounts": {
                "description": "Accounts of the identity",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "emailVerificationState": {
                "$ref": "#/components/schemas/EmailVerificationState"
              },
              "jobRole": {
                "$ref": "#/components/schemas/IdentityJobRole"
              },
              "locale": {
                "type": "string",
                "description": "Identity's locale in alpha-2 format",
                "example": "cs_CZ"
              },
              "timeZone": {
                "type": "string",
                "description": "Time zone of user, 3 or 4 letter, ISO-8601 format",
                "example": "CET"
              },
              "externalMappings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityExternalMapping"
                }
              },
              "zendeskId": {
                "type": "integer",
                "format": "int64",
                "description": "ID of the identity in Zendesk"
              },
              "excludedFromZendesk": {
                "type": "boolean",
                "description": "Identity is excluded from Zendesk synchronization"
              }
            }
          }
        ]
      },
      "IdentityExternalMapping": {
        "required": [
          "applicationUid",
          "externalId"
        ],
        "properties": {
          "applicationUid": {
            "type": "string",
            "description": "UID of application"
          },
          "externalId": {
            "type": "string",
            "description": "Application specific unique ID"
          },
          "externalReferenceId": {
            "type": "string",
            "description": "Application internal ID of entity"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of the entity creation"
          },
          "deleted": {
            "description": "External mapping is soft deleted",
            "type": "boolean"
          },
          "deletedAt": {
            "description": "Date and time of the mapping soft deletion",
            "type": "string"
          },
          "deletedBy": {
            "description": "Author of the soft deletion",
            "type": "string"
          }
        }
      },
      "IdentityAccount": {
        "required": [
          "application",
          "externalId",
          "externalUserId",
          "role",
          "enabled",
          "deleted"
        ],
        "properties": {
          "application": {
            "$ref": "#/components/schemas/Application"
          },
          "externalId": {
            "description": "Application specific id of the account",
            "type": "string"
          },
          "externalUserId": {
            "description": "external user ID",
            "type": "string"
          },
          "externalOrganizationId": {
            "description": "Id of the external organization or null if account is not associated with any organization",
            "type": "string"
          },
          "loginUrl": {
            "description": "URL that will log the user into the account",
            "type": "string"
          },
          "role": {
            "description": "Role of the account, value is application specific",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Account is enabled and can be used"
          },
          "trialExpiryDate": {
            "description": "Date and time of trial expiration",
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "description": "Account is deleted"
          },
          "deletedAt": {
            "type": "string",
            "description": "Date and time when account was deleted"
          }
        }
      },
      "IdentityAccounts": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentityInfo"
          },
          {
            "type": "object",
            "properties": {
              "accounts": {
                "description": "Accounts of the identity",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityAccount"
                }
              }
            }
          }
        ]
      },
      "IdentityUpdate": {
        "properties": {
          "firstName": {
            "description": "First name (default: do not change)",
            "type": "string"
          },
          "lastName": {
            "description": "Last name (default: do not change)",
            "type": "string"
          },
          "email": {
            "description": "Email address (default: do not change)",
            "type": "string"
          },
          "username": {
            "description": "Identity login name (default: do not change)",
            "type": "string"
          },
          "note": {
            "description": "Note (default: do not change)",
            "type": "string"
          },
          "jobRole": {
            "$ref": "#/components/schemas/IdentityJobRole"
          },
          "locale": {
            "type": "string",
            "description": "Identity's locale in alpha-2 format (default: do not change)",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone of user, 3 or 4 letter, ISO-8601 format (default: do not change)",
            "example": "CET"
          },
          "password": {
            "description": "Plain text password (default: do not change, empty string to remove password)",
            "type": "string",
            "format": "password"
          },
          "twoFactorAuthSecretKey": {
            "description": "Two factor auth secret key (default: do not change, empty string to remove key)",
            "type": "string",
            "format": "password"
          },
          "idmScope": {
            "description": "New IDM scope (default: do not change)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identitySource": {
            "$ref": "#/components/schemas/IdentitySource"
          },
          "zendeskId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the identity in Zendesk"
          },
          "excludedFromZendesk": {
            "type": "boolean",
            "description": "Identity is excluded from Zendesk synchronization"
          },
          "enabled": {
            "type": "boolean",
            "description": "Set enabled flag of the identity, if null nothing is changed"
          }
        }
      },
      "Customer": {
        "description": "Customer information",
        "required": [
          "uid",
          "name",
          "note",
          "createdAt",
          "createdBy",
          "updatedAt",
          "updatedBy"
        ],
        "properties": {
          "uid": {
            "description": "Customer UID",
            "type": "string"
          },
          "name": {
            "description": "Customer name",
            "type": "string"
          },
          "note": {
            "description": "Additional information for the customer",
            "type": "string"
          },
          "createdAt": {
            "description": "Creation time of the customer",
            "type": "string"
          },
          "createdBy": {
            "description": "Creator of the customer",
            "type": "string"
          },
          "updatedAt": {
            "description": "Last update time of the customer",
            "type": "string"
          },
          "updatedBy": {
            "description": "Last updater of the customer",
            "type": "string"
          }
        }
      },
      "CustomerCreate": {
        "description": "Customer information",
        "required": [
          "name",
          "createdBy"
        ],
        "properties": {
          "name": {
            "description": "Customer name",
            "type": "string"
          },
          "note": {
            "description": "Additional information for the customer",
            "type": "string"
          },
          "createdBy": {
            "description": "Creator of the customer",
            "type": "string"
          }
        }
      },
      "CustomerUpdate": {
        "description": "Customer information",
        "required": [
          "name",
          "updatedBy"
        ],
        "properties": {
          "name": {
            "description": "Customer name",
            "type": "string"
          },
          "note": {
            "description": "Additional information for the customer",
            "type": "string"
          },
          "updatedBy": {
            "description": "Last updater of the customer",
            "type": "string"
          }
        }
      },
      "CustomerPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        ]
      },
      "CreateOrganization": {
        "description": "Organization parameters for creating organization by Management API",
        "required": [
          "name",
          "countryCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the organization"
          },
          "stateCode": {
            "type": "string",
            "description": "ISO 3166-2 state code, e.g. 'US-NY' for New York or 'CA-ON' for Ontario"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for organization users by default",
            "example": "Europe/Prague"
          },
          "size": {
            "type": "integer",
            "description": "Number of employees"
          },
          "zendeskId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the organization in Zendesk"
          },
          "excludedFromZendesk": {
            "type": "boolean",
            "description": "Organization is excluded from Zendesk synchronization"
          },
          "customerUid": {
            "type": "string",
            "description": "UID of the related customer"
          }
        }
      },
      "ManagementOrganizationInfo": {
        "description": "Basic properties of an organization",
        "required": [
          "uid",
          "name",
          "external",
          "deleted",
          "enabled",
          "inDataRetention"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "Organization UID"
          },
          "name": {
            "type": "string",
            "description": "Organization display name"
          },
          "external": {
            "description": "External organizations connected to this one",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalOrganization"
            }
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the organization"
          },
          "stateCode": {
            "type": "string",
            "description": "ISO 3166-2 state code, e.g. 'US-NY' for New York or 'CA-ON' for Ontario"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for organization users by default",
            "example": "Europe/Prague"
          },
          "deleted": {
            "description": "Organization is soft deleted",
            "type": "boolean"
          },
          "createdAt": {
            "description": "When the organization was created",
            "type": "string"
          },
          "updatedAt": {
            "description": "Date of last organization change",
            "type": "string"
          },
          "deletedAt": {
            "description": "Date of organization deletion",
            "type": "string"
          },
          "deletedBy": {
            "type": "string",
            "description": "Author of the deletion"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled flag of the organization"
          },
          "inDataRetention": {
            "type": "boolean",
            "description": "Organization is in the data retention process"
          }
        }
      },
      "OrganizationPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagementOrganizationInfo"
                }
              }
            }
          }
        ]
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organization"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the organization"
          },
          "stateCode": {
            "type": "string",
            "description": "ISO 3166-2 state code, e.g. 'US-NY' for New York or 'CA-ON' for Ontario"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for organization users by default",
            "example": "Europe/Prague"
          },
          "zendeskId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the organization in Zendesk"
          },
          "excludedFromZendesk": {
            "type": "boolean",
            "description": "Organization is excluded from Zendesk synchronization"
          },
          "customerUid": {
            "type": "string",
            "description": "UID of the related customer"
          },
          "indicatorBlockingDisabled": {
            "type": "boolean",
            "description": "Disable/enable indicator BLOCKED state"
          },
          "enabled": {
            "type": "boolean",
            "description": "Set enabled flag of organization, if null do not change the flag"
          },
          "excludedFromDataRetention": {
            "type": "boolean",
            "description": "The flag to indicate if the organization is excluded from data retention"
          }
        }
      },
      "ManagementOrganizationSubscription": {
        "description": "basic information of the organization subscription",
        "required": [
          "type",
          "groupUid"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionPricing"
          },
          "groupUid": {
            "description": "UID of the subscription group of the organization",
            "type": "string"
          }
        }
      },
      "ManagementOrganization": {
        "description": "Full description of an organization",
        "allOf": [
          {
            "$ref": "#/components/schemas/ManagementOrganizationInfo"
          }
        ],
        "properties": {
          "zendeskId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the organization in Zendesk"
          },
          "excludedFromZendesk": {
            "type": "boolean",
            "description": "Organization is excluded from Zendesk synchronization"
          },
          "inDataRetention": {
            "type": "boolean",
            "description": "Organization is in the data retention process"
          },
          "excludedFromDataRetention": {
            "type": "boolean",
            "description": "The flag to indicate if the organization is excluded from data retention"
          },
          "customerUid": {
            "type": "string",
            "description": "UID of the related customer"
          },
          "customDomain": {
            "type": "string",
            "description": "Custom domain of the organization"
          },
          "indicatorBlockingDisabled": {
            "type": "boolean",
            "description": "Indicator state BLOCKED is disabled for the organization"
          },
          "subscription": {
            "$ref": "#/components/schemas/ManagementOrganizationSubscription"
          }
        }
      },
      "MembershipType": {
        "description": "Type of the user's membership in the organization",
        "type": "string",
        "enum": [
          "VISITOR",
          "RESIDENT",
          "UNDEFINED"
        ]
      },
      "MembershipInOrganization": {
        "required": [
          "organization",
          "role",
          "deleted",
          "membershipType",
          "ssoBinding"
        ],
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/ManagementOrganization"
          },
          "role": {
            "description": "Role of the user in the organization",
            "type": "string"
          },
          "deleted": {
            "description": "Membership in organization is soft-deleted",
            "type": "boolean"
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "ssoBinding": {
            "description": "Identity has SSO binding to the organization",
            "type": "boolean"
          }
        }
      },
      "AccountCreate": {
        "required": [
          "applicationUid",
          "externalId",
          "role"
        ],
        "properties": {
          "applicationUid": {
            "type": "string",
            "description": "UID of the application of the account"
          },
          "externalId": {
            "type": "string",
            "description": "Application specific identifier of the account"
          },
          "externalOrganizationId": {
            "type": "string",
            "description": "Id of the external organization associated with the account (optional)"
          },
          "externalUserId": {
            "type": "string",
            "description": "Application specific identifier of the user associated with the account (optional)"
          },
          "role": {
            "description": "Role of the account, value is application specific",
            "type": "string"
          }
        }
      },
      "Account": {
        "required": [
          "applicationUid",
          "role",
          "enabled",
          "deleted"
        ],
        "properties": {
          "applicationUid": {
            "type": "string",
            "description": "UID of the application of the account"
          },
          "externalId": {
            "type": "string",
            "description": "Application specific identifier of the account"
          },
          "externalOrganizationId": {
            "type": "string",
            "description": "Id of the external organization associated with the account"
          },
          "externalUserId": {
            "type": "string",
            "description": "Application specific identifier of the user associated with the account"
          },
          "externalUserNumericId": {
            "type": "string",
            "description": "Application specific numeric ID of the user associated with the account"
          },
          "role": {
            "type": "string",
            "description": "Role of the account, value is application specific"
          },
          "enabled": {
            "type": "boolean",
            "description": "Account is enabled and can be used"
          },
          "deleted": {
            "type": "boolean",
            "description": "Account is deleted"
          },
          "deletedAt": {
            "type": "string",
            "description": "Date and time when account was deleted"
          },
          "createdAt": {
            "description": "When the account was created",
            "type": "string"
          },
          "updatedAt": {
            "description": "Date of last account change",
            "type": "string"
          }
        }
      },
      "DeleteRequestPlaced": {
        "required": [
          "requestIds"
        ],
        "properties": {
          "requestIds": {
            "description": "List of request ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CustomerEntitlements": {
        "description": "Entitlements of single Chargebee Customer",
        "required": [
          "customerId",
          "subscriptionId",
          "entitlements"
        ],
        "properties": {
          "customerId": {
            "description": "Chargebee Customer ID",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Chargebee Subscription ID",
            "type": "string"
          },
          "entitlements": {
            "description": "Entitlements of the customer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEntitlement"
            }
          }
        }
      },
      "CustomerEntitlement": {
        "description": "One of entitlements of single Chargebee Customer",
        "required": [
          "id",
          "value",
          "sources"
        ],
        "properties": {
          "id": {
            "description": "Id of the entitlement",
            "type": "string"
          },
          "value": {
            "description": "Value of the entitlement",
            "type": "object"
          },
          "sources": {
            "description": "Breakdown of the value",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerEntitlementSource"
            }
          },
          "derived": {
            "description": "Entitlement is derived, based on other entitlements",
            "type": "boolean"
          }
        }
      },
      "CustomerEntitlementSource": {
        "description": "Sources of value for single entitlement",
        "required": [
          "id",
          "type",
          "value",
          "overridden"
        ],
        "properties": {
          "id": {
            "description": "Entitlement source id",
            "type": "string"
          },
          "type": {
            "description": "Entitlement source type (`addon`, `plan`, ...)",
            "type": "string"
          },
          "value": {
            "description": "Value of the source entitlement",
            "type": "object"
          },
          "overridden": {
            "description": "The entitlement is overridden by other entitlement and its value is not used",
            "type": "boolean"
          }
        }
      },
      "Metrics": {
        "required": [
          "timeSlots",
          "metrics"
        ],
        "properties": {
          "timeSlots": {
            "description": "List of time slots that are active in time of call",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSlot"
            }
          },
          "metrics": {
            "description": "List of metrics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metric"
            }
          }
        }
      },
      "TimeSlot": {
        "required": [
          "period",
          "spec",
          "start",
          "end"
        ],
        "properties": {
          "periodType": {
            "$ref": "#/components/schemas/MetricSlotPeriodType"
          },
          "periodSpec": {
            "description": "Specification/description of the time slot",
            "type": "string"
          },
          "start": {
            "description": "Start date of the slot (iso format)",
            "type": "string"
          },
          "end": {
            "description": "End date of the slot (iso format)",
            "type": "string"
          }
        }
      },
      "MetricSlotPeriodType": {
        "description": "Type of the metric slot period",
        "type": "string",
        "enum": [
          "BILLING_CYCLE",
          "BILLING_MONTH"
        ]
      },
      "Metric": {
        "required": [
          "metricId",
          "lastValue",
          "slotValues"
        ],
        "properties": {
          "metricId": {
            "description": "ID of the metric",
            "type": "string"
          },
          "lastUpdate": {
            "description": "Last update date of the metric (iso format)",
            "type": "string"
          },
          "lastValue": {
            "description": "Last value of the metric",
            "type": "integer",
            "format": "int64"
          },
          "slotValues": {
            "description": "List of of numbers, the same size as timeSlots",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "OrganizationBillingCyclesPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BillingCycle"
                }
              }
            }
          }
        ]
      },
      "BillingCycle": {
        "required": [
          "seqNumber",
          "start",
          "type"
        ],
        "properties": {
          "seqNumber": {
            "description": "Sequence number of the billing cycle",
            "type": "integer"
          },
          "start": {
            "description": "Start date of the billing cycle (iso format)",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/BillingCycleType"
          },
          "info": {
            "description": "Subscription ID",
            "type": "string"
          }
        }
      },
      "BillingCycleType": {
        "description": "Type of the billing cycle",
        "type": "string",
        "enum": [
          "UNSPECIFIED",
          "TRIAL",
          "LEGACY",
          "SUBSCRIPTION",
          "SUBSCRIPTION_ERROR"
        ]
      },
      "IndicatorState": {
        "description": "State of the indicator",
        "type": "string",
        "enum": [
          "OK",
          "WARNING",
          "REACHED",
          "BLOCKED"
        ]
      },
      "ManagementIndicatorInformation": {
        "required": [
          "indicatorId",
          "name",
          "state",
          "reservation",
          "value",
          "participation",
          "metricId",
          "warningRatio",
          "warningThreshold",
          "allocation",
          "limit",
          "limitSource",
          "blockingAllocation",
          "blockingThreshold",
          "blockingThresholdSource"
        ],
        "properties": {
          "indicatorId": {
            "description": "Id of the indicator",
            "type": "string"
          },
          "name": {
            "description": "Name of the indicator",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/IndicatorState"
          },
          "reservation": {
            "description": "How much limit is reserved for the indicator",
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "description": "Value of the indicator",
            "type": "integer",
            "format": "int64"
          },
          "participation": {
            "description": "How much of the value was consumed by the indicators's own org",
            "type": "integer",
            "format": "int64"
          },
          "metricId": {
            "description": "Source of the value - Metric ID",
            "type": "string"
          },
          "warningRatio": {
            "description": "Percentage of limit that forms warning threshold (<=0 disabled)",
            "type": "integer"
          },
          "warningThreshold": {
            "description": "Threshold value for warning level (<0 disabled)",
            "type": "integer",
            "format": "int64"
          },
          "allocation": {
            "description": "Limit allocated for the indicator (<0 unlimited)",
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "description": "Overall entitled limit (<0 unlimited)",
            "type": "integer",
            "format": "int64"
          },
          "limitSource": {
            "description": "Source of the limit value - Feature ID",
            "type": "string"
          },
          "blockingAllocation": {
            "description": "Hard limit allocated for the indicator (<0 disabled)",
            "type": "integer",
            "format": "int64"
          },
          "blockingThreshold": {
            "description": "Overall entitled hard limit (<0 disabled)",
            "type": "integer",
            "format": "int64"
          },
          "blockingThresholdSource": {
            "description": "Source of the hard limit - Feature ID",
            "type": "string"
          }
        }
      },
      "ManagementIndicatorUpdate": {
        "properties": {
          "warningRatio": {
            "description": "Warning ration as percentage (<=0 disable, null - do not update)",
            "type": "integer"
          },
          "reservation": {
            "description": "Warning ration as percentage (<0 disable, null - do not update)",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InvitationManagementInfo": {
        "required": [
          "uid",
          "email",
          "email_sent",
          "organizationUid",
          "createdBy"
        ],
        "properties": {
          "uid": {
            "description": "UID of the invitation",
            "type": "string"
          },
          "email": {
            "description": "Email address",
            "type": "string"
          },
          "identityUid": {
            "description": "UID of the invited identity",
            "type": "string"
          },
          "emailSent": {
            "description": "Email sent time",
            "type": "string"
          },
          "acceptedAt": {
            "description": "Time when the invitation was accepted",
            "type": "string"
          },
          "organizationUid": {
            "description": "UID of the organization",
            "type": "string"
          },
          "createdBy": {
            "description": "Identifier of the author who created the invitation",
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInOrganization"
            }
          }
        }
      },
      "PendingInvitationsPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvitationManagementInfo"
                }
              }
            }
          }
        ]
      },
      "ManagementSsoAutoProvisioningMethod": {
        "description": "Method configured for an organization with external SSO to auto-provision the new users",
        "type": "string",
        "enum": [
          "SAML_NOT_CONFIGURED",
          "DISABLED",
          "JITP",
          "SCIM",
          "INVALID"
        ]
      },
      "ManagementSsoConfiguration": {
        "required": [
          "autoProvisioningMethod"
        ],
        "properties": {
          "autoProvisioningMethod": {
            "$ref": "#/components/schemas/ManagementSsoAutoProvisioningMethod"
          },
          "saml": {
            "$ref": "#/components/schemas/GenericObject"
          },
          "scim": {
            "$ref": "#/components/schemas/GenericObject"
          }
        }
      },
      "ManagementSsoConfigurationUpdate": {
        "required": [
          "autoProvisioningMethod"
        ],
        "properties": {
          "autoProvisioningMethod": {
            "$ref": "#/components/schemas/ManagementSsoAutoProvisioningMethod"
          }
        }
      },
      "OrganizationMembersPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationMember"
                }
              }
            }
          }
        ]
      },
      "OrganizationMember": {
        "required": [
          "uid",
          "identitySource",
          "username",
          "email",
          "firstName",
          "lastName",
          "membershipDeleted",
          "identityDeleted",
          "enabled",
          "role",
          "membershipType",
          "ssoBinding",
          "activeAccounts",
          "createdAt"
        ],
        "properties": {
          "uid": {
            "description": "Identity UID",
            "type": "string"
          },
          "identitySource": {
            "$ref": "#/components/schemas/IdentitySource"
          },
          "username": {
            "description": "Identity login name",
            "type": "string"
          },
          "email": {
            "description": "Email address",
            "type": "string"
          },
          "firstName": {
            "description": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "Last name",
            "type": "string"
          },
          "membershipDeleted": {
            "description": "Membership is sof-deleted",
            "type": "boolean"
          },
          "identityDeleted": {
            "description": "Identity is sof-deleted",
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean",
            "description": "Identity enabled flag"
          },
          "role": {
            "description": "User's role in the organization",
            "type": "string"
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "ssoBinding": {
            "description": "SSO Binding has been approved by the user",
            "type": "boolean"
          },
          "activeAccounts": {
            "description": "List of active accounts (application names) of the identity",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "description": "When the identity was created",
            "type": "string"
          }
        }
      },
      "OauthClientCreate": {
        "required": [
          "clientId",
          "enablePkce"
        ],
        "properties": {
          "applicationUid": {
            "description": "UID of the application to which oauth client belongs",
            "type": "string"
          },
          "clientId": {
            "description": "ID of the oauth client",
            "type": "string"
          },
          "clientSecret": {
            "description": "Secret of the oauth client",
            "type": "string"
          },
          "enablePkce": {
            "description": "Should PKCE be enabled",
            "type": "boolean"
          },
          "allowedClaims": {
            "description": "OpenID claims the client can use in authorization request",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limitedTo": {
            "description": "Set initial limited organization UIDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OauthClientLimitedTo": {
        "description": "Description of an entity the OAuth Client is limited to",
        "required": [
          "uid",
          "name"
        ],
        "properties": {
          "uid": {
            "description": "UID of the entity",
            "type": "string"
          },
          "name": {
            "description": "Name of the entity",
            "type": "string"
          }
        }
      },
      "OauthClient": {
        "required": [
          "uid",
          "clientId",
          "clientSecretSet",
          "enablePkce",
          "uris",
          "allowedClaims",
          "limitedTo"
        ],
        "properties": {
          "uid": {
            "description": "UID of oauth client",
            "type": "string"
          },
          "applicationUid": {
            "description": "UID of the application to which oauth client belongs",
            "type": "string"
          },
          "clientId": {
            "description": "ID of the oauth client",
            "type": "string"
          },
          "clientSecretSet": {
            "description": "Is secret of the oauth client set (not necessarily during current call)",
            "type": "boolean"
          },
          "enablePkce": {
            "description": "Is PKCE enabled",
            "type": "boolean"
          },
          "uris": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthClientUri"
            },
            "description": "List of associated uris"
          },
          "allowedClaims": {
            "description": "OpenID claims the client can use in authorization request",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limitedTo": {
            "description": "List of organization UIDs. If non empty, the client can be usable only for members of the given organizations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthClientLimitedTo"
            }
          }
        }
      },
      "OauthClientUri": {
        "required": [
          "uid",
          "uri",
          "matchPathPrefix"
        ],
        "properties": {
          "uid": {
            "description": "UID of oauth client's uri",
            "type": "string"
          },
          "uri": {
            "description": "Uri itself",
            "type": "string"
          },
          "matchPathPrefix": {
            "description": "Indicates if path prefix should be matched",
            "type": "boolean"
          }
        }
      },
      "OauthClientUpdate": {
        "properties": {
          "clientId": {
            "description": "New value of client ID to be set, null means keep old",
            "type": "string"
          },
          "enablePkce": {
            "description": "New value of enable PKCE to be set, null means keep old",
            "type": "boolean"
          },
          "clientSecret": {
            "description": "New value of client secret, null means keep old, empty means delete old",
            "type": "string"
          },
          "applicationUid": {
            "description": "UID of the application to which oauth client belongs, null means keep old, empty means delete old",
            "type": "string"
          },
          "allowedClaims": {
            "description": "OpenID claims the client can use in authorization request, null means keep old",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limitedTo": {
            "description": "Update limited organization UIDs. If null keep the old value.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OauthClientUriCreate": {
        "required": [
          "uri",
          "matchPathPrefix"
        ],
        "properties": {
          "uri": {
            "description": "Uri itself",
            "type": "string"
          },
          "matchPathPrefix": {
            "description": "Indicates if path prefix should be mathched",
            "type": "boolean"
          }
        }
      },
      "OauthClientUriUpdate": {
        "properties": {
          "uri": {
            "description": "New value for uri, null means keep old",
            "type": "string"
          },
          "matchPathPrefix": {
            "description": "New value for match path prefix, null means keep old",
            "type": "boolean"
          }
        }
      },
      "ManagementEntitlementInformation": {
        "required": [
          "featureId",
          "featureName",
          "value",
          "hidden",
          "derived"
        ],
        "properties": {
          "featureId": {
            "description": "Id of the entitlement",
            "type": "string"
          },
          "featureName": {
            "description": "Name of the entitlement",
            "type": "string"
          },
          "value": {
            "description": "Value of entitlement",
            "type": "object"
          },
          "featureValue": {
            "description": "Original value of the entitlement, before override",
            "type": "object"
          },
          "overriddenValue": {
            "description": "Value of the override",
            "type": "object"
          },
          "overriddenBy": {
            "description": "Who overrode the value",
            "type": "string"
          },
          "overriddenAt": {
            "description": "When the value was overridden",
            "type": "string"
          },
          "hidden": {
            "description": "Entitlement is hidden, is used for derived entitlements, that are not shown to the user",
            "type": "boolean"
          },
          "derived": {
            "description": "Entitlement is derived, based on other entitlements",
            "type": "boolean"
          }
        }
      },
      "ManagementUserItemInformation": {
        "required": [
          "itemId",
          "type",
          "quantity"
        ],
        "properties": {
          "itemId": {
            "description": "Id of the item",
            "type": "string"
          },
          "type": {
            "description": "Type of the item",
            "type": "string"
          },
          "quantity": {
            "description": "Purchased quantity",
            "type": "integer"
          }
        }
      },
      "ManagementEntitlementUpdate": {
        "required": [
          "featureId",
          "value",
          "author"
        ],
        "properties": {
          "featureId": {
            "description": "Id of the entitlement",
            "type": "string"
          },
          "value": {
            "description": "New value of entitlement, string representation",
            "type": "string"
          },
          "author": {
            "description": "Identifier of the agent performing the change",
            "type": "string"
          }
        }
      },
      "SuiteTrialUpdate": {
        "required": [
          "trialPlan",
          "durationInDays"
        ],
        "properties": {
          "trialPlan": {
            "description": "Trial plan to set for the trial",
            "type": "string"
          },
          "durationInDays": {
            "description": "Trial plan duration in days",
            "type": "integer"
          }
        }
      },
      "SuiteSubscriptionUpdate": {
        "required": [
          "subscriptionId",
          "nonCancellable"
        ],
        "properties": {
          "subscriptionId": {
            "description": "Chargebee Subscription ID",
            "type": "string"
          },
          "nonCancellable": {
            "description": "If true, subscription is never cancelled, even if it is cancelled in Chargebee",
            "type": "boolean"
          },
          "forceStartOrRenew": {
            "description": "If true, subscription is started or renewed immediately without checks",
            "type": "boolean"
          }
        }
      },
      "ManagementFutureSubscription": {
        "description": "Information of the future subscription",
        "required": [
          "subscriptionId",
          "startDate"
        ],
        "properties": {
          "subscriptionId": {
            "description": "Future Subscription ID",
            "type": "string"
          },
          "startDate": {
            "description": "When the subscription starts",
            "type": "string"
          }
        }
      },
      "ManagementLegacyInformation": {
        "required": [
          "location",
          "customerId"
        ],
        "properties": {
          "location": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          }
        }
      },
      "ManagementPlanInformation": {
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Id of the Chargebee Plan",
            "type": "string"
          },
          "name": {
            "description": "Name of the trial plan",
            "type": "string"
          }
        }
      },
      "ManagementTrialInformation": {
        "required": [
          "plan",
          "expired",
          "start",
          "end"
        ],
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/ManagementPlanInformation"
          },
          "expired": {
            "description": "Trail expired",
            "type": "boolean"
          },
          "start": {
            "description": "When the trial started",
            "type": "string"
          },
          "end": {
            "description": "When the trial ends",
            "type": "string"
          }
        }
      },
      "ManagementSuiteInformation": {
        "required": [
          "customerId",
          "businessEntityId",
          "subscriptionId",
          "state",
          "subscriptionEnd",
          "termStart",
          "termEnd",
          "lastTerm",
          "cancelled",
          "readonly",
          "nonCancellable",
          "lateRenewal"
        ],
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/ManagementPlanInformation"
          },
          "customerId": {
            "description": "Chargebee Customer ID",
            "type": "string"
          },
          "businessEntityId": {
            "description": "Business entity ID of the customer",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Chargebee Subscription ID",
            "type": "string"
          },
          "subscriptionEnd": {
            "description": "When the subscription ends",
            "type": "string"
          },
          "termStart": {
            "description": "Start of the current billing cycle",
            "type": "string"
          },
          "termEnd": {
            "description": "End of the current billing cycle",
            "type": "string"
          },
          "lastTerm": {
            "description": "Current billing cycle is the last one",
            "type": "boolean"
          },
          "cancelled": {
            "description": "Subscription is cancelled",
            "type": "boolean"
          },
          "readonly": {
            "description": "Subscription is readonly - e.g. not possible to change the plan or subscription parameters",
            "type": "boolean"
          },
          "cancelReason": {
            "$ref": "#/components/schemas/SubscriptionCancelReason"
          },
          "nonCancellable": {
            "description": "If true, subscription is never cancelled, even if it is cancelled in Chargebee",
            "type": "boolean"
          },
          "lateRenewal": {
            "description": "Customer is marked for late renewal in Chargebee",
            "type": "boolean"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "nextBilling": {
            "$ref": "#/components/schemas/SubscriptionBilling"
          },
          "lastBilling": {
            "$ref": "#/components/schemas/SubscriptionBilling"
          },
          "billingPeriod": {
            "$ref": "#/components/schemas/SubscriptionBillingPeriod"
          }
        }
      },
      "ManagementPricingInformation": {
        "required": [
          "pricing",
          "usesMetrics"
        ],
        "properties": {
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManagementPricingOrganization"
            }
          },
          "pricing": {
            "$ref": "#/components/schemas/SubscriptionPricing"
          },
          "usesMetrics": {
            "description": "Whether the Metrics service with timeseries is used for the pricing",
            "type": "boolean"
          },
          "legacy": {
            "$ref": "#/components/schemas/ManagementLegacyInformation"
          },
          "trial": {
            "$ref": "#/components/schemas/ManagementTrialInformation"
          },
          "suite": {
            "$ref": "#/components/schemas/ManagementSuiteInformation"
          },
          "futureSubscription": {
            "$ref": "#/components/schemas/ManagementFutureSubscription"
          }
        }
      },
      "ManagementPricingOrganization": {
        "description": "Description of an organization in a group",
        "required": [
          "uid",
          "name"
        ],
        "properties": {
          "uid": {
            "description": "UID of the organization",
            "type": "string"
          },
          "name": {
            "description": "Name of the organization",
            "type": "string"
          }
        }
      },
      "Page": {
        "required": [
          "totalElements",
          "totalPages",
          "pageSize",
          "pageNumber"
        ],
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "pageNumber": {
            "type": "integer"
          }
        }
      },
      "ExternalOrganization": {
        "required": [
          "applicationUid",
          "externalId"
        ],
        "properties": {
          "createdAt": {
            "description": "When the external mapping was created",
            "type": "string"
          },
          "applicationUid": {
            "description": "Target application UID",
            "type": "string"
          },
          "externalId": {
            "description": "External organization ID in target application",
            "type": "string"
          },
          "trialExpiryDate": {
            "description": "Date and time of trial expiration",
            "type": "string"
          },
          "planId": {
            "description": "Subscription plan ID",
            "type": "string"
          },
          "ssoAvailable": {
            "description": "SSO is available",
            "type": "boolean",
            "default": false
          },
          "externalNumericId": {
            "description": "Numeric external organization ID",
            "type": "string"
          },
          "deleted": {
            "description": "External organization is soft deleted",
            "type": "boolean"
          },
          "deletedAt": {
            "description": "Date of external organization soft-deletion",
            "type": "string"
          },
          "deletedBy": {
            "description": "Author of the soft-deletion",
            "type": "string"
          }
        }
      },
      "IdentityInfo": {
        "required": [
          "uid",
          "username",
          "email",
          "domain",
          "identitySource",
          "deleted",
          "enabled"
        ],
        "properties": {
          "uid": {
            "description": "Identity UID",
            "type": "string"
          },
          "firstName": {
            "description": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "Last name",
            "type": "string"
          },
          "email": {
            "description": "Email address",
            "type": "string"
          },
          "domain": {
            "description": "Identity domain",
            "type": "string"
          },
          "username": {
            "description": "Identity login name",
            "type": "string"
          },
          "note": {
            "description": "Note",
            "type": "string"
          },
          "deleted": {
            "description": "Identity is sof-deleted",
            "type": "boolean"
          },
          "createdAt": {
            "description": "When the identity was created",
            "type": "string"
          },
          "updatedAt": {
            "description": "Date of tha last change to identity",
            "type": "string"
          },
          "deletedAt": {
            "description": "Date of tha identity deletion",
            "type": "string"
          },
          "deletedBy": {
            "type": "string",
            "description": "Author of the deletion"
          },
          "identitySource": {
            "$ref": "#/components/schemas/IdentitySource"
          },
          "enabled": {
            "type": "boolean",
            "description": "Identity enabled flag"
          }
        }
      },
      "IdentityInOrganization": {
        "deprecated": true,
        "description": "Deprecated, migrate to OrganizationMembers instead",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentityInfo"
          },
          {
            "type": "object",
            "properties": {
              "productAccess": {
                "description": "Information about user's access to products",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityAccount"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "description": "User's role in the organization",
                "type": "string"
              },
              "ssoBinding": {
                "description": "SSO Binding has been approved by the user",
                "type": "boolean"
              },
              "membershipType": {
                "$ref": "#/components/schemas/MembershipType"
              }
            }
          }
        ]
      },
      "IdentitiesInOrganizationPage": {
        "deprecated": true,
        "description": "Deprecated, migrate to OrganizationMembersPage instead",
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityInOrganization"
                }
              }
            }
          }
        ]
      },
      "Application": {
        "required": [
          "uid",
          "name",
          "type",
          "baseUrl",
          "secretSet",
          "identityScope"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "Application UID"
          },
          "name": {
            "type": "string",
            "description": "Application display name"
          },
          "type": {
            "type": "string",
            "description": "Application type"
          },
          "baseUrl": {
            "type": "string",
            "description": "Url of the UI and Rest endpoint"
          },
          "ssoLoginUrl": {
            "type": "string",
            "description": "Url of the SSO login page"
          },
          "secretSet": {
            "type": "boolean",
            "description": "Indicates that secret is set (not necessarily in current call)"
          },
          "scope": {
            "description": "Array of application scopes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "identityScope": {
            "description": "Array of identity scopes used when application create idm_access_token",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "docsUrl": {
            "description": "URL to documentation pages",
            "type": "string"
          },
          "enterpriseDocsUrl": {
            "description": "URL to documentation pages for Enterprise customers",
            "type": "string"
          },
          "customDomainsSupported": {
            "description": "Indicates the application supports custom domains",
            "type": "boolean"
          }
        }
      },
      "SessionLogingMethod": {
        "description": "Login method used for verifying the session",
        "type": "string",
        "enum": [
          "PASSWORD",
          "IDENTITY",
          "SSO",
          "IMPERSONATED",
          "SOCIALS",
          "UNKNOWN"
        ]
      },
      "SessionUpdate": {
        "required": [
          "resetAccessToken",
          "resetCsrfToken"
        ],
        "properties": {
          "expiresIn": {
            "description": "Number of seconds the session is valid (default: keep current expiration)",
            "type": "integer"
          },
          "resetAccessToken": {
            "description": "If access token should be regenerated",
            "type": "boolean"
          },
          "resetCsrfToken": {
            "description": "If csrf token should be regenerated",
            "type": "boolean"
          },
          "deviceUUID": {
            "type": "string",
            "description": "Device UUID"
          }
        }
      },
      "Session": {
        "required": [
          "uid",
          "expiresIn"
        ],
        "properties": {
          "uid": {
            "description": "UID of the session",
            "type": "string"
          },
          "identityUid": {
            "description": "UID of the identity or the VERIFIED session",
            "type": "string"
          },
          "expiresIn": {
            "description": "Number of seconds the session expires from now",
            "type": "integer"
          },
          "accessToken": {
            "description": "Access token, present iff session is verified",
            "type": "string"
          },
          "csrfToken": {
            "description": "CSRF token",
            "type": "string"
          },
          "loginMethod": {
            "$ref": "#/components/schemas/SessionLogingMethod"
          },
          "potentialUserUid": {
            "description": "UID of the identity during an UNVERIFIED session",
            "type": "string"
          },
          "impersonatedBy": {
            "description": "If set then the session is impersonated. Contains impersonator's identifier.",
            "type": "string"
          }
        }
      },
      "RecaptchaEnforcement": {
        "required": [
          "enforced"
        ],
        "properties": {
          "enforced": {
            "description": "Is recaptcha enforced?",
            "type": "boolean"
          }
        }
      },
      "AuthenticationResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Session"
          },
          {
            "type": "object",
            "properties": {
              "rememberMeToken": {
                "description": "RememberMe token (only if requested)",
                "type": "string"
              },
              "currentOrganization": {
                "$ref": "#/components/schemas/UserOrganization"
              },
              "state": {
                "description": "State associated with the authentication, filled by `verify-by-sso` only",
                "type": "string"
              },
              "flow": {
                "$ref": "#/components/schemas/AuthenticationFlow"
              }
            }
          }
        ]
      },
      "AuthenticationFlow": {
        "description": "Context in which the authentication is being performed",
        "type": "string",
        "enum": [
          "OTHER",
          "REDIRECT",
          "ACCEPT_INVITATION",
          "INVITATION",
          "INVITATION_AFTER_SIGNIN",
          "INTERNAL_SSO",
          "SIGNUP_VIA_SOCIALS",
          "LINK_SOCIAL_LOGIN"
        ]
      },
      "IdentityAuthentication": {
        "required": [
          "uid"
        ],
        "properties": {
          "uid": {
            "description": "UID of the identity",
            "type": "string"
          },
          "ipAddress": {
            "description": "User's IP address",
            "type": "string"
          },
          "userAgent": {
            "description": "User's user-agent",
            "type": "string"
          }
        }
      },
      "PasswordAuthentication": {
        "required": [
          "domain",
          "username",
          "password"
        ],
        "properties": {
          "domain": {
            "description": "Domain",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "type": "string"
          },
          "password": {
            "description": "Plain text password",
            "type": "string",
            "format": "password"
          },
          "ipAddress": {
            "description": "User's IP address",
            "type": "string"
          },
          "userAgent": {
            "description": "User's user-agent",
            "type": "string"
          },
          "rememberMe": {
            "description": "Setup rememberMe token",
            "type": "boolean",
            "default": false
          },
          "twoFactorCode": {
            "description": "6 digits OTP",
            "type": "string"
          }
        }
      },
      "RememberMeAuthentication": {
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Remember me token",
            "type": "string"
          },
          "ipAddress": {
            "description": "User's IP address",
            "type": "string"
          },
          "userAgent": {
            "description": "User's user-agent",
            "type": "string"
          }
        }
      },
      "SocialLoginAuthentication": {
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Socials login token",
            "type": "string"
          },
          "ipAddress": {
            "description": "User's IP address",
            "type": "string"
          },
          "userAgent": {
            "description": "User's user-agent",
            "type": "string"
          }
        }
      },
      "ImpersonateTokenAuthentication": {
        "required": [
          "token"
        ],
        "properties": {
          "impersonateToken": {
            "description": "Access token",
            "type": "string"
          }
        }
      },
      "SsoTokenAuthentication": {
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "SSO redirection token",
            "type": "string"
          },
          "ipAddress": {
            "description": "User's IP address",
            "type": "string"
          },
          "userAgent": {
            "description": "User's user-agent",
            "type": "string"
          }
        }
      },
      "SwitchOrganization": {
        "description": "Request to change the current organization of the session",
        "required": [
          "organizationUid"
        ],
        "properties": {
          "organizationUid": {
            "description": "UID of the organization to set as current organization of the session",
            "type": "string"
          }
        }
      },
      "OpenIdAcceptRequest": {
        "required": [
          "requestId"
        ],
        "properties": {
          "requestId": {
            "description": "id of the request that should be accepted by the session",
            "type": "string"
          }
        }
      },
      "OpenIdRequestInfo": {
        "required": [
          "uid",
          "prompt",
          "display",
          "sso"
        ],
        "properties": {
          "uid": {
            "description": "request UID",
            "type": "string"
          },
          "prompt": {
            "$ref": "#/components/schemas/OpenIdRequestInfoPrompt"
          },
          "display": {
            "$ref": "#/components/schemas/OpenIdRequestInfoDisplay"
          },
          "sso": {
            "description": "Display the SSO login page immediately",
            "type": "boolean"
          },
          "ssoHint": {
            "description": "Organization ID to prefill in SSO organization input, used only if `sso=true`",
            "type": "string"
          }
        }
      },
      "OpenIdRequestInfoPrompt": {
        "description": "Prompt value used for the authorization request calls",
        "type": "string",
        "enum": [
          "DEFAULT",
          "NONE",
          "LOGIN",
          "RELAXED_LOGIN"
        ]
      },
      "OpenIdRequestInfoDisplay": {
        "description": "How to display the login page",
        "type": "string",
        "enum": [
          "PAGE",
          "POPUP"
        ]
      },
      "OpenIdConfirmRequest": {
        "required": [
          "accountId"
        ],
        "properties": {
          "accountId": {
            "description": "account external ID to use for SSO Flow",
            "type": "string"
          }
        }
      },
      "OpenIdDenyRequest": {
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/OauthTokenErrorType"
          }
        }
      },
      "OpenIdRequestAccount": {
        "required": [
          "availability"
        ],
        "properties": {
          "availability": {
            "description": "Status of the account",
            "type": "string",
            "enum": [
              "AVAILABLE",
              "NOT_AVAILABLE",
              "INVALID"
            ]
          },
          "accountId": {
            "description": "account external ID to use for SSO Flow if availability is AVAILABLE otherwise empty",
            "type": "string"
          }
        }
      },
      "OpenIdRedirect": {
        "required": [
          "redirectTo"
        ],
        "properties": {
          "redirectTo": {
            "description": "Where to redirect the user after OpenId request is confirmed/denied",
            "type": "string"
          }
        }
      },
      "SubscriptionPricing": {
        "description": "Which pricing option is used for the subscription",
        "type": "string",
        "enum": [
          "SUITE",
          "LEGACY",
          "TRIAL",
          "NONE"
        ]
      },
      "SuitePlan": {
        "description": "Plan of the Suite Subscription",
        "required": [
          "id",
          "name",
          "currency",
          "billingPeriod"
        ],
        "properties": {
          "id": {
            "description": "Id of plan",
            "type": "string"
          },
          "name": {
            "description": "Name of the plan",
            "type": "string"
          },
          "planInquiriesUrl": {
            "description": "URL to inquire about the plan",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "nextBilling": {
            "$ref": "#/components/schemas/SubscriptionBilling"
          },
          "lastBilling": {
            "$ref": "#/components/schemas/SubscriptionBilling"
          },
          "billingPeriod": {
            "$ref": "#/components/schemas/SubscriptionBillingPeriod"
          },
          "features": {
            "$ref": "#/components/schemas/PlanFeatures"
          }
        }
      },
      "PlanFeatures": {
        "description": "Features of the Suite/Platform Subscription Plan",
        "required": [
          "addCapacity",
          "supportsRetention"
        ],
        "properties": {
          "addCapacity": {
            "description": "Plan supports adding additional capacity",
            "type": "boolean"
          },
          "supportsRetention": {
            "description": "Plan supports retention",
            "type": "boolean"
          }
        }
      },
      "SuitePlanCategory": {
        "description": "Category of the Suite Subscription Plan",
        "type": "string",
        "enum": [
          "DIRECT",
          "LSP"
        ]
      },
      "SubscriptionBilling": {
        "required": [
          "date"
        ],
        "properties": {
          "date": {
            "description": "Date of billing",
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "value": {
            "description": "Value of billing",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SubscriptionBillingPeriod": {
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "value": {
            "description": "Value of next billing period",
            "type": "integer"
          },
          "unit": {
            "description": "Unit of next billing period",
            "type": "string",
            "enum": [
              "MONTH",
              "YEAR"
            ]
          }
        }
      },
      "SubscriptionCancelReason": {
        "description": "Why the subscription was cancelled, set only if cancelled is true",
        "type": "string",
        "enum": [
          "UNSPECIFIED",
          "NOT_PAID"
        ]
      },
      "IndicatorDisplayStyle": {
        "description": "Style of displaying the indicator",
        "type": "string",
        "enum": [
          "LOW_VOLUME",
          "HIGH_VOLUME"
        ]
      },
      "SubscriptionDetails": {
        "required": [
          "id",
          "serviceName",
          "status",
          "addons",
          "paymentMethods",
          "site",
          "location"
        ],
        "properties": {
          "id": {
            "description": "Identifier of the subscription",
            "type": "string"
          },
          "seats": {
            "$ref": "#/components/schemas/SubscriptionSeats"
          },
          "edition": {
            "$ref": "#/components/schemas/SubscriptionEdition"
          },
          "paymentMethods": {
            "$ref": "#/components/schemas/SubscriptionPaymentMethods"
          },
          "serviceName": {
            "type": "string",
            "enum": [
              "TMS",
              "STRINGS"
            ],
            "description": "Name of the service"
          },
          "primaryPaymentMethod": {
            "$ref": "#/components/schemas/PrimaryPaymentMethod"
          },
          "autoCollection": {
            "type": "boolean"
          },
          "hasScheduledChanges": {
            "description": "there are pending changes that will be applied at the start of next billing period",
            "type": "boolean"
          },
          "startDate": {
            "type": "integer",
            "format": "int64",
            "description": "Subscription start date timestamp(UTC) in seconds"
          },
          "endDate": {
            "type": "integer",
            "format": "int64",
            "description": "Subscription end date timestamp(UTC) in seconds"
          },
          "status": {
            "type": "string",
            "enum": [
              "FUTURE",
              "IN_TRIAL",
              "ACTIVE",
              "NON_RENEWING",
              "CANCELLED"
            ]
          },
          "availableCredits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionAvailableCredit"
            }
          },
          "nextBilling": {
            "$ref": "#/components/schemas/SubscriptionBilling"
          },
          "billingPeriod": {
            "$ref": "#/components/schemas/SubscriptionBillingPeriod"
          },
          "location": {
            "description": "Chargebee site ID",
            "type": "string"
          },
          "site": {
            "description": "Chargebee site name",
            "type": "string"
          },
          "customer_id": {
            "type": "string",
            "description": "CustomerId from subscription client"
          }
        }
      },
      "SubscriptionAvailableCredit": {
        "required": [
          "value",
          "currencyCode"
        ],
        "properties": {
          "value": {
            "description": "Value of available credit",
            "type": "integer",
            "format": "int64"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        }
      },
      "SubscriptionSeats": {
        "properties": {
          "managers": {
            "description": "Number of managers",
            "type": "integer"
          },
          "linguists": {
            "description": "Number of linguists",
            "type": "integer"
          }
        }
      },
      "SubscriptionEdition": {
        "required": [
          "name",
          "code"
        ],
        "properties": {
          "name": {
            "description": "Edition name",
            "type": "string"
          },
          "code": {
            "description": "Edition code",
            "type": "string"
          }
        }
      },
      "Invoice": {
        "required": [
          "id",
          "amount",
          "status",
          "issued_on"
        ],
        "properties": {
          "id": {
            "description": "Invoice ID",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/InvoicesAmount"
          },
          "status": {
            "description": "Invoice status",
            "type": "string",
            "enum": [
              "PAID",
              "POSTED",
              "PAYMENT_DUE",
              "NOT_PAID",
              "VOIDED",
              "PENDING"
            ]
          },
          "issued_on": {
            "description": "Invoice date",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InvoicesAmount": {
        "required": [
          "value",
          "currencyCode"
        ],
        "properties": {
          "value": {
            "description": "Value of invoices amount",
            "type": "integer",
            "format": "int64"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        }
      },
      "ChargebeeHostedPage": {
        "description": "Information about hosted page on Chargebee server that user can use to make changes in its subscription",
        "properties": {
          "id": {
            "description": "Unique hosted page identifier",
            "type": "string"
          },
          "url": {
            "description": "URL to hosted page",
            "type": "string"
          },
          "type": {
            "description": "Type of the requested hosted page",
            "type": "string",
            "enum": [
              "CHECKOUT_NEW",
              "CHECKOUT_EXISTING",
              "UPDATE_PAYMENT_METHOD",
              "MANAGE_PAYMENT_SOURCES",
              "COLLECT_NOW",
              "EXTEND_SUBSCRIPTION",
              "CHECKOUT_ONE_TIME",
              "PRE_CANCEL"
            ]
          },
          "state": {
            "description": "Indicating the current state of the hosted page resource",
            "type": "string",
            "enum": [
              "CREATED",
              "REQUESTED",
              "SUCCEEDED",
              "CANCELLED",
              "ACKNOWLEDGED"
            ]
          },
          "embed": {
            "description": "Defines that iframe should be embedded or not",
            "type": "boolean"
          },
          "createdAt": {
            "description": "Indicates when this hosted page url is generated",
            "type": "integer",
            "format": "int64"
          },
          "expiresAt": {
            "description": "Indicates when this hosted page url will expire. After this, the hosted page cannot be accessed",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CurrencyCode": {
        "type": "string",
        "enum": [
          "EUR",
          "USD",
          "CZK",
          "GBP"
        ]
      },
      "SubscriptionPayPal": {
        "required": [
          "maskedEmail",
          "valid"
        ],
        "properties": {
          "maskedEmail": {
            "description": "Masked e-mail address",
            "type": "string"
          },
          "valid": {
            "description": "Paypal status",
            "type": "boolean"
          }
        }
      },
      "SubscriptionCreditCard": {
        "required": [
          "maskedNumber",
          "valid",
          "expirationMonth",
          "expirationYear",
          "type"
        ],
        "properties": {
          "maskedNumber": {
            "description": "Credit Card masked number (last 4 digits)",
            "type": "string"
          },
          "valid": {
            "description": "Credit card status",
            "type": "boolean"
          },
          "expirationMonth": {
            "description": "Month of the expiration date of the card",
            "type": "integer"
          },
          "expirationYear": {
            "description": "Year of the expiration date of the card",
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMERICAN_EXPRESS",
              "OTHER",
              "NOT_APPLICABLE"
            ]
          }
        }
      },
      "SubscriptionDirectDebit": {
        "properties": {
          "enabled": {
            "description": "Status of Direct Debit",
            "type": "boolean"
          }
        }
      },
      "SubscriptionBankTransfer": {
        "properties": {
          "enabled": {
            "description": "Status of Bank Transfer",
            "type": "boolean"
          }
        }
      },
      "SubscriptionPaymentMethods": {
        "properties": {
          "creditCard": {
            "$ref": "#/components/schemas/SubscriptionCreditCard"
          },
          "payPal": {
            "$ref": "#/components/schemas/SubscriptionPayPal"
          },
          "bankTransfer": {
            "$ref": "#/components/schemas/SubscriptionBankTransfer"
          },
          "directDebit": {
            "$ref": "#/components/schemas/SubscriptionDirectDebit"
          },
          "gateway_account_id": {
            "type": "string",
            "description": "Gateway account id"
          },
          "status": {
            "type": "string",
            "enum": [
              "VALID",
              "EXPIRING",
              "EXPIRED",
              "INVALID",
              "PENDING_VERIFICATION"
            ]
          }
        }
      },
      "PrimaryPaymentMethod": {
        "type": "string",
        "enum": [
          "CREDIT_CARD",
          "PAYPAL",
          "DIRECT_DEBIT"
        ],
        "description": "Name of the primary payment method"
      },
      "BillingDetails": {
        "properties": {
          "firstName": {
            "description": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "Last name",
            "type": "string"
          },
          "emailAddress": {
            "description": "Email address",
            "type": "string"
          },
          "company": {
            "description": "Company",
            "type": "string"
          },
          "line1": {
            "description": "First line of address",
            "type": "string"
          },
          "line2": {
            "description": "Second line of address",
            "type": "string"
          },
          "zipCode": {
            "description": "Zip code",
            "type": "string"
          },
          "city": {
            "description": "City",
            "type": "string"
          },
          "stateCode": {
            "description": "Code of the state",
            "type": "string"
          },
          "country": {
            "description": "Country code",
            "type": "string"
          },
          "vatNumber": {
            "description": "Customer's VAT number",
            "type": "string"
          },
          "freelancer": {
            "description": "Freelancer status",
            "type": "boolean"
          },
          "paymentMethods": {
            "$ref": "#/components/schemas/SubscriptionPaymentMethods"
          },
          "primaryPaymentMethod": {
            "$ref": "#/components/schemas/PrimaryPaymentMethod"
          }
        }
      },
      "IdentitySource": {
        "description": "Identity creation source",
        "type": "string",
        "enum": [
          "IDM",
          "SYNC_STRINGS",
          "SYNC_TMS",
          "SCIM",
          "SAML",
          "SOCIALS"
        ]
      },
      "SsoFeature": {
        "description": "Configuration of the External SSO feature",
        "required": [
          "visibility"
        ],
        "properties": {
          "visibility": {
            "description": "Visibility level of the External SSO",
            "type": "string",
            "enum": [
              "EDITABLE",
              "NON_EDITABLE",
              "TEASER",
              "NONE"
            ]
          }
        }
      },
      "InvitationFeature": {
        "description": "Configuration of the Invitation feature",
        "required": [
          "visibility"
        ],
        "properties": {
          "visibility": {
            "description": "Visibility level of the Invitation feature, if the organization can use IDM Invitations * `ALL` - available without limitations * `MEMBERS` - only available for members of the organization (cross-invitations) * `NONE` - not available at all\n",
            "type": "string",
            "enum": [
              "ALL",
              "MEMBERS",
              "NONE"
            ]
          }
        }
      },
      "SwitchableFeature": {
        "description": "Configuration of the Switchable feature",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "description": "Switchable status",
            "type": "string",
            "enum": [
              "CURRENT",
              "ALLOWED",
              "NOT_ALLOWED"
            ]
          },
          "reason": {
            "description": "Why switch is not allowed",
            "type": "string",
            "enum": [
              "SSO_REQUIRED",
              "PASSWORD_REQUIRED",
              "ORGANIZATION_DISABLED"
            ]
          },
          "startUrl": {
            "description": "SAML start url, filled only for NOT_ALLOWED and SSO_REQUIRED combination",
            "type": "string"
          }
        }
      },
      "UserOrganizationFeatures": {
        "description": "Configuration of features for the organization",
        "required": [
          "sso",
          "switchable",
          "invitations"
        ],
        "properties": {
          "sso": {
            "$ref": "#/components/schemas/SsoFeature"
          },
          "switchable": {
            "$ref": "#/components/schemas/SwitchableFeature"
          },
          "invitations": {
            "$ref": "#/components/schemas/InvitationFeature"
          }
        }
      },
      "AssignmentSource": {
        "description": "Source of the user's assignment to the organization",
        "type": "string",
        "enum": [
          "SYNC_STRINGS",
          "SYNC_TMS",
          "SIGN_UP",
          "SOCIAL",
          "INVITATION",
          "SCIM",
          "SAML",
          "UNKNOWN",
          "MIGRATION"
        ]
      },
      "EmailVerificationState": {
        "description": "State of email verification",
        "type": "string",
        "enum": [
          "VERIFIED",
          "EMAIL_SENT",
          "UNVERIFIED",
          "EMAIL_CHANGE_PENDING"
        ]
      },
      "InvitationInOrganization": {
        "required": [
          "uid",
          "email",
          "email_sent"
        ],
        "properties": {
          "uid": {
            "description": "UID of the invitation",
            "type": "string"
          },
          "email": {
            "description": "Email address",
            "type": "string"
          },
          "emailSent": {
            "description": "Email sent time",
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInOrganization"
            }
          }
        }
      },
      "ProductInOrganization": {
        "required": [
          "uid",
          "name",
          "type",
          "state"
        ],
        "properties": {
          "uid": {
            "description": "Product UID",
            "type": "string"
          },
          "name": {
            "description": "Product name",
            "type": "string"
          },
          "type": {
            "description": "Product type",
            "type": "string"
          },
          "state": {
            "description": "Product state concerning organization and the user",
            "type": "string",
            "enum": [
              "ACTIVE",
              "NO_ACCESS",
              "PENDING",
              "PROVISIONING_IN_PROGRESS",
              "ERROR",
              "REMOVAL_IN_PROGRESS",
              "REMOVAL_ERROR"
            ]
          },
          "invitationUid": {
            "description": "Invitation UID",
            "type": "string"
          },
          "invitationEmailSent": {
            "description": "Invitation email sent at",
            "type": "string"
          },
          "role": {
            "description": "Role of the user in the product",
            "type": "string"
          }
        }
      },
      "IdentityJobRole": {
        "description": "Identity Job role",
        "type": "string",
        "enum": [
          "DEVELOPER",
          "MANAGER",
          "LOCALIZATION_MANAGER",
          "TRANSLATOR",
          "DESIGNER",
          "MARKETER",
          "SCHOLAR",
          "STUDENT",
          "OTHER"
        ]
      },
      "UserOrganizationTrialSubscription": {
        "description": "Additional parameters to organization in TRIAL pricing state",
        "required": [
          "expired",
          "daysRemaining",
          "trialEnd"
        ],
        "properties": {
          "expired": {
            "description": "trial is expired",
            "type": "boolean"
          },
          "daysRemaining": {
            "description": "How many days of trial remains",
            "type": "integer",
            "format": "int64"
          },
          "trialEnd": {
            "description": "When the trial ends",
            "type": "string"
          },
          "organizationDataRemovalDate": {
            "description": "Date, when all organization data will be removed",
            "type": "string"
          }
        }
      },
      "UserOrganizationSuiteSubscription": {
        "description": "Additional parameters to organization in SUITE pricing state",
        "required": [
          "lastTerm",
          "cancelled",
          "readonly"
        ],
        "properties": {
          "subscriptionEnd": {
            "description": "When the subscription ends",
            "type": "string"
          },
          "lastTerm": {
            "description": "Current term is the last term",
            "type": "boolean"
          },
          "cancelled": {
            "description": "Subscription is cancelled",
            "type": "boolean"
          },
          "readonly": {
            "description": "Subscription is readonly - e.g. not possible to change the plan or subscription parameters",
            "type": "boolean"
          },
          "organizationDataRemovalDate": {
            "description": "Date, when all organization data will be removed",
            "type": "string"
          }
        }
      },
      "UserOrganizationSubscription": {
        "required": [
          "pricingType"
        ],
        "properties": {
          "pricingType": {
            "$ref": "#/components/schemas/SubscriptionPricing"
          },
          "management": {
            "description": "Calling user can manage subscriptions, invoices and billing or just view them",
            "enum": [
              "RETENTION",
              "MANAGE",
              "VIEW",
              "NONE"
            ]
          },
          "trial": {
            "$ref": "#/components/schemas/UserOrganizationTrialSubscription"
          },
          "suite": {
            "$ref": "#/components/schemas/UserOrganizationSuiteSubscription"
          }
        }
      },
      "UserOrganization": {
        "required": [
          "uid",
          "name",
          "role",
          "pricing",
          "features",
          "enabled",
          "hasMultipleOrgs",
          "membershipType"
        ],
        "properties": {
          "uid": {
            "description": "UID of the organization",
            "type": "string"
          },
          "name": {
            "description": "Name of the organization",
            "type": "string"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the organization"
          },
          "stateCode": {
            "type": "string",
            "description": "ISO 3166-2 state code, e.g. 'US-NY' for New York or 'CA-ON' for Ontario"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for organization users by default",
            "example": "Europe/Prague"
          },
          "role": {
            "description": "Role of the user in the organization",
            "type": "string"
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "assignmentSource": {
            "$ref": "#/components/schemas/AssignmentSource"
          },
          "pricing": {
            "$ref": "#/components/schemas/SubscriptionPricing"
          },
          "subscription": {
            "$ref": "#/components/schemas/UserOrganizationSubscription"
          },
          "features": {
            "$ref": "#/components/schemas/UserOrganizationFeatures"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled flag of the organization"
          },
          "hasMultipleOrgs": {
            "type": "boolean",
            "description": "Indicates if the identity has active membership in other organizations as well"
          }
        }
      },
      "UserOrganizationUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organization"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the organization"
          },
          "stateCode": {
            "type": "string",
            "description": "ISO 3166-2 state code, e.g. 'US-NY' for New York or 'CA-ON' for Ontario"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for organization users by default",
            "example": "Europe/Prague"
          }
        }
      },
      "UserInfo": {
        "required": [
          "uid",
          "username",
          "email",
          "accounts",
          "passwordSet",
          "otpSecretSet",
          "emailVerificationState",
          "signupFinalized",
          "identitySource",
          "editable",
          "marketingConsent"
        ],
        "properties": {
          "uid": {
            "description": "UID of caller's identity",
            "type": "string"
          },
          "username": {
            "description": "Username of caller",
            "type": "string"
          },
          "email": {
            "description": "Email of caller",
            "type": "string"
          },
          "marketingConsent": {
            "description": "User's marketing consent. True by default",
            "type": "boolean"
          },
          "firstName": {
            "description": "First name of the user",
            "type": "string"
          },
          "lastName": {
            "description": "Last name of the user",
            "type": "string"
          },
          "editable": {
            "description": "User creadentials (Name/Surname/email/password) can be edited",
            "type": "boolean",
            "default": false
          },
          "userSettings": {
            "$ref": "#/components/schemas/UserSettingsInfo"
          },
          "accounts": {
            "description": "Accounts of the identity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccountInfo"
            }
          },
          "passwordSet": {
            "description": "Password is set",
            "type": "boolean"
          },
          "otpSecretSet": {
            "description": "OTP secret is set",
            "type": "boolean"
          },
          "emailVerificationState": {
            "$ref": "#/components/schemas/EmailVerificationState"
          },
          "signupFinalized": {
            "description": "Sign up is finalized",
            "type": "boolean"
          },
          "lastOrganization": {
            "$ref": "#/components/schemas/UserOrganization"
          },
          "identitySource": {
            "$ref": "#/components/schemas/IdentitySource"
          }
        }
      },
      "UserApplicationInfo": {
        "description": "Information about application",
        "required": [
          "uid",
          "name",
          "type",
          "docUrl",
          "enterpriseDocUrl"
        ],
        "properties": {
          "uid": {
            "description": "UID of the application",
            "type": "string"
          },
          "name": {
            "description": "Name of the application",
            "type": "string"
          },
          "type": {
            "description": "Type of the application",
            "type": "string"
          },
          "docUrl": {
            "description": "Location of the application description page",
            "type": "string"
          },
          "enterpriseDocUrl": {
            "description": "Location of the application description page for Enterprise customers",
            "type": "string"
          }
        }
      },
      "UserAccountInfo": {
        "required": [
          "uid",
          "application",
          "role",
          "enabled"
        ],
        "properties": {
          "uid": {
            "description": "UID of the account",
            "type": "string"
          },
          "organization": {
            "type": "object",
            "properties": {
              "uid": {
                "description": "UID of the organization",
                "type": "string"
              },
              "name": {
                "description": "Name of the organization",
                "type": "string"
              },
              "ssoEnabled": {
                "description": "Indicates the organisation uses SSO",
                "type": "boolean"
              }
            }
          },
          "application": {
            "$ref": "#/components/schemas/UserApplicationInfo"
          },
          "loginUrl": {
            "description": "URL that will log the user into the account",
            "type": "string"
          },
          "role": {
            "description": "Application specific role of the identity",
            "type": "string"
          },
          "trialExpiryDate": {
            "description": "Date and time of trial expiration",
            "type": "string"
          },
          "subscription": {
            "$ref": "#/components/schemas/ExternalOrganization"
          },
          "enabled": {
            "description": "Account can be used",
            "type": "boolean"
          }
        }
      },
      "UserSettingsInfo": {
        "description": "Preferred user settings - DEPRECATED - user/settings endpoint instead",
        "deprecated": true,
        "required": [
          "uid",
          "locale"
        ],
        "properties": {
          "uid": {
            "description": "UID of caller's identity",
            "type": "string"
          },
          "locale": {
            "description": "Preferred locale of caller's identity",
            "type": "string"
          },
          "timeZone": {
            "description": "Preferred time zone of caller's identity",
            "type": "string"
          }
        }
      },
      "InvitationInitRequest": {
        "properties": {
          "uid": {
            "description": "UID of the user, field for cross-invitations if already invited to the organization and application. Empty for new invitations.",
            "type": "string"
          }
        }
      },
      "InvitationInitResponse": {
        "required": [
          "applications"
        ],
        "description": "Applications that can be used for invitations",
        "properties": {
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationInit"
            }
          }
        }
      },
      "ApplicationInit": {
        "description": "Application available to be used for invitations",
        "required": [
          "uid",
          "roles",
          "available",
          "trial"
        ],
        "properties": {
          "uid": {
            "description": "Application UID",
            "type": "string"
          },
          "roles": {
            "description": "Roles can be used for the application",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "available": {
            "description": "Indicates if a new invitation can be created for the application",
            "type": "boolean",
            "default": false
          },
          "trial": {
            "description": "Indicates if the invite is performed during the trial period",
            "type": "boolean",
            "default": false
          }
        }
      },
      "Dashboard": {
        "description": "Data for displaying dashboard",
        "required": [
          "products"
        ],
        "properties": {
          "products": {
            "description": "Products to be displayed in dashboard",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardProduct"
            }
          }
        }
      },
      "DashboardProductState": {
        "description": "State of the product in the dashboard",
        "type": "string",
        "enum": [
          "UPGRADE_NEEDED",
          "ENABLED",
          "CONNECT_NEEDED",
          "INACTIVE",
          "READY",
          "ACCOUNT_PROVISIONING",
          "PROVISIONING_FAILED",
          "PRODUCT_PROVISIONING",
          "TMS_ACCOUNT_REQUIRED",
          "TMS_OR_STRINGS_ACCOUNT_REQUIRED",
          "FIRST_OR_LAST_NAME_EMPTY",
          "WHITESPACE_IN_USERNAME",
          "EMAIL_USED",
          "MISSING_ORGANIZATION_NAME",
          "INSUFFICIENT_TMS_ROLE",
          "INSUFFICIENT_LANGUAGE_AI_ROLE",
          "INVITATION_NEEDED",
          "README"
        ]
      },
      "DashboardProductSection": {
        "description": "Where to display the product in the dashboard",
        "type": "string",
        "enum": [
          "AVAILABLE",
          "OTHER"
        ]
      },
      "DashboardProduct": {
        "description": "Product displayed in the dashboard",
        "required": [
          "productId",
          "name",
          "state",
          "section"
        ],
        "properties": {
          "productId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/DashboardProductState"
          },
          "section": {
            "$ref": "#/components/schemas/DashboardProductSection"
          },
          "loginUrl": {
            "description": "Where to redirect user to perform login, only for READY state",
            "type": "string"
          },
          "requestId": {
            "description": "Id of the running provisioning request, only for PROVISIONING_XXXX states",
            "type": "string"
          },
          "docUrl": {
            "description": "Documentation link, only for UPGRADE_NEEDED and README states",
            "type": "string"
          }
        }
      },
      "GrantUserAccessToken": {
        "description": "Request parameters to acquire the user access token",
        "required": [
          "applicationUid"
        ],
        "properties": {
          "applicationUid": {
            "description": "UID of the application for which to get the access token",
            "type": "string"
          }
        }
      },
      "UserAccessToken": {
        "description": "Access token for accessing applications",
        "required": [
          "accessToken",
          "expiresAt"
        ],
        "properties": {
          "accessToken": {
            "description": "access token",
            "type": "string"
          },
          "expiresAt": {
            "description": "date when the token expires",
            "type": "string"
          }
        }
      },
      "ProductSwitcher": {
        "description": "Data for displaying Product Switcher",
        "required": [
          "products",
          "currentOrganizationName",
          "dashboardUrl"
        ],
        "properties": {
          "products": {
            "description": "Products to be displayed in Product Switcher",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitcherProduct"
            }
          },
          "organizationSettingsUrl": {
            "description": "URL to navigate user to current organization settings (in case the user has role Manage organization",
            "type": "string"
          },
          "currentOrganizationName": {
            "description": "Name the current organization",
            "type": "string"
          },
          "organizationSwitchUrl": {
            "description": "URL to to switch organizations if there are more than one",
            "type": "string"
          },
          "dashboardUrl": {
            "description": "URL to navigate user to IDM dashboard",
            "type": "string"
          }
        }
      },
      "SwitcherProductState": {
        "description": "State of the product in product switcher",
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE",
          "NO_ACCOUNT",
          "NOT_AVAILABLE"
        ]
      },
      "SwitcherProduct": {
        "description": "Product displayed in the product switcher",
        "required": [
          "id",
          "name",
          "state"
        ],
        "properties": {
          "productId": {
            "description": "Product ID",
            "type": "string"
          },
          "name": {
            "description": "Name of the product",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SwitcherProductState"
          },
          "url": {
            "description": "URL to navigate user to when selecting the product in switcher",
            "type": "string"
          }
        }
      },
      "ProvisioningInit": {
        "properties": {
          "applicationUid": {
            "description": "UID of the application where to provision the account (only for legacy Dashboard)",
            "type": "string"
          },
          "productId": {
            "description": "ID of the product to provision (only for new Suite Dashboard)",
            "type": "string"
          }
        }
      },
      "ProvisioningInited": {
        "required": [
          "requestId"
        ],
        "properties": {
          "requestId": {
            "description": "ID of async provisioning request",
            "type": "string"
          }
        }
      },
      "ProvisioningStatus": {
        "required": [
          "requestId",
          "state",
          "application",
          "organizationUid"
        ],
        "properties": {
          "requestId": {
            "description": "ID of async provisioning request",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ProvisioningState"
          },
          "application": {
            "$ref": "#/components/schemas/Application"
          },
          "organizationUid": {
            "description": "Organization UID",
            "type": "string"
          }
        }
      },
      "ProvisioningState": {
        "type": "string",
        "enum": [
          "IN_PROGRESS",
          "FINISHED",
          "FAILED"
        ]
      },
      "QrCode": {
        "required": [
          "qr",
          "secret"
        ],
        "properties": {
          "qr": {
            "description": "Base 64 encoded PNG QR code",
            "type": "string"
          },
          "secret": {
            "description": "Secret code",
            "type": "string"
          }
        }
      },
      "OtpSecret": {
        "required": [
          "secret",
          "code"
        ],
        "properties": {
          "secret": {
            "description": "OTP secret",
            "type": "string"
          },
          "code": {
            "description": "6 digits otp",
            "type": "string"
          }
        }
      },
      "DisableOtp": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "description": "6 digits otp",
            "type": "string"
          }
        }
      },
      "SamlConfiguration": {
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "description": "SAML is enabled",
            "type": "boolean"
          },
          "idpSsoUrl": {
            "description": "IdP SSO URL",
            "type": "string"
          },
          "idpEntityId": {
            "description": "IdP entity ID (issuer)",
            "type": "string"
          },
          "idpCertificateType": {
            "$ref": "#/components/schemas/SamlIdpCertificateType"
          },
          "idpCertificate": {
            "description": "IdP certificate payload",
            "type": "string"
          },
          "nameIdFormat": {
            "$ref": "#/components/schemas/SamlNameIdFormat"
          },
          "organizationSamlId": {
            "description": "Public identifier used in login dialog",
            "type": "string"
          },
          "ssoRequired": {
            "description": "SSO is required",
            "type": "boolean",
            "default": false
          },
          "ssoRequiredForOwners": {
            "description": "SSO is required for owners (applies when ssoRequired=true)",
            "type": "boolean",
            "default": false
          },
          "ssoRequiredForVisitors": {
            "description": "SSO is required for Visitors (applies when ssoRequired=true)",
            "type": "boolean",
            "default": false
          },
          "ssoRequiredDomains": {
            "description": "Set of domains (without @ symbol) which require SSO login. If none provided, then all domains require SSO login",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "jitpEnabled": {
            "description": "Create new identities when user logs in by SAML first time",
            "type": "boolean",
            "default": false
          },
          "idpCertificateFingerprint": {
            "description": "IdP certificate fingerprint",
            "type": "string"
          },
          "idpCertificateFingerprintAlg": {
            "$ref": "#/components/schemas/SamlIdpCertificateFingerprintAlg"
          },
          "scimEnabled": {
            "description": "SCIM is enabled",
            "type": "boolean"
          },
          "scimToken": {
            "description": "SCIM token to authenticate requests",
            "type": "string"
          },
          "provisioningRoleManagementSelected": {
            "$ref": "#/components/schemas/ProvisioningRoleManagementEnum"
          },
          "provisioningRoleManagementCustomSelected": {
            "description": "All selected roles per app when Custom option is selected",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProvisioningRoleManagementCustomSelected"
            }
          }
        }
      },
      "SamlConfigurationSetting": {
        "required": [
          "enabled",
          "idpSsoUrl",
          "idpEntityId",
          "idpCertificateType",
          "nameIdFormat",
          "ssoRequired",
          "ssoRequiredForOwners",
          "ssoRequiredForVisitors",
          "jitpEnabled",
          "uid",
          "spEntityId",
          "spMetadataUrl",
          "spAcsUrl",
          "scimEnabled",
          "scimBaseUrl"
        ],
        "properties": {
          "enabled": {
            "description": "SAML is enabled",
            "type": "boolean"
          },
          "idpSsoUrl": {
            "description": "IdP SSO URL",
            "type": "string"
          },
          "idpEntityId": {
            "description": "IdP entity ID (issuer)",
            "type": "string"
          },
          "idpCertificateType": {
            "$ref": "#/components/schemas/SamlIdpCertificateType"
          },
          "idpCertificate": {
            "description": "IdP certificate payload",
            "type": "string"
          },
          "nameIdFormat": {
            "$ref": "#/components/schemas/SamlNameIdFormat"
          },
          "organizationSamlId": {
            "description": "Public identifier used in login dialog",
            "type": "string"
          },
          "ssoRequired": {
            "description": "SSO is required",
            "type": "boolean",
            "default": false
          },
          "ssoRequiredForOwners": {
            "description": "SSO is required for owners (applies when ssoRequired=true)",
            "type": "boolean",
            "default": false
          },
          "ssoRequiredForVisitors": {
            "description": "SSO is required for Visitors (applies when ssoRequired=true)",
            "type": "boolean",
            "default": false
          },
          "ssoRequiredDomains": {
            "description": "Set of domains (without @ symbol) which require SSO login. If none provided, then all domains require SSO login",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "jitpEnabled": {
            "description": "Create new identities when user logs in by SAML first time",
            "type": "boolean",
            "default": false
          },
          "idpCertificateFingerprint": {
            "description": "IdP certificate fingerprint",
            "type": "string"
          },
          "idpCertificateFingerprintAlg": {
            "$ref": "#/components/schemas/SamlIdpCertificateFingerprintAlg"
          },
          "uid": {
            "description": "UID of SAML configuration",
            "type": "string"
          },
          "spEntityId": {
            "description": "Service provider entity ID",
            "type": "string"
          },
          "spMetadataUrl": {
            "description": "Service provider metadata URL",
            "type": "string"
          },
          "spAcsUrl": {
            "description": "Service provider Assertion Consumer Service URL",
            "type": "string"
          },
          "scimEnabled": {
            "description": "SCIM is enabled",
            "type": "boolean"
          },
          "scimToken": {
            "description": "SCIM token to authenticate requests",
            "type": "string"
          },
          "scimBaseUrl": {
            "description": "SCIM endpoint URL",
            "type": "string"
          },
          "provisioningRoleManagementSelected": {
            "$ref": "#/components/schemas/ProvisioningRoleManagementEnum"
          },
          "provisioningRoleManagementOptions": {
            "description": "All options available for provisioning Role management",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProvisioningRoleManagementEnum"
            }
          },
          "provisioningRoleManagementCustomSelected": {
            "description": "All selected roles per app when Custom option is selected",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProvisioningRoleManagementCustomSelected"
            }
          },
          "provisioningRoleManagementCustomOptions": {
            "description": "All Application options available to be provisioned JITP / SCIM when Custom option is selected",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProvisioningRoleManagementCustomOption"
            }
          }
        }
      },
      "ProvisioningRoleManagementCustomSelected": {
        "description": "Selected roles for the app when Custom option is selected",
        "required": [
          "appUid",
          "role"
        ],
        "properties": {
          "appUid": {
            "description": "Application uid, e.g. platform, tms, strings",
            "type": "string"
          },
          "role": {
            "description": "Selected role for the application",
            "type": "string"
          }
        }
      },
      "ProvisioningRoleManagementCustomOption": {
        "description": "Application to be provisioned JITP / SCIM when Custom option is selected",
        "required": [
          "appUid",
          "order",
          "roleValues"
        ],
        "properties": {
          "appUid": {
            "description": "Application uid, e.g. platform, tms, strings",
            "type": "string"
          },
          "order": {
            "description": "Order of the application for ui consistency",
            "type": "integer"
          },
          "roleValues": {
            "description": "All available roles for the application, e.g. [dafault,linguist,none]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProvisioningRoleManagementEnum": {
        "description": "Provisioning Role management options",
        "type": "string",
        "enum": [
          "Default",
          "SCIM",
          "Custom"
        ]
      },
      "SamlIdpCertificateType": {
        "description": "IdP certificate type",
        "type": "string",
        "enum": [
          "CERTIFICATE",
          "FINGERPRINT"
        ]
      },
      "SamlNameIdFormat": {
        "description": "SAML NameID format",
        "type": "string",
        "enum": [
          "UNSPECIFIED",
          "EMAIL_ADDRESS"
        ]
      },
      "SamlIdpCertificateFingerprintAlg": {
        "description": "IdP certificate fingerprint's Algorithm",
        "type": "string",
        "enum": [
          "SHA256",
          "SHA1",
          "SHA384",
          "SHA512"
        ]
      },
      "InvitationEmailValidationRequest": {
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "Email to be validated",
            "type": "string"
          }
        }
      },
      "UpdatePassword": {
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "properties": {
          "currentPassword": {
            "description": "Current password to update",
            "type": "string"
          },
          "newPassword": {
            "description": "New password to use",
            "type": "string"
          }
        }
      },
      "UserLoginHistoryPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserLoginHistory"
                }
              }
            }
          }
        ]
      },
      "UserLoginHistory": {
        "description": "User login history record",
        "required": [
          "createdAt"
        ],
        "properties": {
          "createdAt": {
            "description": "Date and time of the record creation",
            "type": "string"
          },
          "ipAddress": {
            "description": "IP address used for the log in",
            "type": "string"
          },
          "userAgent": {
            "description": "User Agent used for the log in",
            "type": "string"
          }
        }
      },
      "UserApplicationStatus": {
        "description": "Status of the application",
        "type": "string",
        "enum": [
          "READY",
          "DISABLED",
          "PROVISIONING_RUNNING",
          "PROVISIONING_FAILED",
          "PROVISIONING_DISABLED",
          "AVAILABLE",
          "NOT_PROVISIONABLE"
        ]
      },
      "ProvisioningDisabledReasonCode": {
        "description": "Reason the provisioning cannot be started",
        "type": "string",
        "enum": [
          "EMAIL_USED",
          "INSUFFICIENT_RIGHTS",
          "MISSING_NAME",
          "MISSING_ORGANIZATION_NAME",
          "ALREADY_PROVISIONED",
          "PREREQUISITES_NOT_MET",
          "FIRST_OR_LAST_NAME_EMPTY",
          "WHITESPACE_IN_USERNAME"
        ]
      },
      "ProvisioningDisabledReason": {
        "description": "Additional details if provisioning cannot be started, set for state `PROVISIONING_DISABLED`",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ProvisioningDisabledReasonCode"
          },
          "username": {
            "description": "Username for EMAIL_USED",
            "type": "string"
          },
          "email": {
            "description": "Email for EMAIL_USED",
            "type": "string"
          }
        }
      },
      "UserApplication": {
        "required": [
          "info",
          "status"
        ],
        "properties": {
          "info": {
            "$ref": "#/components/schemas/UserApplicationInfo"
          },
          "status": {
            "$ref": "#/components/schemas/UserApplicationStatus"
          },
          "startTrial": {
            "description": "Provisioning this account will create trial account, set for state `AVAILABLE`",
            "type": "boolean"
          },
          "loginUrl": {
            "description": "Where to navigate the user to open the account, set for state `READY`",
            "type": "string"
          },
          "requestId": {
            "description": "Async provisioning request id, set for states `PROVISIONING_RUNNING` and `PROVISIONING_FAILED`",
            "type": "string"
          },
          "provisioningDisabledReason": {
            "$ref": "#/components/schemas/ProvisioningDisabledReason"
          },
          "enterpriseRequired": {
            "description": "Application is not enabled for non-enterprise plans, set for state `NOT_PROVISIONABLE`",
            "type": "boolean"
          }
        }
      },
      "UpdateUserInfo": {
        "properties": {
          "username": {
            "description": "Username of caller",
            "type": "string"
          },
          "email": {
            "description": "Email of caller",
            "type": "string"
          },
          "marketingConsent": {
            "description": "User's marketing consent. True by default",
            "type": "boolean"
          },
          "firstName": {
            "description": "First name of the user",
            "type": "string"
          },
          "lastName": {
            "description": "Last name of the user",
            "type": "string"
          },
          "userSettings": {
            "$ref": "#/components/schemas/UserSettingsInfo"
          },
          "lastOrganizationUid": {
            "description": "UID of last identity's organization",
            "type": "string"
          }
        }
      },
      "AcceptInvitation": {
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Invitation token received by email.",
            "type": "string"
          }
        }
      },
      "UserInOrganizationUpdate": {
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "$ref": "#/components/schemas/UserRole"
          }
        }
      },
      "UsersInOrganizationPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserInOrganization"
                }
              }
            }
          }
        ]
      },
      "UserInOrganization": {
        "required": [
          "uid",
          "enabled",
          "firstName",
          "lastName",
          "email",
          "username",
          "createdAt",
          "membershipType",
          "managed",
          "ssoEnforced",
          "supportedActions"
        ],
        "properties": {
          "uid": {
            "description": "Identity UID",
            "type": "string"
          },
          "enabled": {
            "description": "Identity is enabled",
            "type": "boolean"
          },
          "firstName": {
            "description": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "Last name",
            "type": "string"
          },
          "email": {
            "description": "Email address",
            "type": "string"
          },
          "username": {
            "description": "Identity login name",
            "type": "string"
          },
          "createdAt": {
            "description": "Creation time of the identity",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/OrganizationRole"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInOrganization"
            }
          },
          "membershipType": {
            "$ref": "#/components/schemas/MembershipType"
          },
          "managed": {
            "deprecated": true,
            "description": "Deprecated: use membershipType instead. Identity is organization-managed (SCIM/SAML)",
            "type": "boolean"
          },
          "ssoEnforced": {
            "description": "Identity is enforced to use SSO for logging in",
            "type": "boolean"
          },
          "supportedActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInOrganizationAction"
            }
          }
        }
      },
      "UserInOrganizationAction": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "REMOVE"
            ]
          },
          "enabled": {
            "type": "boolean"
          },
          "reason": {
            "type": "string",
            "description": "Reason, why the action is not available",
            "enum": [
              "CANNOT_DELETE_OWNER"
            ]
          }
        },
        "required": [
          "action",
          "enabled"
        ]
      },
      "UserRole": {
        "description": "Role of the user in the organization",
        "type": "string",
        "enum": [
          "OWNER",
          "ADMIN",
          "MEMBER"
        ]
      },
      "OrganizationRole": {
        "description": "Role of the user in the organization",
        "properties": {
          "current": {
            "$ref": "#/components/schemas/UserRole"
          },
          "available": {
            "description": "Available roles for the user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            }
          }
        }
      },
      "ApplicationInvitation": {
        "required": [
          "applicationUid",
          "role"
        ],
        "properties": {
          "applicationUid": {
            "description": "UID of application where user was invited",
            "type": "string"
          },
          "role": {
            "description": "Assigned role to invited user",
            "type": "string"
          }
        }
      },
      "UserInvitationCreate": {
        "required": [
          "email",
          "trackingId",
          "applications"
        ],
        "properties": {
          "email": {
            "description": "Email of invited user",
            "type": "string"
          },
          "trackingId": {
            "description": "Tracking ID of the invitation",
            "type": "string"
          },
          "uid": {
            "description": "Invited user UID for cross-product invites",
            "type": "string"
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationInvitation"
            }
          }
        }
      },
      "PendingInvitationsInOrganizationPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvitationInOrganization"
                }
              }
            }
          }
        ]
      },
      "CreateUserOrganization": {
        "description": "Organization parameters for creating organization by user",
        "required": [
          "name",
          "countryCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the organization"
          },
          "stateCode": {
            "type": "string",
            "description": "ISO 3166-2 state code, e.g. 'US-NY' for New York or 'CA-ON' for Ontario"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for organization users by default",
            "example": "Europe/Prague"
          },
          "size": {
            "type": "integer",
            "description": "Number of employees"
          },
          "zendeskId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the organization in Zendesk"
          },
          "excludedFromZendesk": {
            "type": "boolean",
            "description": "Organization is excluded from Zendesk synchronization"
          },
          "customerUid": {
            "type": "string",
            "description": "UID of the related customer"
          }
        }
      },
      "UserOrganizationCreated": {
        "description": "Response of the user create organization call",
        "required": [
          "uid",
          "name",
          "countryCode",
          "locale"
        ],
        "properties": {
          "uid": {
            "description": "Organization UID",
            "type": "string"
          },
          "name": {
            "description": "Organization Name",
            "type": "string"
          },
          "countryCode": {
            "description": "Country code of the organization",
            "type": "string"
          },
          "locale": {
            "description": "Locale for organization users by default",
            "type": "string",
            "example": "cs_CZ"
          }
        }
      },
      "CountryInfo": {
        "required": [
          "value",
          "label"
        ],
        "properties": {
          "value": {
            "description": "Two letter value that can be used as content of the country field, follows ISO-3166-2 standard",
            "type": "string"
          },
          "euCountryCode": {
            "description": "Two letter value assigned to EU countries (provided for EU countries only), follows ISO-3166-2 standard in most cases, see https://publications.europa.eu/code/pdf/370000en.htm",
            "type": "string"
          },
          "label": {
            "description": "Text to represent the country in UI",
            "type": "string"
          }
        }
      },
      "LocaleInfo": {
        "required": [
          "value",
          "label"
        ],
        "properties": {
          "value": {
            "description": "Value representing this locale API DTOs",
            "type": "string"
          },
          "label": {
            "description": "Name of the locale in the language of the locale",
            "type": "string"
          }
        }
      },
      "TimezoneInfo": {
        "required": [
          "value",
          "label",
          "offset",
          "name"
        ],
        "properties": {
          "value": {
            "description": "Value representing this timezone in API DTOs",
            "type": "string"
          },
          "label": {
            "description": "Text composed of offset and name",
            "type": "string"
          },
          "offset": {
            "description": "Offset of the timezone in format '(GMT+/-HH:MM)'",
            "type": "string"
          },
          "name": {
            "description": "City part of the regional timezone, whole timezone id for others",
            "type": "string"
          }
        }
      },
      "JobRoleInfo": {
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "description": "Value that can be used as content of the job role field",
            "type": "string"
          }
        }
      },
      "ConfigPropertyValue": {
        "description": "Config property value",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "description": "Name of the property",
            "type": "string"
          },
          "value": {
            "description": "Value of the property (string representation of the value)",
            "type": "string"
          }
        }
      },
      "UsernameCheck": {
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username to be checked"
          }
        }
      },
      "UsernameChecked": {
        "required": [
          "exists"
        ],
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "Username exists already (is not unique)"
          }
        }
      },
      "EmailVerification": {
        "required": [
          "verification_token"
        ],
        "properties": {
          "verification_token": {
            "description": "Unique user's verification token",
            "type": "string"
          }
        }
      },
      "InvitationCreate": {
        "required": [
          "applicationUid",
          "externalAccountId"
        ],
        "properties": {
          "applicationUid": {
            "type": "string",
            "description": "Application UID - requesting application"
          },
          "externalAccountId": {
            "type": "string",
            "description": "user account external ID - for account creation when invitation is accepted"
          }
        }
      },
      "Invitation": {
        "required": [
          "uid"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "invitation UID"
          }
        }
      },
      "InvitationAcceptRequest": {
        "description": "Data corresponding to the invitation to be accepted",
        "required": [
          "verification_token"
        ],
        "properties": {
          "verification_token": {
            "description": "Unique user's verification token",
            "type": "string"
          }
        }
      },
      "InvitationAcceptResponse": {
        "required": [
          "uid",
          "email",
          "identities",
          "approval_type",
          "sso",
          "organization_name",
          "trackingId",
          "orgUid"
        ],
        "description": "User details to be authenticated",
        "properties": {
          "uid": {
            "description": "invitation UID",
            "type": "string"
          },
          "email": {
            "description": "email of the invited user",
            "type": "string"
          },
          "identities": {
            "type": "array",
            "description": "A list of accounts available for the assignment",
            "items": {
              "$ref": "#/components/schemas/IdentityDetail"
            }
          },
          "approval_type": {
            "$ref": "#/components/schemas/InvitationApprovalType"
          },
          "sso": {
            "$ref": "#/components/schemas/InvitationSsoAvailability"
          },
          "organization_name": {
            "description": "Name of the organization",
            "type": "string"
          },
          "saml_id": {
            "description": "UID of the SAML configuration",
            "type": "string"
          },
          "trackingId": {
            "description": "Tracking ID of the invitation",
            "type": "string"
          },
          "orgUid": {
            "description": "UID of the organization",
            "type": "string"
          }
        }
      },
      "InvitationSsoAvailability": {
        "description": "SSO availability",
        "type": "string",
        "enum": [
          "NOT_AVAILABLE",
          "ENFORCED",
          "OPTIONAL"
        ]
      },
      "InvitationApprovalType": {
        "description": "The type of approval, defining what was request",
        "type": "string",
        "enum": [
          "NEW_ACCOUNT",
          "SINGLE_ACCOUNT",
          "MULTIPLE_ACCOUNTS"
        ]
      },
      "InvitationFinalizeRequest": {
        "description": "Data corresponding to the invitation to be finalized",
        "required": [
          "verification_token",
          "sessionUid",
          "identity"
        ],
        "properties": {
          "verification_token": {
            "description": "Unique user's invitation verification token",
            "type": "string"
          },
          "sessionUid": {
            "description": "UID of unverified session",
            "type": "string"
          },
          "identity": {
            "$ref": "#/components/schemas/IdentityFinalize"
          }
        }
      },
      "IdentityDetail": {
        "description": "An account available for the identity",
        "required": [
          "uid",
          "username",
          "requiresTwoFactorAuthorization"
        ],
        "properties": {
          "uid": {
            "description": "Identity UID",
            "type": "string"
          },
          "username": {
            "description": "Identity login name",
            "type": "string"
          },
          "requiresTwoFactorAuthorization": {
            "description": "Identity requires 2FA",
            "type": "boolean"
          }
        }
      },
      "IdentityFinalize": {
        "description": "Details of identity",
        "required": [
          "password",
          "locale"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "Signup identity UID of an existing user, null when finalizing for a new user"
          },
          "password": {
            "description": "Plain text password",
            "type": "string",
            "format": "password"
          },
          "firstName": {
            "type": "string",
            "description": "First Name of a new user, it is ignored when called for an existing user"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name of a new user, it is ignored when called for an existing user"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "userAgent": {
            "description": "User's user-agent",
            "type": "string"
          },
          "rememberMe": {
            "description": "Setup rememberMe token",
            "type": "boolean",
            "default": false
          },
          "twoFactorCode": {
            "description": "6 digits OTP",
            "type": "string"
          }
        }
      },
      "ApiKey": {
        "description": "API key definition",
        "required": [
          "uid",
          "name",
          "value",
          "createdAt"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier of the API key"
          },
          "name": {
            "type": "string",
            "description": "Name of the API key"
          },
          "value": {
            "type": "string",
            "description": "Value of the API key"
          },
          "createdAt": {
            "description": "Creation date of the API key",
            "type": "string"
          },
          "updatedAt": {
            "description": "Last updated date of the API key",
            "type": "string"
          },
          "expiresAt": {
            "description": "Expiry date of the API key in ISO 8601 format, no value provided means no expiration date",
            "type": "string"
          }
        }
      },
      "ManagementApiKey": {
        "description": "API key definition for management purposes",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiKey"
          }
        ],
        "required": [
          "uid",
          "type",
          "name",
          "value",
          "createdAt"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ApiKeyType"
          }
        }
      },
      "ApiKeyRequest": {
        "required": [
          "type",
          "name",
          "value"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ApiKeyType"
          },
          "name": {
            "description": "API key name",
            "type": "string"
          },
          "value": {
            "description": "API key value",
            "type": "string"
          },
          "expiresAt": {
            "description": "Expiration date of the API key in ISO 8601 format, no value provided means no expiration date",
            "type": "string"
          }
        }
      },
      "ApiKeyType": {
        "description": "Type of the API key",
        "type": "string",
        "enum": [
          "API_KEY"
        ]
      },
      "DataRetentionPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataRetention"
                }
              }
            }
          }
        ]
      },
      "DataRetention": {
        "description": "A data retention record",
        "required": [
          "organizationUid",
          "organizationName",
          "excluded",
          "deletionAt",
          "notificationAt",
          "state",
          "targetStates",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "organizationUid": {
            "description": "The related organization UID",
            "type": "string"
          },
          "organizationName": {
            "description": "The related organization name",
            "type": "string"
          },
          "excluded": {
            "description": "The flag to indicate if the organization is excluded from data retention",
            "type": "boolean"
          },
          "deletionAt": {
            "description": "The date when the organization will be deleted - ISO 8601 format",
            "type": "string"
          },
          "notificationAt": {
            "description": "The date when the organization will be notified about the deletion - ISO 8601 format",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/DataRetentionStateEnum"
          },
          "targetStates": {
            "description": "The related target states",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRetentionTargetState"
            }
          },
          "createdAt": {
            "description": "The date when the data retention record was created - ISO 8601 format",
            "type": "string"
          },
          "updatedAt": {
            "description": "The date when the data retention record was last updated - ISO 8601 format",
            "type": "string"
          }
        }
      },
      "DataRetentionScheduleRequest": {
        "description": "A data retention related request for organization",
        "required": [
          "organizationUid",
          "excluded",
          "skipNotification"
        ],
        "properties": {
          "organizationUid": {
            "description": "The related organization UID",
            "type": "string"
          },
          "excluded": {
            "description": "The flag to indicate if the organization is excluded from data retention",
            "type": "boolean"
          },
          "skipNotification": {
            "description": "The flag to indicate if the organization should be notified about the deletion",
            "type": "boolean"
          },
          "deletionAt": {
            "description": "The date when the organization will be deleted - when not provided, the default value will be used - ISO 8601 format",
            "type": "string"
          },
          "notificationAt": {
            "description": "The date when the organization will be notified about the deletion - when not provided, the default value will be used - ISO 8601 format",
            "type": "string"
          }
        }
      },
      "DataRetentionUpdateRequest": {
        "description": "A data retention related update request",
        "properties": {
          "excluded": {
            "description": "The flag to indicate if the organization is excluded from data retention",
            "type": "boolean"
          },
          "deletionAt": {
            "description": "The date when the organization will be deleted - ISO 8601 format",
            "type": "string"
          },
          "notificationAt": {
            "description": "The date when the organization will be notified about the deletion - ISO 8601 format",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/DataRetentionStateEnum"
          }
        }
      },
      "DataRetentionStateEnum": {
        "type": "string",
        "enum": [
          "SCHEDULED",
          "REMINDED",
          "READINESS_CHECK",
          "READY",
          "CHECK_FAILED",
          "EXECUTE",
          "FINISHED",
          "EXECUTION_FAILED",
          "MEMBERSHIPS_DELETION",
          "MEMBERSHIPS_DELETION_FAILED",
          "IDENTITIES_DELETION",
          "IDENTITIES_DELETION_FAILED",
          "ORGANIZATION_DELETION",
          "ORGANIZATION_DELETION_FAILED"
        ]
      },
      "DataRetentionTargetState": {
        "description": "A data retention target state",
        "required": [
          "uid",
          "createdAt",
          "updatedAt",
          "target",
          "state"
        ],
        "properties": {
          "uid": {
            "description": "The related target state UID",
            "type": "string"
          },
          "createdAt": {
            "description": "The date when the target state was created - ISO 8601 format",
            "type": "string"
          },
          "updatedAt": {
            "description": "The date when the target state was last updated - ISO 8601 format",
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/DataRetentionTarget"
          },
          "state": {
            "$ref": "#/components/schemas/DataRetentionTargetStateEnum"
          }
        }
      },
      "DataRetentionTargetStateUpdateRequest": {
        "description": "A data retention target state update request",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "$ref": "#/components/schemas/DataRetentionTargetStateEnum"
          },
          "message": {
            "description": "The log message",
            "type": "string"
          }
        }
      },
      "DataRetentionTargetStateEnum": {
        "type": "string",
        "enum": [
          "READINESS_CHECK",
          "READY",
          "CHECK_FAILED",
          "EXECUTE",
          "FINISHED",
          "EXECUTION_FAILED",
          "MEMBERSHIPS_DELETION",
          "MEMBERSHIPS_DELETION_FAILED",
          "IDENTITIES_DELETION",
          "IDENTITIES_DELETION_FAILED",
          "ORGANIZATION_DELETION",
          "ORGANIZATION_DELETION_FAILED"
        ]
      },
      "DataRetentionTarget": {
        "description": "A data retention target",
        "required": [
          "name",
          "description",
          "type"
        ],
        "properties": {
          "name": {
            "description": "The target name",
            "type": "string"
          },
          "description": {
            "description": "The target description",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DataRetentionTargetTypeEnum"
          }
        }
      },
      "DataRetentionTargetTypeEnum": {
        "type": "string",
        "enum": [
          "REGULAR",
          "MANUAL",
          "INTERNAL"
        ]
      },
      "DataRetentionTargetStateLogPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataRetentionTargetStateLog"
                }
              }
            }
          }
        ]
      },
      "DataRetentionTargetStateLog": {
        "description": "A data retention target state log",
        "required": [
          "createdAt",
          "message",
          "author"
        ],
        "properties": {
          "createdAt": {
            "description": "The date when the target state log was created - ISO 8601 format",
            "type": "string"
          },
          "message": {
            "description": "The log message",
            "type": "string"
          },
          "author": {
            "description": "The author of the log message",
            "type": "string"
          }
        }
      },
      "SubscriptionGroupPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubscriptionGroupsListItem"
                }
              }
            }
          }
        ]
      },
      "SubscriptionGroupsListItem": {
        "description": "Subscription group information for listing",
        "required": [
          "uid",
          "type",
          "description",
          "organizationCount",
          "usesMetrics"
        ],
        "properties": {
          "uid": {
            "description": "Subscription group UID",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriptionPricing"
          },
          "description": {
            "description": "Subscription group description",
            "type": "string"
          },
          "organizations": {
            "description": "Number of organizations in the group",
            "type": "integer"
          },
          "usesMetrics": {
            "description": "Whether the subscription group uses Metrics service with timeseries",
            "type": "boolean"
          }
        }
      },
      "ZendeskRequestCommon": {
        "required": [
          "applicationUid"
        ],
        "properties": {
          "applicationUid": {
            "description": "Desired application's UID the caller is interested in",
            "type": "string"
          },
          "organizationUid": {
            "description": "The caller can provide organization UID to be used for updates/requests. The UID can be in IDM or APP-ID&colon;ORG-APP-ID format",
            "type": "string"
          },
          "userFields": {
            "description": "Additional user fields to be passed to Zendesk (will override default values)",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "organizationFields": {
            "description": "Additional organization fields to be passed to Zendesk (will override default values)",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ZendeskUrlRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ZendeskRequestCommon"
          }
        ],
        "properties": {
          "returnTo": {
            "description": "If provided, this URL will be a part of the resulting URL in the return_to parameter",
            "type": "string"
          }
        }
      },
      "ZendeskCreateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ZendeskRequestCommon"
          }
        ],
        "required": [
          "subject",
          "comment",
          "customFields"
        ],
        "properties": {
          "subject": {
            "description": "Subject of the request for Zendesk",
            "type": "string"
          },
          "comment": {
            "description": "Comment that should be passed to Zendesk",
            "type": "string"
          },
          "customFields": {
            "description": "Additional fields to be passed to Zendesk with the request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZendeskRequestCustomField"
            }
          }
        }
      },
      "ZendeskRequestCustomField": {
        "required": [
          "id",
          "value"
        ],
        "properties": {
          "id": {
            "description": "ID of the custom field",
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "description": "Value of the custom field",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ZendeskCreateResponse": {
        "required": [
          "id",
          "requestUrl"
        ],
        "properties": {
          "id": {
            "description": "ID of the created request",
            "type": "integer",
            "format": "int64"
          },
          "requestUrl": {
            "description": "Full URL of the created request",
            "type": "string"
          }
        }
      },
      "ZendeskUrlResponse": {
        "required": [
          "url",
          "baseUrl",
          "token"
        ],
        "properties": {
          "url": {
            "description": "Zendesk URL with the token to login",
            "type": "string"
          },
          "baseUrl": {
            "description": "Zendesk URL instance with all necessary information except SSO token",
            "type": "string"
          },
          "token": {
            "description": "JWT token to be used for log in",
            "type": "string"
          }
        }
      },
      "OauthConfiguration": {
        "required": [
          "issuer",
          "authorization_endpoint",
          "token_endpoint",
          "jwks_uri",
          "response_types_supported",
          "subject_types_supported",
          "id_token_signing_alg_values_supported",
          "code_challenge_methods_supported"
        ],
        "properties": {
          "issuer": {
            "description": "Identifier of the issuer",
            "type": "string"
          },
          "authorization_endpoint": {
            "description": "URL of the authorization endpoint",
            "type": "string"
          },
          "token_endpoint": {
            "description": "URL of the token endpoint",
            "type": "string"
          },
          "jwks_uri": {
            "description": "URL of the JWK set endpoint",
            "type": "string"
          },
          "response_types_supported": {
            "description": "Response types that are supported by authorization endpoint",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject_types_supported": {
            "description": "Subject types that are supported",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id_token_signing_alg_values_supported": {
            "description": "Id token signature algorithms that are supported",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_endpoint_auth_methods_supported": {
            "description": "Authorization methods that are supported by token endpoint",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "code_challenge_methods_supported": {
            "description": "Which PKCE challenge methods are supported",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OauthJwkSet": {
        "required": [
          "keys"
        ],
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthJwk"
            }
          }
        }
      },
      "OauthJwk": {
        "required": [
          "kid",
          "kty",
          "use",
          "key_ops",
          "alg"
        ],
        "properties": {
          "kid": {
            "description": "UID of the auth key, matches the `kid` header in JWT tokens issued by IDM",
            "type": "string"
          },
          "alg": {
            "description": "Always `RS256`, we provide only keys for signature verification via asymmetric keys",
            "type": "string"
          },
          "use": {
            "description": "Always `sig`, we provide only keys for signature verification",
            "type": "string"
          },
          "key_ops": {
            "description": "Always `[\"verify\"]`, we provide only keys for signature verification",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "kty": {
            "description": "Always `RSA`, we provide only public RSA keys (RFC 7518 6.3)",
            "type": "string"
          },
          "n": {
            "description": "Modulus of the public RSA key",
            "type": "string"
          },
          "e": {
            "description": "Exponent of the public RSA key",
            "type": "string"
          }
        }
      },
      "OauthToken": {
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "properties": {
          "access_token": {
            "description": "Access token for oauth",
            "type": "string"
          },
          "token_type": {
            "description": "Token type",
            "type": "string"
          },
          "id_token": {
            "description": "OpenID token, JWT",
            "type": "string"
          },
          "expires_in": {
            "description": "Number of seconds the access token is valid",
            "type": "integer"
          },
          "refresh_token": {
            "description": "Refresh token if offline scope is requested and allowed for the application",
            "type": "string"
          }
        }
      },
      "PasswordCredentialsGrant": {
        "required": [
          "grant_type",
          "username",
          "password"
        ],
        "properties": {
          "grant_type": {
            "description": "Type of grant for access token",
            "type": "string"
          },
          "username": {
            "description": "The identity username.",
            "type": "string"
          },
          "password": {
            "description": "The identity password.",
            "type": "string"
          }
        }
      },
      "RefreshTokenGrant": {
        "required": [
          "grant_type",
          "refresh_token"
        ],
        "properties": {
          "grant_type": {
            "description": "Type of grant for refresh token - this grant type requires application authorization",
            "type": "string"
          },
          "refresh_token": {
            "description": "Refresh token provided by server in previous steps",
            "type": "string"
          },
          "client_id": {
            "description": "ID of the oauth client for authenticating the request",
            "type": "string"
          },
          "client_secret": {
            "description": "Secret code of the oauth client",
            "type": "string"
          },
          "scope": {
            "description": "Requested scope",
            "type": "string"
          }
        }
      },
      "AuthorizationCodeGrant": {
        "required": [
          "grant_type",
          "code",
          "redirect_uri",
          "client_id"
        ],
        "properties": {
          "grant_type": {
            "description": "Type of grant for access token",
            "type": "string"
          },
          "code": {
            "description": "Authorization code provided by server in previous steps",
            "type": "string"
          },
          "redirect_uri": {
            "description": "Redirect URI",
            "type": "string"
          },
          "client_id": {
            "description": "ID of the oauth client",
            "type": "string"
          },
          "client_secret": {
            "description": "Secret code of the oauth client",
            "type": "string"
          },
          "code_verifier": {
            "description": "Proof key for Code Exchange",
            "type": "string"
          }
        }
      },
      "OauthTokenRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PasswordCredentialsGrant"
          },
          {
            "$ref": "#/components/schemas/AuthorizationCodeGrant"
          },
          {
            "$ref": "#/components/schemas/RefreshTokenGrant"
          }
        ],
        "discriminator": {
          "propertyName": "grant_type",
          "mapping": {
            "password": "#/components/schemas/PasswordCredentialsGrant",
            "authorization_code": "#/components/schemas/AuthorizationCodeGrant"
          }
        }
      },
      "OauthTokenErrorType": {
        "description": "OAuth 2.0/OIDC 1.0 error codes",
        "type": "string",
        "enum": [
          "invalid_request",
          "invalid_client",
          "invalid_grant",
          "unauthorized_client",
          "unsupported_grant_type",
          "invalid_scope",
          "interaction_required"
        ]
      },
      "OauthTokenError": {
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/OauthTokenErrorType"
          }
        }
      },
      "PasswordRecovery": {
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "description": "Username of identity requesting for password recovery",
            "type": "string"
          }
        }
      },
      "PasswordReset": {
        "required": [
          "token",
          "newPassword"
        ],
        "properties": {
          "token": {
            "description": "Unique token from the email",
            "type": "string"
          },
          "newPassword": {
            "description": "Plain text new password",
            "type": "string"
          }
        }
      },
      "SignupData": {
        "required": [
          "locale",
          "identity"
        ],
        "properties": {
          "locale": {
            "type": "string",
            "description": "Identity's locale in ISO 639-1, ISO 3166-1 alpha-2 format",
            "example": "cs_CZ"
          },
          "identity": {
            "$ref": "#/components/schemas/SignupIdentity"
          },
          "sessionUid": {
            "description": "UID of the session",
            "type": "string"
          },
          "additionalParameters": {
            "description": "Additional parameters for the sign up invitation link",
            "type": "string"
          }
        }
      },
      "SignupIdentity": {
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Plain password"
          }
        }
      },
      "IdentitySignedUp": {
        "required": [
          "uid"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "UID of newly created identity"
          }
        }
      },
      "SignupDetails": {
        "required": [
          "identity",
          "organization"
        ],
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/IdentityDetails"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationDetails"
          }
        }
      },
      "OrganizationDetails": {
        "description": "Details of organization",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of organization"
          },
          "size": {
            "type": "integer",
            "description": "Number of employees"
          },
          "countryCode": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code"
          },
          "stateCode": {
            "type": "string",
            "description": "ISO 3166-2 state code, e.g. 'US-NY' for New York or 'CA-ON' for Ontario"
          },
          "locale": {
            "type": "string",
            "description": "Locale for organization users by default",
            "example": "cs_CZ"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for organization users by default",
            "example": "Europe/Prague"
          }
        }
      },
      "IdentityDetails": {
        "description": "Details of identity",
        "required": [
          "uid",
          "firstName",
          "lastName"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "description": "Signup identity UID"
          },
          "jobRole": {
            "$ref": "#/components/schemas/IdentityJobRole"
          },
          "firstName": {
            "type": "string",
            "description": "First Name"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name"
          },
          "marketingConsent": {
            "type": "boolean",
            "description": "User's marketing consent. True by default"
          }
        }
      },
      "SocialLoginStart": {
        "description": "Request to start social login",
        "required": [
          "provider",
          "flow"
        ],
        "properties": {
          "provider": {
            "description": "Social login provider",
            "type": "string"
          },
          "flow": {
            "$ref": "#/components/schemas/AuthenticationFlow"
          },
          "state": {
            "description": "Additional data associated with the flow",
            "type": "string"
          },
          "sessionUid": {
            "description": "Session UID to associate with the social login",
            "type": "string"
          }
        }
      },
      "SocialLoginRedirect": {
        "description": "Describes how to start the social login",
        "required": [
          "redirectUri"
        ],
        "properties": {
          "redirectUri": {
            "description": "Start social login by redirecting user to this URL",
            "type": "string"
          }
        }
      },
      "SocialLoginVerify": {
        "description": "Request to verify social login",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Security token identifying the social login",
            "type": "string"
          }
        }
      },
      "SocialLogin": {
        "description": "Data to present social login to user in form of uniform widget",
        "required": [
          "provider",
          "email"
        ],
        "properties": {
          "provider": {
            "description": "Social login provider",
            "type": "string"
          },
          "email": {
            "description": "Email associated with the social account",
            "type": "string"
          },
          "name": {
            "description": "Name of the social account",
            "type": "string"
          },
          "pictureUrl": {
            "description": "URL of the avatar image",
            "type": "string"
          }
        }
      },
      "VerifiedSocialLogin": {
        "description": "Description of successful social login",
        "required": [
          "login",
          "flow",
          "state",
          "socialIdExists",
          "emailExists"
        ],
        "properties": {
          "login": {
            "$ref": "#/components/schemas/SocialLogin"
          },
          "flow": {
            "$ref": "#/components/schemas/AuthenticationFlow"
          },
          "state": {
            "description": "Additional data associated with the flow",
            "type": "string"
          },
          "socialIdExists": {
            "description": "Social ID of the login is already associated with some identity",
            "type": "boolean"
          },
          "emailExists": {
            "description": "Email of the login is already associated with some identity",
            "type": "boolean"
          }
        }
      },
      "SocialSignupData": {
        "description": "Data for signup init via social login",
        "required": [
          "token",
          "locale",
          "sessionUid"
        ],
        "properties": {
          "token": {
            "description": "Token identifying social login",
            "type": "string"
          },
          "locale": {
            "description": "Locale of the new identity, ISO 639-1, ISO 3166-1 alpha-2 format",
            "type": "string",
            "example": "cs_CZ"
          },
          "sessionUid": {
            "description": "Session UID to associate with the social login",
            "type": "string"
          }
        }
      },
      "SamlCheckRequest": {
        "description": "Request details how to sign-in via SAML",
        "required": [
          "organizationSamlId"
        ],
        "properties": {
          "organizationSamlId": {
            "description": "Organization SAML Identifier for which the sing-up details are requested",
            "type": "string"
          },
          "state": {
            "description": "State to be associates with the SAML flow",
            "type": "string"
          },
          "flow": {
            "$ref": "#/components/schemas/AuthenticationFlow"
          }
        }
      },
      "SamlCheckResponse": {
        "description": "Details how to perform SAML sign-in",
        "required": [
          "startUrl"
        ],
        "properties": {
          "startUrl": {
            "description": "Redirect the UA to this URL to initiate the SAML sign-in",
            "type": "string"
          }
        }
      },
      "SsoBindingRequest": {
        "description": "Request for SSO binding the specified identity and the organization",
        "required": [
          "ssoToken"
        ],
        "properties": {
          "ssoToken": {
            "description": "SSO redirection token",
            "type": "string"
          }
        }
      },
      "SsoBindingResponse": {
        "description": "Response for SSO binding",
        "required": [
          "email",
          "username",
          "organizationUid",
          "organizationName",
          "organizationSamlId"
        ],
        "properties": {
          "email": {
            "description": "Bound user's email",
            "type": "string"
          },
          "username": {
            "description": "Bound user's username",
            "type": "string"
          },
          "organizationUid": {
            "description": "Bound organization's uid",
            "type": "string"
          },
          "organizationName": {
            "description": "Bound organization's name",
            "type": "string"
          },
          "organizationSamlId": {
            "description": "Organization SAML Identifier for the organization",
            "type": "string"
          }
        }
      },
      "VerifyCouponRequest": {
        "description": "Request to verify a discount coupon",
        "required": [
          "uid"
        ],
        "properties": {
          "uid": {
            "description": "Request UID",
            "type": "string"
          }
        }
      },
      "VerifyCouponResponse": {
        "description": "Response to the coupon verification",
        "required": [
          "couponDiscount"
        ],
        "properties": {
          "couponDiscount": {
            "description": "Discount amount",
            "type": "integer"
          }
        }
      },
      "PlanInformation": {
        "description": "Plan information",
        "required": [
          "displayName",
          "displayId"
        ],
        "properties": {
          "displayName": {
            "description": "Display name of the plan",
            "type": "string"
          },
          "displayId": {
            "description": "Display ID of the plan",
            "type": "string"
          }
        }
      },
      "PricingInformation": {
        "required": [
          "pricingType"
        ],
        "properties": {
          "pricingType": {
            "$ref": "#/components/schemas/SubscriptionPricing"
          },
          "trial": {
            "$ref": "#/components/schemas/TrialInformation"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionInformation"
          },
          "legacy": {
            "$ref": "#/components/schemas/LegacyInformation"
          },
          "entitlements": {
            "type": "array",
            "description": "List of entitlements - available only for SUITE and TRIAL pricing types",
            "items": {
              "$ref": "#/components/schemas/Entitlement"
            }
          },
          "plan": {
            "$ref": "#/components/schemas/PlanInformation"
          }
        }
      },
      "SubscriptionInformation": {
        "required": [
          "customerId",
          "businessEntityId",
          "subscriptionId",
          "termStart",
          "termEnd",
          "lastTerm",
          "cancelled"
        ],
        "properties": {
          "customerId": {
            "description": "Chargebee Customer ID",
            "type": "string"
          },
          "businessEntityId": {
            "description": "Chargebee Business Entity ID of the Customer",
            "type": "string"
          },
          "subscriptionId": {
            "description": "Chargebee Subscription ID",
            "type": "string"
          },
          "subscriptionEnd": {
            "description": "When the subscription ends",
            "type": "string"
          },
          "termStart": {
            "description": "Current billing term start",
            "type": "string"
          },
          "termEnd": {
            "description": "Current billing term end",
            "type": "string"
          },
          "lastTerm": {
            "description": "Current term is the last",
            "type": "boolean"
          },
          "cancelled": {
            "description": "Subscription is cancelled",
            "type": "boolean"
          },
          "cancelReason": {
            "$ref": "#/components/schemas/SubscriptionCancelReason"
          }
        }
      },
      "TrialInformation": {
        "required": [
          "expired",
          "start",
          "end"
        ],
        "properties": {
          "expired": {
            "description": "Trail expired",
            "type": "boolean"
          },
          "start": {
            "description": "When the trial started",
            "type": "string"
          },
          "end": {
            "description": "When the trial ends",
            "type": "string"
          }
        }
      },
      "LegacyInformation": {
        "required": [
          "location",
          "customerId"
        ],
        "properties": {
          "location": {
            "description": "Location of the customer",
            "type": "string"
          },
          "customerId": {
            "description": "Chargebee customer id",
            "type": "string"
          }
        }
      },
      "Entitlement": {
        "required": [
          "id",
          "numberValue",
          "stringValue",
          "booleanValue"
        ],
        "properties": {
          "id": {
            "description": "ID of the entitlement",
            "type": "string"
          },
          "numberValue": {
            "description": "Entitlement value as integer",
            "type": "integer",
            "format": "int64"
          },
          "stringValue": {
            "description": "Entitlement value as string",
            "type": "string"
          },
          "booleanValue": {
            "description": "Entitlement value as boolean",
            "type": "boolean"
          }
        }
      },
      "Indicator": {
        "properties": {
          "id": {
            "description": "Id of the indicator",
            "type": "string"
          },
          "metricId": {
            "description": "Id of the related metric",
            "type": "string"
          },
          "entitlementId": {
            "description": "Id of the source entitlement",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/IndicatorState"
          },
          "value": {
            "description": "Current value of the indicator",
            "type": "number",
            "format": "double"
          },
          "entitlementLimit": {
            "description": "Entitlement limit of the indicator",
            "type": "integer",
            "format": "int64"
          },
          "warningThreshold": {
            "description": "Value of the warning threshold, zero or negative value means no warning threshold",
            "type": "integer",
            "format": "int64"
          },
          "blockingThreshold": {
            "description": "Value of the blocking threshold, zero or negative value means no blocking threshold",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SuiteSubscriptionDetails": {
        "description": "Response to the get suite subscription call",
        "required": [
          "pricing",
          "state"
        ],
        "properties": {
          "pricing": {
            "$ref": "#/components/schemas/SubscriptionPricing"
          },
          "subscription": {
            "$ref": "#/components/schemas/SuiteSubscription"
          },
          "trial": {
            "$ref": "#/components/schemas/SuiteTrial"
          },
          "pendingAction": {
            "$ref": "#/components/schemas/PendingSubscriptionAction"
          }
        }
      },
      "SuiteSubscription": {
        "description": "Suite Subscription of the Organization",
        "required": [
          "plan",
          "products",
          "addons",
          "cancelled",
          "canBeCancelled",
          "pendingCancellation",
          "readonly",
          "lastTerm",
          "termStart"
        ],
        "properties": {
          "canBeCancelled": {
            "description": "Subscription can be cancelled and Cancel Subscription section is shown",
            "type": "boolean"
          },
          "cancelled": {
            "description": "Subscription is cancelled",
            "type": "boolean"
          },
          "pendingCancellation": {
            "description": "Subscription has pending cancellation",
            "type": "boolean"
          },
          "readonly": {
            "description": "Subscription is readonly - e.g. not possible to change the plan or subscription parameters",
            "type": "boolean"
          },
          "pendingPaymentsStatus": {
            "$ref": "#/components/schemas/PendingPaymentsStatus"
          },
          "lastTerm": {
            "description": "Current billing term is the last term",
            "type": "boolean"
          },
          "termStart": {
            "description": "When the current term started",
            "type": "string"
          },
          "subscriptionEnd": {
            "description": "When subscription ends",
            "type": "string"
          },
          "subscriptionDaysLeft": {
            "description": "Days left for the subscription",
            "type": "integer",
            "format": "int64"
          },
          "plan": {
            "$ref": "#/components/schemas/SuitePlan"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiteProduct"
            }
          },
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiteAddon"
            }
          }
        }
      },
      "SuiteTrial": {
        "description": "Suite Trial of the Organization",
        "required": [
          "plan",
          "expired",
          "start",
          "end",
          "products"
        ],
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/SuiteTrialPlan"
          },
          "expired": {
            "description": "Trial expired",
            "type": "boolean"
          },
          "start": {
            "description": "When the trial started",
            "type": "string"
          },
          "end": {
            "description": "When the trial ends",
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiteProduct"
            }
          }
        }
      },
      "SuiteTrialPlan": {
        "description": "Plan of the Suite Subscription",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Id of the trial plan",
            "type": "string"
          },
          "name": {
            "description": "Name of the trial plan",
            "type": "string"
          }
        }
      },
      "SuiteProduct": {
        "description": "Product entitled for Suite Subscription",
        "required": [
          "id",
          "name",
          "indicators"
        ],
        "properties": {
          "id": {
            "description": "Id of the product",
            "type": "string"
          },
          "name": {
            "description": "Name of the product",
            "type": "string"
          },
          "indicators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiteIndicator"
            }
          }
        }
      },
      "PendingPaymentsStatus": {
        "description": "Status of pending payments (unpaid invoices or unprocessed bank transfers)",
        "type": "string",
        "enum": [
          "NONE",
          "PENDING_PROCESSING",
          "PENDING_COLLECTION"
        ]
      },
      "SuiteAddon": {
        "description": "Addon entitled for Suite Subscription",
        "required": [
          "itemId"
        ],
        "properties": {
          "itemId": {
            "description": "Id of the item",
            "type": "string"
          },
          "documentationUrl": {
            "description": "URL to the addon documentation",
            "type": "string"
          }
        }
      },
      "SuiteIndicator": {
        "description": "Indicator of the Suite Product",
        "required": [
          "id",
          "name",
          "type",
          "value"
        ],
        "properties": {
          "id": {
            "description": "Id of the indicator",
            "type": "string"
          },
          "name": {
            "description": "Name of the indicator",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SuiteIndicatorType"
          },
          "value": {
            "description": "Current value of the indicator",
            "type": "integer",
            "format": "int64"
          },
          "percentage": {
            "description": "Current consumed percentage (0 - 100)",
            "type": "integer",
            "format": "int64"
          },
          "remaining": {
            "description": "Remaining value of the indicator (equals limit if consumption exceeded the limit, -1 for unlimited metrics)",
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "description": "Limit of the indicator, if not set then the indicator is unlimited",
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "$ref": "#/components/schemas/IndicatorState"
          }
        }
      },
      "SuiteIndicatorType": {
        "description": "Type of the Indicator of the Suite Product",
        "type": "string",
        "enum": [
          "USAGE",
          "SEATS"
        ]
      },
      "SuiteSubscriptionCatalogSettings": {
        "description": "Catalog settings for Suite Subscription",
        "properties": {
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuitePlanCategory"
            }
          }
        }
      },
      "CatalogPlan": {
        "description": "A catalog plan description",
        "required": [
          "id",
          "name",
          "billingPeriods",
          "price",
          "entitlements",
          "available",
          "showCapacities"
        ],
        "properties": {
          "id": {
            "description": "Id of plan",
            "type": "string"
          },
          "name": {
            "description": "Name of the plan",
            "type": "string"
          },
          "billingPeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionBillingPeriod"
            }
          },
          "price": {
            "$ref": "#/components/schemas/CatalogPlanPrice"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogPlanEntitlement"
            }
          },
          "available": {
            "description": "Plan is available for the current organization",
            "type": "boolean"
          },
          "contactSalesUrl": {
            "description": "URL for contacting sales button",
            "type": "string"
          },
          "learnMoreUrl": {
            "description": "URL to learn more about the plan",
            "type": "string"
          },
          "showCapacities": {
            "description": "If true, the plan provides capacity information for entitlements",
            "type": "boolean"
          }
        }
      },
      "CatalogPlanReference": {
        "description": "Reference to a plan",
        "required": [
          "id",
          "name",
          "needsContactingSales"
        ],
        "properties": {
          "id": {
            "description": "Id of plan",
            "type": "string"
          },
          "name": {
            "description": "Name of the plan",
            "type": "string"
          },
          "needsContactingSales": {
            "description": "Modifications of the plan require contacting sales",
            "type": "boolean"
          }
        }
      },
      "CatalogPlanPrice": {
        "description": "Price of the plan",
        "properties": {
          "perMonth": {
            "description": "Price per month",
            "type": "integer",
            "format": "int64"
          },
          "perYear": {
            "description": "Price per year",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CatalogPlanEntitlement": {
        "description": "Entitlement of the plan",
        "properties": {
          "productId": {
            "description": "Product ID",
            "type": "string"
          },
          "indicatorId": {
            "description": "Indicator ID",
            "type": "string"
          },
          "value": {
            "description": "Value of the entitlement",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CatalogPlanAddonCapacity": {
        "description": "Capacity of the addon",
        "properties": {
          "itemId": {
            "description": "Item ID",
            "type": "string"
          },
          "indicatorId": {
            "description": "Indicator ID",
            "type": "string"
          },
          "productId": {
            "description": "Product ID",
            "type": "string"
          },
          "lowerBound": {
            "description": "Lower bound of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "upperBound": {
            "description": "Upper bound of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "stepSize": {
            "description": "Step size of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "multiplier": {
            "description": "Multiplier of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "description": "Total capacity",
            "type": "integer",
            "format": "int64"
          },
          "lowerBoundPrice": {
            "$ref": "#/components/schemas/CatalogItemCapacityPrice"
          }
        }
      },
      "CatalogItemCapacityPrice": {
        "description": "Price of the addon capacity",
        "properties": {
          "amount": {
            "description": "Price amount",
            "type": "integer",
            "format": "int64"
          },
          "discount": {
            "description": "Discount amount",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ItemCapacityRequest": {
        "description": "Request to calculate the price for the given capacity",
        "required": [
          "currency",
          "currentValue"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "currentValue": {
            "description": "Current value of the capacity",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CatalogPlanAddonCapacityPrice": {
        "description": "Price of the addon capacity",
        "properties": {
          "total": {
            "description": "Total amount",
            "type": "integer",
            "format": "int64"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogItemCapacityPrice"
          }
        }
      },
      "CatalogPlanPlugin": {
        "description": "Plugin of the plan",
        "properties": {
          "itemId": {
            "description": "Plugin ID",
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogItemCapacityPrice"
          },
          "needsContactingSales": {
            "description": "Plugin requires contacting sales to purchase",
            "type": "boolean"
          },
          "categoryId": {
            "description": "Category ID",
            "type": "string"
          },
          "learnMoreUrl": {
            "description": "URL to learn more about the plugin",
            "type": "string"
          },
          "documentationUrl": {
            "description": "URL to the plugin documentation",
            "type": "string"
          },
          "availableForPlans": {
            "description": "Ordered list of plans the plugin is available for (lowest first)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogPlanReference"
            }
          }
        }
      },
      "CatalogPlanRequest": {
        "description": "Request for a plan purchase review/checkout",
        "required": [
          "billingPeriod",
          "currency",
          "billingDetails",
          "items"
        ],
        "properties": {
          "billingPeriod": {
            "$ref": "#/components/schemas/SubscriptionBillingPeriod"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "items": {
            "description": "Items to be requested for a plan review",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRequestItem"
            }
          }
        }
      },
      "CatalogRequestItem": {
        "description": "Item to be requested for a plan review",
        "required": [
          "value",
          "itemId"
        ],
        "properties": {
          "value": {
            "description": "Value of the item",
            "type": "integer",
            "format": "int64"
          },
          "itemId": {
            "description": "Item ID",
            "type": "string"
          }
        }
      },
      "CatalogReviewResponse": {
        "description": "Response of the purchase review",
        "properties": {
          "items": {
            "description": "Items of the plan review",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogPlanReviewResponseItem"
            }
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "totalExcludingTax": {
            "description": "Total price excluding tax",
            "type": "integer",
            "format": "int64"
          },
          "tax": {
            "$ref": "#/components/schemas/Tax"
          },
          "totalCharge": {
            "description": "Total charge including compensation",
            "type": "integer",
            "format": "int64"
          },
          "compensation": {
            "description": "Compensation in Chargebee credits that will be subtracted from the final charge",
            "type": "integer",
            "format": "int64"
          },
          "totalExcludingCompensation": {
            "description": "Total price excluding compensation - e.g. typically higher than the total charge",
            "type": "integer",
            "format": "int64"
          },
          "billingPeriod": {
            "$ref": "#/components/schemas/SubscriptionBillingPeriod"
          },
          "billingPeriodEndDate": {
            "description": "Billing period end date",
            "type": "integer",
            "format": "int64"
          },
          "billingPrice": {
            "description": "Billing price",
            "type": "integer",
            "format": "int64"
          },
          "changeNotification": {
            "description": "Notification about any changes that had to be done to the purchase request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewChangeNotification"
            }
          }
        }
      },
      "CatalogPlanReviewResponseItem": {
        "description": "Item of the plan review",
        "properties": {
          "purchasedQuantity": {
            "description": "Purchased quantity of the item",
            "type": "integer",
            "format": "int64"
          },
          "totalQuantity": {
            "description": "Total quantity of the item",
            "type": "integer",
            "format": "int64"
          },
          "indicatorId": {
            "description": "Indicator ID",
            "type": "string"
          },
          "indicatorName": {
            "description": "Indicator name from the 3rd party service",
            "type": "string"
          },
          "billingPeriod": {
            "$ref": "#/components/schemas/SubscriptionBillingPeriod"
          },
          "capacityType": {
            "$ref": "#/components/schemas/CapacityType"
          },
          "depletable": {
            "description": "Item is depletable",
            "type": "boolean"
          },
          "amount": {
            "description": "Price amount",
            "type": "integer",
            "format": "int64"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogPlanEntitlement"
            }
          },
          "purchased": {
            "description": "Item is purchased already",
            "type": "boolean"
          }
        }
      },
      "CapacityType": {
        "description": "Type of the capacity",
        "type": "string",
        "enum": [
          "RECURRING",
          "ONE_TIME",
          "PLUGIN",
          "PLAN"
        ]
      },
      "HostedPageUrlResponse": {
        "description": "Response of the checkout URL",
        "properties": {
          "url": {
            "description": "Checkout URL",
            "type": "string"
          }
        }
      },
      "SuiteProductConfiguration": {
        "description": "Configuration of the Suite Product with the current metrics values",
        "properties": {
          "indicatorId": {
            "description": "Indicator ID",
            "type": "string"
          },
          "currentValue": {
            "description": "Current value of the indicator",
            "type": "integer",
            "format": "int64"
          },
          "indicatorState": {
            "$ref": "#/components/schemas/IndicatorState"
          },
          "recommendedValue": {
            "description": "Recommended value of the indicator",
            "type": "integer",
            "format": "int64"
          },
          "topLimit": {
            "description": "Top limit of the indicator",
            "type": "integer",
            "format": "int64"
          },
          "daysRemaining": {
            "description": "Days remaining for the purchase",
            "type": "integer",
            "format": "int64"
          },
          "purchasableItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiteProductPurchasableItem"
            }
          }
        }
      },
      "SuiteProductPurchasableItem": {
        "description": "Purchasable item of the Suite Product",
        "properties": {
          "itemId": {
            "description": "Item ID",
            "type": "string"
          },
          "capacityType": {
            "$ref": "#/components/schemas/CapacityType"
          },
          "lowerBound": {
            "description": "Lower bound of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "upperBound": {
            "description": "Upper bound of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "multiplier": {
            "description": "Multiplier of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "stepSize": {
            "description": "Step size of the quantity",
            "type": "integer",
            "format": "int64"
          },
          "purchasable": {
            "description": "Item is purchasable",
            "type": "boolean"
          }
        }
      },
      "CatalogItemEstimationResponse": {
        "description": "Response of the item estimation",
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogPlanAddonCapacityPrice"
          }
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "billingPeriod": {
            "$ref": "#/components/schemas/SubscriptionBillingPeriod"
          },
          "billingTotal": {
            "description": "Billing total",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Tax": {
        "description": "Tax related information",
        "properties": {
          "rate": {
            "description": "Tax rate in percent",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Tax name",
            "type": "string"
          },
          "amount": {
            "description": "Tax amount",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SubscriptionActionState": {
        "description": "State of any pending subscription action",
        "type": "string",
        "enum": [
          "NONE",
          "PENDING",
          "FAILED"
        ]
      },
      "SubscriptionActionType": {
        "description": "Type of any pending subscription action",
        "type": "string",
        "enum": [
          "NONE",
          "CHECKOUT",
          "RETENTION"
        ]
      },
      "PendingSubscriptionAction": {
        "description": "Pending subscription action state/information",
        "required": [
          "state",
          "type"
        ],
        "properties": {
          "state": {
            "$ref": "#/components/schemas/SubscriptionActionState"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriptionActionType"
          }
        }
      },
      "ReviewChangeNotification": {
        "description": "Notification about any changes that had to be done to the purchase request",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "description": "Code of the notification",
            "type": "string"
          },
          "params": {
            "title": "Map of parameters provided with the notification",
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MetabaseEmbeddingUrl": {
        "description": "Metabase URL for embedding a dashboard, along with the date of the last update.",
        "required": [
          "dashboardUrl",
          "lastUpdated"
        ],
        "properties": {
          "dashboardUrl": {
            "description": "An url used to embed metabase dashboard.",
            "type": "string"
          },
          "lastUpdated": {
            "description": "Date and time of the last update, ISO-8601 format",
            "type": "string"
          }
        }
      },
      "GrantBifrostTokenRequest": {
        "required": [
          "applicationUid",
          "bifrostKey"
        ],
        "properties": {
          "applicationUid": {
            "description": "UID of the application to provide access to. E.g. 'tms' for TMS application.",
            "type": "string"
          },
          "bifrostKey": {
            "description": "Bifrost key, provided by the user, to authenticate the existing identity in organization.",
            "type": "string"
          }
        }
      },
      "GrantBifrostTokenResponse": {
        "required": [
          "accessToken",
          "expiresIn",
          "authType",
          "identityUid",
          "organizationUid"
        ],
        "properties": {
          "accessToken": {
            "description": "Access token to a specific account",
            "type": "string"
          },
          "expiresIn": {
            "description": "Number of seconds the token expires from now",
            "type": "integer"
          },
          "authType": {
            "description": "Which string to use in authorization header",
            "type": "string"
          },
          "identityUid": {
            "description": "UID of the identity",
            "type": "string"
          },
          "organizationUid": {
            "description": "UID of the organization",
            "type": "string"
          }
        }
      },
      "GrantAccessTokenRequest": {
        "required": [
          "applicationUid",
          "accountId"
        ],
        "properties": {
          "audienceId": {
            "description": "UID of the target application (use `__idm__` for IDM application, default: use application)",
            "type": "string"
          },
          "applicationUid": {
            "description": "UID of the account application (use `__idm__` for identity account)",
            "type": "string"
          },
          "accountId": {
            "description": "UID of the application or identity account, or identity UID",
            "type": "string"
          }
        }
      },
      "GrantAccessTokenResponse": {
        "required": [
          "accessToken",
          "expiresIn",
          "authType"
        ],
        "properties": {
          "accessToken": {
            "description": "Access token",
            "type": "string"
          },
          "expiresIn": {
            "description": "Number of seconds the token expires from now",
            "type": "integer"
          },
          "authType": {
            "description": "Which string to use in authorization header",
            "type": "string"
          }
        }
      },
      "GrantImpersonateTokenRequest": {
        "required": [
          "identityUid",
          "impersonatedBy"
        ],
        "properties": {
          "identityUid": {
            "description": "Identity to be impersonated",
            "type": "string"
          },
          "impersonatedBy": {
            "description": "Any identifier of the impersonating entity, for example email",
            "type": "string"
          }
        }
      },
      "GrantImpersonateTokenResponse": {
        "required": [
          "accessToken",
          "expiresIn"
        ],
        "properties": {
          "impersonateToken": {
            "description": "Impersonate token",
            "type": "string"
          },
          "expiresIn": {
            "description": "Number of seconds the token expires from now",
            "type": "integer"
          }
        }
      },
      "ValidateAccessTokenRequest": {
        "required": [
          "accessToken"
        ],
        "properties": {
          "accessToken": {
            "description": "User Access Token",
            "type": "string"
          }
        }
      },
      "ValidateAccessTokenResponse": {
        "required": [
          "expiresIn",
          "scope",
          "applicationUid",
          "accountId"
        ],
        "properties": {
          "expiresIn": {
            "description": "Number of seconds the token expires from now",
            "type": "integer"
          },
          "scope": {
            "description": "grants associated with the token",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "applicationUid": {
            "description": "UID of the application account",
            "type": "string"
          },
          "accountId": {
            "description": "UID of the account",
            "type": "string"
          }
        }
      },
      "TrackingEvent": {
        "required": [
          "format",
          "payload"
        ],
        "properties": {
          "format": {
            "description": "Supported tracking formats",
            "type": "string",
            "enum": [
              "MIXPANEL",
              "HUBSPOT"
            ]
          },
          "payload": {
            "description": "A format/tracking solution related payload",
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "FullIdentity": {
        "required": [
          "uid",
          "firstName",
          "lastName",
          "username",
          "email",
          "passwordHash"
        ],
        "properties": {
          "uid": {
            "description": "Identity UID",
            "type": "string"
          },
          "firstName": {
            "description": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "Last name",
            "type": "string"
          },
          "username": {
            "description": "Identity login name",
            "type": "string"
          },
          "email": {
            "description": "Email address",
            "type": "string"
          },
          "passwordHash": {
            "format": "password",
            "description": "Password hash",
            "type": "string"
          }
        }
      },
      "BifrostKeyHint": {
        "properties": {
          "hint": {
            "description": "bifrost key hint",
            "type": "string"
          }
        }
      },
      "BifrostKeyCreated": {
        "properties": {
          "bifrostKey": {
            "description": "bifrost key",
            "type": "string"
          },
          "bifrostKeyHint": {
            "$ref": "#/components/schemas/BifrostKeyHint"
          }
        }
      },
      "BifrostKeyInfo": {
        "properties": {
          "keyHint": {
            "description": "bifrost key hint",
            "type": "string"
          },
          "keyCreated": {
            "description": "bifrost key creation time",
            "type": "string"
          },
          "organizationUid": {
            "description": "organization UID",
            "type": "string"
          },
          "organizationName": {
            "description": "organization Name",
            "type": "string"
          }
        }
      },
      "CommonUserSettings": {
        "description": "Common user settings",
        "required": [
          "locale",
          "timeZone"
        ],
        "properties": {
          "locale": {
            "description": "Preferred locale of caller's identity",
            "type": "string"
          },
          "timeZone": {
            "description": "Preferred time zone of caller's identity",
            "type": "string"
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          }
        }
      },
      "CommonUserSettingsUpdate": {
        "description": "Update common settings",
        "properties": {
          "locale": {
            "description": "Preferred locale of caller's identity (if not set no update is performed)",
            "type": "string"
          },
          "timeZone": {
            "description": "Preferred time zone of caller's identity (if not set no update is performed)",
            "type": "string"
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          }
        }
      },
      "ApplicationUserSettings": {
        "description": "Application settings of the identity",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "Theme": {
        "description": "Theme mode preference",
        "type": "string",
        "enum": [
          "SYSTEM",
          "DARK",
          "LIGHT"
        ]
      },
      "UserSettings": {
        "description": "All user settings",
        "required": [
          "common"
        ],
        "properties": {
          "common": {
            "$ref": "#/components/schemas/CommonUserSettings"
          },
          "applications": {
            "description": "Application specific user settings",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ApplicationUserSettings"
            }
          }
        }
      },
      "LinkSocialAccount": {
        "description": "Parameters for link social account call",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "Social token representing successful social login",
            "type": "string"
          }
        }
      },
      "SocialAccount": {
        "description": "Description of social account",
        "required": [
          "login"
        ],
        "properties": {
          "login": {
            "$ref": "#/components/schemas/SocialLogin"
          }
        }
      },
      "IndicatorNotificationsSubscription": {
        "required": [
          "administration",
          "readonly",
          "trial",
          "daysRemaining",
          "subscriptionUrl",
          "learnMoreUrl"
        ],
        "properties": {
          "administration": {
            "type": "boolean",
            "description": "Defines the version of buttons based on IDM role"
          },
          "readonly": {
            "description": "Subscription is readonly - e.g. not possible to change the plan or subscription parameters",
            "type": "boolean"
          },
          "trial": {
            "description": "Indicates a trial period",
            "type": "boolean"
          },
          "daysRemaining": {
            "type": "integer",
            "format": "int64",
            "description": "Number of days remaining in the current billing cycle or till the end of subscription for non-renewing subscriptions"
          },
          "subscriptionUrl": {
            "type": "string",
            "description": "URL to the subscription management page"
          },
          "learnMoreUrl": {
            "type": "string",
            "description": "URL to Phrase documentation about the notification"
          }
        }
      },
      "IndicatorNotificationsProduct": {
        "required": [
          "id",
          "indicators"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID"
          },
          "indicators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndicatorNotificationsItem"
            }
          }
        }
      },
      "IndicatorNotificationsItem": {
        "required": [
          "id",
          "state",
          "currentValue",
          "limit",
          "percentage",
          "lowUnit"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Indicator name"
          },
          "state": {
            "$ref": "#/components/schemas/IndicatorState"
          },
          "currentValue": {
            "type": "integer",
            "format": "int64",
            "description": "Current value"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Defined limit"
          },
          "percentage": {
            "type": "integer",
            "format": "int64",
            "description": "Calculated percentage"
          },
          "displayStyle": {
            "$ref": "#/components/schemas/IndicatorDisplayStyle"
          }
        }
      },
      "SubscriptionStatusWidgetDisplayState": {
        "description": "What to display in the subscription-state widget",
        "type": "string",
        "enum": [
          "NONE",
          "TRIAL",
          "CANCELLED",
          "RETENTION"
        ]
      },
      "SubscriptionStatusWidgetTrial": {
        "required": [
          "daysRemaining",
          "expired",
          "endDate"
        ],
        "properties": {
          "daysRemaining": {
            "description": "How many days of the trial are remaining (inclusive)",
            "type": "integer",
            "format": "int64"
          },
          "expired": {
            "description": "Trial is expired",
            "type": "boolean"
          },
          "endDate": {
            "description": "Date when trial expires (iso time format)",
            "type": "string"
          }
        }
      },
      "SubscriptionStatusWidgetRetention": {
        "required": [
          "daysRemaining",
          "endDate"
        ],
        "properties": {
          "daysRemaining": {
            "description": "How many days are remaining before subscription is cancelled (inclusive)",
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "description": "Date when subscription is cancelled (iso time format)",
            "type": "string"
          }
        }
      },
      "SubscriptionStatusWidget": {
        "required": [
          "displayState"
        ],
        "properties": {
          "displayState": {
            "$ref": "#/components/schemas/SubscriptionStatusWidgetDisplayState"
          },
          "idmUrl": {
            "description": "URL of the page for managing the subscription (only if user has right to see the page)",
            "type": "string"
          },
          "trial": {
            "$ref": "#/components/schemas/SubscriptionStatusWidgetTrial"
          },
          "retention": {
            "$ref": "#/components/schemas/SubscriptionStatusWidgetRetention"
          }
        }
      },
      "IndicatorNotifications": {
        "required": [
          "subscription",
          "products"
        ],
        "properties": {
          "subscription": {
            "$ref": "#/components/schemas/IndicatorNotificationsSubscription"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndicatorNotificationsProduct"
            }
          }
        }
      },
      "IndicatorNotificationsTrackingEvent": {
        "required": [
          "eventType",
          "product",
          "metric",
          "state",
          "userProductRole"
        ],
        "properties": {
          "eventType": {
            "type": "string",
            "description": "Type of the event",
            "enum": [
              "DISPLAYED",
              "SUBSCRIPTION_UPDATE_CLICKED",
              "LEARN_MORE_CLICKED",
              "DISMISSED"
            ]
          },
          "product": {
            "type": "string",
            "description": "Name of the product that displays the indicator notification (e.g. TMS, Strings, ...)"
          },
          "metric": {
            "type": "string",
            "description": "Metric id related to the indicator notification"
          },
          "state": {
            "$ref": "#/components/schemas/IndicatorState"
          },
          "userProductRole": {
            "type": "string",
            "description": "User role in the product that displays the indicator notification"
          }
        }
      }
    },
    "responses": {
      "204": {
        "description": "Operation performed successfully, no content returned"
      },
      "302": {
        "description": "Redirect to a different URL"
      },
      "400": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "410": {
        "description": "Gone",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "422": {
        "description": "Validation of the input data failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}