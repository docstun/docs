---
swagger: "2.0"
info:
  description: "Welcome to Phrase's TMS API documentation. \n\n Please visit our [help\
    \ center](https://support.phrase.com/hc/en-us/sections/5709662083612) for more\
    \ information about the APIs. \n\n If you have any questions, please contact [Support](https://support.phrase.com/hc/requests/new).\
    \ \n\n Please, include the `User-Agent` header with the name of your application\
    \ or project. It might be a good idea to include some sort of contact information\
    \ as well, so that we can get in touch if necessary. Examples of excellent `User-Agent`\
    \ headers:\n > User-Agent: Example mobile app (example@phrase.com) <br/> User-Agent:\
    \ ACME Inc Java 1.8 Client (http://acmeinc.com/contact)"
  version: "Latest"
  title: "Phrase TMS API"
host: "cloud.memsource.com"
basePath: "/web"
tags:
- name: "Additional Workflow Step"
- name: "Analysis"
- name: "Async Request"
- name: "Authentication"
- name: "Bilingual File"
- name: "Business Unit"
- name: "Buyer"
- name: "Client"
- name: "Connector"
- name: "Conversations"
- name: "Cost Center"
- name: "Custom Fields"
- name: "Custom File Type"
- name: "Domain"
- name: "Due Date Scheme"
- name: "Email Template"
- name: "File"
- name: "Glossary"
- name: "Import settings"
- name: "Job"
- name: "Language AI"
- name: "Language Quality Assessment"
- name: "Machine Translation"
- name: "Machine Translation Settings"
- name: "Mapping"
- name: "Net Rate Scheme"
- name: "Notifications"
- name: "Price List"
- name: "Project"
- name: "Project Reference File"
- name: "Project Template"
- name: "Provider"
- name: "Quality Assurance"
- name: "Quote"
- name: "SCIM"
- name: "Segment"
- name: "Segmentation Rules"
- name: "Service"
- name: "Spell Check"
- name: "SubDomain"
- name: "Supported Languages"
- name: "Term Base"
- name: "Translation"
- name: "Translation Memory"
- name: "User"
- name: "Vendor"
- name: "Webhook"
- name: "Workflow Step"
- name: "Workflow changes"
- name: "XML Assistant"
schemes:
- "https"
paths:
  /api2/v1/additionalWorkflowSteps:
    get:
      tags:
      - "Additional Workflow Step"
      summary: "List additional workflow steps"
      description: ""
      operationId: "listAWFSteps"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        description: "Name of the additional workflow step to filter"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAdditionalWorkflowStepDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Additional Workflow Step"
      summary: "Create additional workflow step"
      description: ""
      operationId: "createAWFStep"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AdditionalWorkflowStepRequestDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/AdditionalWorkflowStepDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/additionalWorkflowSteps/{id}:
    delete:
      tags:
      - "Additional Workflow Step"
      summary: "Delete additional workflow step"
      description: ""
      operationId: "deleteAWFStep"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deleted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/bulk:
    delete:
      tags:
      - "Analysis"
      summary: "Delete analyses (batch)"
      description: ""
      operationId: "bulkDeleteAnalyses"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BulkDeleteAnalyseDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/byLanguages:
    post:
      tags:
      - "Analysis"
      summary: "Create analyses by languages"
      description: ""
      operationId: "createAnalysesForLangs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateAnalyseListAsyncDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncAnalyseListResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/byProviders:
    post:
      tags:
      - "Analysis"
      summary: "Create analyses by providers"
      description: ""
      operationId: "createAnalysesForProviders"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateAnalyseListAsyncDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncAnalyseListResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/recalculate:
    post:
      tags:
      - "Analysis"
      summary: "Recalculate analysis"
      description: ""
      operationId: "recalculate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AnalyseRecalculateRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnalyseRecalculateResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/{analyseUid}:
    delete:
      tags:
      - "Analysis"
      summary: "Delete analysis"
      description: ""
      operationId: "delete"
      parameters:
      - name: "analyseUid"
        in: "path"
        required: true
        type: "string"
      - name: "purge"
        in: "query"
        required: false
        type: "boolean"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/{analyseUid}/analyseLanguageParts/{analyseLanguagePartId}:
    get:
      tags:
      - "Analysis"
      summary: "Get analysis language part"
      description: "Returns analysis language pair"
      operationId: "getAnalyseLanguagePart"
      produces:
      - "application/json"
      parameters:
      - name: "analyseUid"
        in: "path"
        required: true
        type: "string"
      - name: "analyseLanguagePartId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnalyseLanguagePartDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/{analyseUid}/analyseLanguageParts/{analyseLanguagePartId}/jobs:
    get:
      tags:
      - "Analysis"
      summary: "List jobs of analyses"
      description: "Returns list of job's analyses"
      operationId: "listJobParts"
      produces:
      - "application/json"
      parameters:
      - name: "analyseUid"
        in: "path"
        required: true
        type: "string"
      - name: "analyseLanguagePartId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAnalyseJobDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/{analyseUid}/download:
    get:
      tags:
      - "Analysis"
      summary: "Download analysis"
      description: ""
      operationId: "downloadAnalyse"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "analyseUid"
        in: "path"
        required: true
        type: "string"
      - name: "format"
        in: "query"
        required: true
        type: "string"
        enum:
        - "CSV"
        - "CSV_EXTENDED"
        - "LOG"
        - "JSON"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/analyses/{analyseUid}/jobs/{jobUid}:
    get:
      tags:
      - "Analysis"
      summary: "Get jobs analysis"
      description: "Returns job's analyse"
      operationId: "getJobPartAnalyse"
      produces:
      - "application/json"
      parameters:
      - name: "analyseUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnalyseJobDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/async:
    get:
      tags:
      - "Async Request"
      summary: "List pending requests"
      description: "\nAPI call to return a list of pending asynchronous requests.\n\
        \nSome operations within Phrase TMS are performed\n[asynchronously](https://support.phrase.com/hc/en-us/articles/5784117234972-Phrase-TMS-Limits#api-limits-async-requests-0-2)\n\
        and their response only serves as an acknowledgement of receipt, not an actual\
        \ completion of such request.\nSince Phrase  imposes restrictions on the number\
        \ of pending asynchronous\nrequests within an organization, this API call\
        \ provides the means to check the number of such\npending requests.\n\nWhen\
        \ processing a large number of asynchronous operations, Phrase recommends\
        \ periodically checking this list of\npending requests in order to not receive\
        \ an error code during the actual processing of the requests.\n\n_Note: Only\
        \ actions triggered via the APIs are counted towards this limit, the same\
        \ type of operation carried out via the\nUI is not taken into account. This\
        \ means that even with 200 pending requests, users can still create jobs via\
        \ the UI._\n"
      operationId: "listPendingRequests"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Pending requests for organization instead of current user. Only\
          \ for ADMIN."
        required: false
        type: "boolean"
        default: false
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAsyncRequestDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/async/status:
    get:
      tags:
      - "Async Request"
      summary: "Get current limits"
      description: ""
      operationId: "getCurrentLimitStatus"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncRequestStatusDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/async/{asyncRequestId}:
    get:
      tags:
      - "Async Request"
      summary: "Get asynchronous request"
      description: "\nThis API call will return information about the specified\n\
        [asynchronous request](https://support.phrase.com/hc/en-us/articles/5709706916124-API-TMS-#asynchronous-apis-0-2).\n\
        \nApart from basic information about the asynchronous operation such as who\
        \ created it and for what action, the response\nwill contain a subset of [Get\
        \ project](#operation/getProject) information.\n\nThe response contains an\
        \ `asyncResponse` field which will remain `null` until the async request has\
        \ finished processing.\nIf any errors occurred during processing of the request,\
        \ this field will contain such errors or warnings.\n\n_Note_: It is important\
        \ to keep track of the number of pending asynchronous requests as these are\
        \ subject to [Phrase\nlimits](https://support.phrase.com/hc/en-us/articles/5784117234972-Phrase-TMS-Limits#api-limits-async-requests-0-2).\n"
      operationId: "getAsyncRequest"
      produces:
      - "application/json"
      parameters:
      - name: "asyncRequestId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncRequestDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/login:
    post:
      tags:
      - "Authentication"
      summary: "Login"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/loginOther:
    post:
      tags:
      - "Authentication"
      summary: "Login as another user"
      description: "Available only for admin"
      operationId: "loginOther"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginOtherDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/loginToSession:
    post:
      tags:
      - "Authentication"
      summary: "Login to session"
      description: ""
      operationId: "loginToSession"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginToSessionDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginToSessionResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/loginWithApple/code:
    post:
      tags:
      - "Authentication"
      summary: "Login with Apple with code"
      description: ""
      operationId: "loginByAppleWithCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginWithAppleDto"
      - name: "native"
        in: "query"
        description: "For sign in with code from native device"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/loginWithApple/refreshToken:
    post:
      tags:
      - "Authentication"
      summary: "Login with Apple refresh token"
      description: ""
      operationId: "loginByAppleWithRefreshToken"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginWithAppleDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/loginWithGoogle:
    post:
      tags:
      - "Authentication"
      summary: "Login with Google"
      description: ""
      operationId: "loginByGoogle"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginWithGoogleDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/logout:
    post:
      tags:
      - "Authentication"
      summary: "Logout"
      description: ""
      operationId: "logout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/refreshAppleToken:
    get:
      tags:
      - "Authentication"
      summary: "refresh apple token"
      description: ""
      operationId: "refreshAppleToken"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AppleTokenResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/auth/whoAmI:
    get:
      tags:
      - "Authentication"
      summary: "Who am I"
      description: ""
      operationId: "whoAmI"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginUserDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/bilingualFiles/compare:
    post:
      tags:
      - "Bilingual File"
      summary: "Compare bilingual file"
      description: "Compares bilingual file to job state. Returns list of compared\
        \ segments."
      operationId: "compareBilingualFile"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      - name: "workflowLevel"
        in: "query"
        required: false
        type: "integer"
        default: 1
        maximum: 15
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ComparedSegmentsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/bilingualFiles/convert:
    post:
      tags:
      - "Bilingual File"
      summary: "Convert bilingual file"
      description: ""
      operationId: "convertBilingualFile"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      - name: "from"
        in: "query"
        required: true
        type: "string"
        enum:
        - "MXLF"
        - "DOCX"
      - name: "to"
        in: "query"
        required: true
        type: "string"
        enum:
        - "MXLF"
        - "DOCX"
      responses:
        "200":
          description: "application/octet-stream"
          headers:
            Content-Disposition:
              type: "string"
              description: "Contains filename (UTF-8 encoded). \n\n `filename*=UTF-8''ExampleFileName.md`"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/bilingualFiles/preview:
    post:
      tags:
      - "Bilingual File"
      summary: "Download preview"
      description: "Supports mxliff format"
      operationId: "getPreviewFile"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/octet-stream"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      responses:
        "200":
          description: "application/octet-stream"
          headers:
            Content-Disposition:
              type: "string"
              description: "Contains filename (UTF-8 encoded). \n\n `filename*=UTF-8''ExampleFileName.md`"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/businessUnits:
    get:
      tags:
      - "Business Unit"
      summary: "List business units"
      description: ""
      operationId: "listBusinessUnits"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Unique name of the business unit"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        description: "Uid of user"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "DATE_CREATED"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoBusinessUnitDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Business Unit"
      summary: "Create business unit"
      description: ""
      operationId: "createBusinessUnit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BusinessUnitEditDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/BusinessUnitDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/businessUnits/{businessUnitUid}:
    get:
      tags:
      - "Business Unit"
      summary: "Get business unit"
      description: ""
      operationId: "getBusinessUnit"
      produces:
      - "application/json"
      parameters:
      - name: "businessUnitUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BusinessUnitDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Business Unit"
      summary: "Edit business unit"
      description: ""
      operationId: "updateBusinessUnit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "businessUnitUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BusinessUnitEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BusinessUnitDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Business Unit"
      summary: "Delete business unit"
      description: ""
      operationId: "deleteBusinessUnit"
      parameters:
      - name: "businessUnitUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/buyers:
    get:
      tags:
      - "Buyer"
      summary: "List buyers"
      description: ""
      operationId: "listBuyers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "DEFAULT_PROJECT_OWNER"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoBuyerDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/buyers/{buyerUid}:
    put:
      tags:
      - "Buyer"
      summary: "Edit buyer"
      description: ""
      operationId: "updateBuyer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "buyerUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BuyerEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BuyerDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/clients:
    get:
      tags:
      - "Client"
      summary: "List clients"
      description: ""
      operationId: "listClients"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Unique name of the Client"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        description: "Uid of user"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "DATE_CREATED"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoClientDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Client"
      summary: "Create client"
      description: ""
      operationId: "createClient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ClientEditDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ClientDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/clients/{clientUid}:
    get:
      tags:
      - "Client"
      summary: "Get client"
      description: ""
      operationId: "getClient"
      produces:
      - "application/json"
      parameters:
      - name: "clientUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClientDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Client"
      summary: "Edit client"
      description: ""
      operationId: "updateClient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clientUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ClientEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClientDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Client"
      summary: "Delete client"
      description: ""
      operationId: "deleteClient"
      parameters:
      - name: "clientUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/connectorAsyncTasks:
    get:
      tags:
      - "Connector"
      summary: "Get Connector async task states."
      description: ""
      operationId: "getConnectorAsyncTaskStates"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "query"
        description: "Filter by projectUid"
        required: true
        type: "string"
      - name: "taskType"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "DOWNLOAD"
          - "REIMPORT"
          - "REIMPORT_TARGET"
          - "UPLOAD"
        collectionFormat: "multi"
      - name: "taskProcessingType"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "APC"
          - "API"
          - "CJ"
          - "GUI"
          - "SUBMITTER_PORTAL"
        collectionFormat: "multi"
      - name: "dateCreatedFrom"
        in: "query"
        description: "Date range from, based on dateCreated"
        required: false
        type: "string"
      - name: "dateCreatedTo"
        in: "query"
        description: "Date range to, based on dateCreated"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 1000, default 50"
        required: false
        type: "integer"
        default: 100
        maximum: 1000
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConnectorAsyncTaskStatesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/connectors:
    get:
      tags:
      - "Connector"
      summary: "List connectors"
      description: ""
      operationId: "getConnectorList"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConnectorListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/connectors/{connectorId}:
    get:
      tags:
      - "Connector"
      summary: "Get a connector"
      description: ""
      operationId: "getConnector"
      produces:
      - "application/json"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConnectorDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/connectors/{connectorId}/folders:
    get:
      tags:
      - "Connector"
      summary: "List files in root"
      description: "List files in a root folder of the selected connector"
      operationId: "getRootFolder"
      produces:
      - "application/json"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      - name: "projectUid"
        in: "query"
        required: false
        type: "string"
      - name: "sourceLocale"
        in: "query"
        required: false
        type: "string"
      - name: "fileType"
        in: "query"
        required: false
        type: "string"
        default: "ALL"
        pattern: "ALL|FILES_ONLY|FOLDERS_ONLY"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        pattern: "NAME|SIZE|LAST_MODIFIED"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        default: "ASCENDING"
        pattern: "ASCENDING|DESCENDING"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/connectors/{connectorId}/folders/{folder}:
    get:
      tags:
      - "Connector"
      summary: "List files in a subfolder"
      description: "List files in a subfolder of the selected connector"
      operationId: "getFolder"
      produces:
      - "application/json"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"
      - name: "projectUid"
        in: "query"
        required: false
        type: "string"
      - name: "sourceLocale"
        in: "query"
        required: false
        type: "string"
      - name: "fileType"
        in: "query"
        required: false
        type: "string"
        default: "ALL"
        pattern: "ALL|FILES_ONLY|FOLDERS_ONLY"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        pattern: "NAME|SIZE|LAST_MODIFIED"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        default: "ASCENDING"
        pattern: "ASCENDING|DESCENDING"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Connector"
      summary: "Upload a file to a subfolder of the selected connector"
      description: "Upload a file to a subfolder of the selected connector"
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        enum:
        - "multipart/form-data"
      - name: "file"
        in: "formData"
        description: "Translated file to upload"
        required: true
        type: "file"
      - name: "sourceFileName"
        in: "formData"
        description: "Name or ID of the original file"
        required: false
        type: "string"
      - name: "subfolderName"
        in: "formData"
        description: "Optional subfolder to upload the file to"
        required: false
        type: "string"
      - name: "mimeType"
        in: "formData"
        description: "Mime type of the file to upload"
        required: false
        type: "string"
      - name: "commitMessage"
        in: "formData"
        description: "Commit message for upload to Git, etc."
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UploadResultDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/connectors/{connectorId}/folders/{folder}/files/{file}:
    get:
      tags:
      - "Connector"
      summary: "Download file"
      description: "Download a file from a subfolder of the selected connector"
      operationId: "getFileForConnector"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"
      - name: "file"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/InputStreamLength"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/costCenters:
    get:
      tags:
      - "Cost Center"
      summary: "List of cost centers"
      description: ""
      operationId: "listCostCenters"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        description: "Uid of user"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "DATE_CREATED"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCostCenterDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Cost Center"
      summary: "Create cost center"
      description: ""
      operationId: "createCostCenter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CostCenterEditDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/CostCenterDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/costCenters/{costCenterUid}:
    get:
      tags:
      - "Cost Center"
      summary: "Get cost center"
      description: ""
      operationId: "getCostCenter"
      produces:
      - "application/json"
      parameters:
      - name: "costCenterUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CostCenterDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Cost Center"
      summary: "Edit cost center"
      description: ""
      operationId: "updateCostCenter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "costCenterUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CostCenterEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CostCenterDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Cost Center"
      summary: "Delete cost center"
      description: ""
      operationId: "deleteCostCenter"
      parameters:
      - name: "costCenterUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/customFields:
    get:
      tags:
      - "Custom Fields"
      summary: "Lists custom fields"
      description: ""
      operationId: "getCustomFieldList"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        description: "Filter by custom field name"
        required: false
        type: "string"
      - name: "allowedEntities"
        in: "query"
        description: "Filter by custom field allowed entities"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "PROJECT"
          - "JOB"
        collectionFormat: "multi"
      - name: "types"
        in: "query"
        description: "Filter by custom field types"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "MULTI_SELECT"
          - "SINGLE_SELECT"
          - "STRING"
          - "NUMBER"
          - "URL"
          - "DATE"
        collectionFormat: "multi"
      - name: "createdBy"
        in: "query"
        description: "Filter by custom field creators UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "modifiedBy"
        in: "query"
        description: "Filter by custom field updaters UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "uids"
        in: "query"
        description: "Filter by custom field UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "required"
        in: "query"
        description: "Filter by custom field required parameter"
        required: false
        type: "boolean"
      - name: "sortField"
        in: "query"
        description: "Sort by this field"
        required: false
        type: "string"
        enum:
        - "NAME"
        - "CREATED"
        - "LAST_MODIFIED"
      - name: "sortTrend"
        in: "query"
        description: "Sort direction"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCustomFieldDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Custom Fields"
      summary: "Create custom field"
      description: ""
      operationId: "createCustomField"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateCustomFieldDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/CustomFieldDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/customFields/{fieldUid}:
    get:
      tags:
      - "Custom Fields"
      summary: "Get custom field"
      description: ""
      operationId: "getCustomField"
      produces:
      - "application/json"
      parameters:
      - name: "fieldUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Custom Fields"
      summary: "Edit custom field"
      description: ""
      operationId: "updateCustomField"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "fieldUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFieldDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Custom Fields"
      summary: "Delete custom field"
      description: ""
      operationId: "deleteCustomField"
      parameters:
      - name: "fieldUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/customFields/{fieldUid}/options:
    get:
      tags:
      - "Custom Fields"
      summary: "Lists options of custom field"
      description: ""
      operationId: "getCustomFieldOptionList"
      produces:
      - "application/json"
      parameters:
      - name: "fieldUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        description: "Filter by option name"
        required: false
        type: "string"
      - name: "sortField"
        in: "query"
        description: "Sort by this field"
        required: false
        type: "string"
        enum:
        - "NAME"
      - name: "sortTrend"
        in: "query"
        description: "Sort direction"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCustomFieldOptionDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/customFields/{fieldUid}/options/{optionUid}/deprecate:
    put:
      tags:
      - "Custom Fields"
      summary: "Deprecate custom field option"
      description: ""
      operationId: "deprecateCustomField"
      consumes:
      - "application/json"
      parameters:
      - name: "fieldUid"
        in: "path"
        required: true
        type: "string"
      - name: "optionUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CustomFieldDeprecateDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/customFileTypes:
    get:
      tags:
      - "Custom File Type"
      summary: "Get All Custom file type"
      description: ""
      operationId: "getAllCustomFileType"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCustomFileTypeDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Custom File Type"
      summary: "Create custom file type"
      description: ""
      operationId: "createCustomFileTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateCustomFileTypeDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/CustomFileTypeDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Custom File Type"
      summary: "Delete multiple Custom file type"
      description: ""
      operationId: "deleteBatchCustomFileType"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DeleteCustomFileTypeDto"
      responses:
        "204":
          description: "Deleted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/customFileTypes/find:
    get:
      tags:
      - "Custom File Type"
      summary: "Find custom file type"
      description: "If no matching custom file type is found it returns status 200\
        \ and empty body."
      operationId: "findCustomFileType"
      produces:
      - "application/json"
      parameters:
      - name: "fileName"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFileTypeDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/customFileTypes/{customFileTypeUid}:
    get:
      tags:
      - "Custom File Type"
      summary: "Get Custom file type"
      description: ""
      operationId: "getCustomFileType"
      produces:
      - "application/json"
      parameters:
      - name: "customFileTypeUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFileTypeDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Custom File Type"
      summary: "Update Custom file type"
      description: ""
      operationId: "updateCustomFileType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "customFileTypeUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFileTypeDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFileTypeDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Custom File Type"
      summary: "Delete Custom file type"
      description: ""
      operationId: "deleteCustomFileType"
      consumes:
      - "application/json"
      parameters:
      - name: "customFileTypeUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deleted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/domains:
    get:
      tags:
      - "Domain"
      summary: "List of domains"
      description: ""
      operationId: "listDomains"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        description: "Uid of user"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "DATE_CREATED"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoDomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Domain"
      summary: "Create domain"
      description: ""
      operationId: "createDomain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DomainEditDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/domains/{domainUid}:
    get:
      tags:
      - "Domain"
      summary: "Get domain"
      description: ""
      operationId: "getDomain"
      produces:
      - "application/json"
      parameters:
      - name: "domainUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Domain"
      summary: "Edit domain"
      description: ""
      operationId: "updateDomain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "domainUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DomainEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Domain"
      summary: "Delete domain"
      description: ""
      operationId: "deleteDomain"
      parameters:
      - name: "domainUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/dueDateSchemes:
    get:
      tags:
      - "Due Date Scheme"
      summary: "List due date schemes"
      description: ""
      operationId: "listDueDateSchemes"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sorting field"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
      - name: "order"
        in: "query"
        description: "Sorting order"
        required: false
        type: "string"
        default: "asc"
        enum:
        - "asc"
        - "desc"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DueDateSchemeListEntryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/emailTemplates:
    get:
      tags:
      - "Email Template"
      summary: "List email templates"
      description: ""
      operationId: "listOrgEmailTemplates"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoOrganizationEmailTemplateDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/emailTemplates/{templateUid}:
    get:
      tags:
      - "Email Template"
      summary: "Get email template"
      description: ""
      operationId: "getOrgEmailTemplate"
      produces:
      - "application/json"
      parameters:
      - name: "templateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrganizationEmailTemplateDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/files:
    get:
      tags:
      - "File"
      summary: "List files"
      description: ""
      operationId: "getFiles"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "types"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "createdBy"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "biggerThan"
        in: "query"
        description: "Size in bytes"
        required: false
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoUploadedFileDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "File"
      summary: "Upload file"
      description: "Accepts multipart/form-data, application/octet-stream or application/json."
      operationId: "createUrlFile"
      consumes:
      - "application/json"
      - "application/octet-stream"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "file"
        required: true
        schema:
          $ref: "#/definitions/RemoteUploadedFileDto"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?filename\\*=UTF-8''(.+)`"
        required: true
        type: "string"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/UploadedFileDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/files/{fileUid}:
    get:
      tags:
      - "File"
      summary: "Get file"
      description: "Get uploaded file as <b>octet-stream</b> or as <b>json</b> based\
        \ on 'Accept' header"
      operationId: "getFileJson"
      produces:
      - "application/json"
      parameters:
      - name: "fileUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UploadedFileDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "File"
      summary: "Delete file"
      description: ""
      operationId: "deletesFile"
      consumes:
      - "application/json"
      parameters:
      - name: "fileUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/glossaries:
    get:
      tags:
      - "Glossary"
      summary: "List glossaries"
      description: ""
      operationId: "listGlossaries"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "lang"
        in: "query"
        description: "Language of the glossary"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoGlossaryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Glossary"
      summary: "Create glossary"
      description: ""
      operationId: "createGlossary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GlossaryEditDto"
      responses:
        "200":
          description: "Created"
          schema:
            $ref: "#/definitions/GlossaryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/glossaries/{glossaryUid}:
    get:
      tags:
      - "Glossary"
      summary: "Get glossary"
      description: ""
      operationId: "getGlossary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "glossaryUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GlossaryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Glossary"
      summary: "Edit glossary"
      description: "Languages can only be added, their removal is not supported"
      operationId: "updateGlossary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "glossaryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GlossaryEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GlossaryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Glossary"
      summary: "Delete glossary"
      description: ""
      operationId: "deleteGlossary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "glossaryUid"
        in: "path"
        required: true
        type: "string"
      - name: "purge"
        in: "query"
        description: "purge=false - the Glossary can later be restored,\n        \
          \            'purge=true - the Glossary is completely deleted and cannot\
          \ be restored"
        required: false
        type: "boolean"
        default: false
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/glossaries/{glossaryUid}/activate:
    put:
      tags:
      - "Glossary"
      summary: "Activate/Deactivate glossary"
      description: ""
      operationId: "activateGlossary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "glossaryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GlossaryActivationDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GlossaryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/glossaries/{glossaryUid}/export:
    get:
      tags:
      - "Glossary"
      summary: "Export glossary"
      description: "\nThis API endpoint is still limited access, and only available\
        \ to customers on the Enterprise plans on request.\nPlease contact support\
        \ or your customer success manager if you are interested.\n"
      operationId: "exportGlossary"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "glossaryUid"
        in: "path"
        required: true
        type: "string"
      - name: "format"
        in: "query"
        required: false
        type: "string"
        default: "Tbx"
        enum:
        - "Tbx"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/glossaries/{glossaryUid}/upload:
    post:
      tags:
      - "Glossary"
      summary: "Upload glossary"
      description: "\nThis API endpoint is still limited access, and only available\
        \ to customers on the Enterprise plans on request.\nPlease contact support\
        \ or your customer success manager if you are interested.\n\nGlossaries can\
        \ be imported from XLS/XLSX and TBX file formats.\n"
      operationId: "uploadGlossary"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?filename\\*=UTF-8''(.+)`"
        required: true
        type: "string"
      - name: "glossaryUid"
        in: "path"
        required: true
        type: "string"
      - name: "strictLangMatching"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "updateTerms"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImportGlossaryResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/importSettings:
    get:
      tags:
      - "Import settings"
      summary: "List import settings"
      description: ""
      operationId: "listImportSettings"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoImportSettingsReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Import settings"
      summary: "Create import settings"
      description: "Pre-defined import settings is handy for [Create Job](#operation/createJob).\n\
        \                  See [supported file types](https://wiki.memsource.com/wiki/API_File_Type_List)"
      operationId: "createImportSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportSettingsCreateDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Import settings"
      summary: "Edit import settings"
      description: ""
      operationId: "editImportSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportSettingsEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/importSettings/default:
    get:
      tags:
      - "Import settings"
      summary: "Get organization's default import settings"
      description: ""
      operationId: "getImportSettingsDefault"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Import settings"
      summary: "Edit organization's default import settings"
      description: ""
      operationId: "editDefaultImportSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ImportSettingsEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/importSettings/{uid}:
    get:
      tags:
      - "Import settings"
      summary: "Get import settings"
      description: ""
      operationId: "getImportSettingsByUid"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Import settings"
      summary: "Delete import settings"
      description: ""
      operationId: "deleteImportSettings"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/conversations/find:
    post:
      tags:
      - "Conversations"
      summary: "Find all conversation"
      description: ""
      operationId: "findConversations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FindConversationsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConversationListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/conversations/searchByProject:
    post:
      tags:
      - "Conversations"
      summary: "Search conversation by project"
      description: "This endpoint is allowed only to PM and ADMIN roles."
      operationId: "searchByProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FindConversationsForProjectDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCommonConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobPartUid}/previewPackage/asset/{assetFileUid}:
    get:
      tags:
      - "Job"
      summary: "Get Job Preview Package assets."
      description: "URLs for this API are provided in html skeleton (preview) part\
        \ of mxliff."
      operationId: "getAsset"
      parameters:
      - name: "jobPartUid"
        in: "path"
        required: true
        type: "string"
      - name: "assetFileUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobUid}/conversations:
    get:
      tags:
      - "Conversations"
      summary: "List all conversations"
      description: ""
      operationId: "listAllConversations"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "includeDeleted"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "since"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConversationListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobUid}/conversations/lqas:
    get:
      tags:
      - "Conversations"
      summary: "List LQA conversations"
      description: ""
      operationId: "listLQAConversations"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "includeDeleted"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "since"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LQAConversationsListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobUid}/conversations/lqas/{conversationId}:
    get:
      tags:
      - "Conversations"
      summary: "Get LQA conversation"
      description: ""
      operationId: "getLQAConversation"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LQAConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Conversations"
      summary: "Delete LQA conversation"
      description: ""
      operationId: "deleteLQAConversation"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobUid}/conversations/lqas/{conversationId}/comments/{commentId}:
    delete:
      tags:
      - "Conversations"
      summary: "Delete LQA comment"
      description: ""
      operationId: "deleteLQAComment"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - name: "commentId"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobUid}/conversations/plains:
    get:
      tags:
      - "Conversations"
      summary: "List plain conversations"
      description: ""
      operationId: "listPlainConversations"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "includeDeleted"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "since"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlainConversationsListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobUid}/conversations/plains/{conversationId}:
    get:
      tags:
      - "Conversations"
      summary: "Get plain conversation"
      description: ""
      operationId: "getPlainConversation"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PlainConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Conversations"
      summary: "Edit plain conversation"
      description: ""
      operationId: "updatePlainConversation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditPlainConversationDto"
      responses:
        "202":
          description: "Updated"
          schema:
            $ref: "#/definitions/PlainConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Conversations"
      summary: "Delete plain conversation"
      description: ""
      operationId: "deletePlainConversation"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/jobs/{jobUid}/conversations/plains/{conversationId}/comments/{commentId}:
    delete:
      tags:
      - "Conversations"
      summary: "Delete plain comment"
      description: ""
      operationId: "deletePlainComment"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - name: "commentId"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/languages:
    get:
      tags:
      - "Supported Languages"
      summary: "List supported languages"
      description: ""
      operationId: "listOfLanguages"
      produces:
      - "application/json"
      parameters:
      - name: "active"
        in: "query"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LanguageListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments:
    post:
      tags:
      - "Language Quality Assessment"
      summary: "Get multiple LQA Assessments"
      description: "Returns Assessment results for given jobs.\nIf any given job is\
        \ not from LQA workflow step, result from successive workflow steps may be\
        \ returned"
      operationId: "getAssessments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AssessmentRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AssessmentDetailsDto"
        "400":
          description: "if all jobs don't have the same project and workflow step"
        "415":
          description: "Unsupported media type"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Language Quality Assessment"
      summary: "Start multiple LQA Assessments"
      description: "Starts LQA assessments for the given job parts.\n            \
        \        If any of them have the assessment already started or finished, they\
        \ are left unchanged."
      operationId: "startAssessments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AssessmentRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AssessmentDetailsDto"
        "400":
          description: "if all jobs don't have the same project and workflow step"
        "415":
          description: "Unsupported media type"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Language Quality Assessment"
      summary: "Discard multiple ongoing LQA Assessments"
      description: ""
      operationId: "discardOngoingAssessments"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AssessmentRequestDto"
      responses:
        "204":
          description: "Discarded"
        "400":
          description: "if all jobs don't have the same project and workflow step"
        "415":
          description: "Unsupported media type"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/reports:
    get:
      tags:
      - "Language Quality Assessment"
      summary: "Download LQA Assessment XLSX reports"
      description: "Returns a single xlsx report or ZIP archive with multiple reports.\n\
        If any given jobPart is not from LQA workflow step, reports from successive\
        \ workflow steps may be returned\nIf none were found returns 404 error, otherwise\
        \ returns those that were found."
      operationId: "downloadLqaReports"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "jobParts"
        in: "query"
        description: "Comma separated list of JobPart UIDs, between 1 and 100 UIDs "
        required: true
        type: "string"
        maxLength: 2147483647
        minLength: 1
      responses:
        "200":
          description: "application/octet-stream"
        "400":
          description: "Invalid request"
        "404":
          description: "No reports found"
        "415":
          description: "Unsupported media type"
        "500":
          description: "Internal server error"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/reports/emails:
    post:
      tags:
      - "Language Quality Assessment"
      summary: "Send email(s) with LQA reports"
      description: ""
      operationId: "sendLqaReportEmail"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LqaReportEmailRequestDto"
      responses:
        "201":
          description: "Emails created"
        "404":
          description: "No reports found to be sent"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/reports/link:
    get:
      tags:
      - "Language Quality Assessment"
      summary: "Get sharable link of LQA reports"
      description: ""
      operationId: "getLqaReportLink"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobParts"
        in: "query"
        description: "Comma separated list of JobPart UIDs"
        required: true
        type: "string"
        maxLength: 2147483647
        minLength: 1
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LqaReportLinkDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/reports/recipients:
    get:
      tags:
      - "Language Quality Assessment"
      summary: "Get recipients of email with LQA reports"
      description: ""
      operationId: "getLqaReportRecipients"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "jobParts"
        in: "query"
        description: "Comma separated list of JobPart UIDs"
        required: true
        type: "string"
        maxLength: 2147483647
        minLength: 1
      - name: "nameOrEmail"
        in: "query"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoLqaReportRecipientDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/results:
    post:
      tags:
      - "Language Quality Assessment"
      summary: "Get LQA Assessment results"
      description: ""
      operationId: "getAssessmentResults"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AssessmentRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AssessmentResultDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/scorings:
    put:
      tags:
      - "Language Quality Assessment"
      summary: "Finish multiple LQA Assessments"
      description: "Finishing LQA Assessments will calculate scores"
      operationId: "finishAssessments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FinishAssessmentsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AssessmentResultsDto"
        "400":
          description: "if all jobs don't have the same project and workflow step"
        "415":
          description: "Unsupported media type"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Language Quality Assessment"
      summary: "Discard multiple finished LQA Assessment results"
      description: ""
      operationId: "discardAssessmentResults"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AssessmentRequestDto"
      responses:
        "204":
          description: "Discarded"
        "400":
          description: "if all jobs don't have the same project and workflow step"
        "415":
          description: "Unsupported media type"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/{jobUid}:
    get:
      tags:
      - "Language Quality Assessment"
      summary: "Get LQA Assessment"
      description: "Returns Assessment status and the results.\nIf given job is not\
        \ from LQA workflow step, result from successive workflow steps may be returned"
      operationId: "getAssessment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AssessmentDetailDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Language Quality Assessment"
      summary: "Start LQA Assessment"
      description: "Starts LQA assessment for the given job part.\n              \
        \      If the assessment has already been started or finished, it's discarded\
        \ and started fresh."
      operationId: "startNewAssessment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AssessmentBasicDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Language Quality Assessment"
      summary: "Discard ongoing LQA Assessment"
      description: ""
      operationId: "discardOngoingAssessment"
      consumes:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Discarded"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/assessments/{jobUid}/scorings:
    put:
      tags:
      - "Language Quality Assessment"
      summary: "Finish LQA Assessment"
      description: "Finishing LQA Assessment will calculate score"
      operationId: "finishAssessment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FinishAssessmentDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScoringResultDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/profiles:
    get:
      tags:
      - "Quality Assurance"
      summary: "GET list LQA profiles"
      description: ""
      operationId: "getLqaProfiles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name of LQA profiles, it is used for filter the list by name"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        description: "It is used for filter the list by who created the profile"
        required: false
        type: "string"
      - name: "dateCreated"
        in: "query"
        description: "It is used for filter the list by date created"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 20"
        required: false
        type: "integer"
        default: 20
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NAME"
          - "CREATED_BY"
          - "DATE_CREATED"
        collectionFormat: "multi"
      - name: "order"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ASC"
          - "DESC"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoLqaProfileReferenceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Quality Assurance"
      summary: "Create LQA profile"
      description: ""
      operationId: "createLqaProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateLqaProfileDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/LqaProfileDetailDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/profiles/authors:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get list of LQA profile authors"
      description: ""
      operationId: "getLqaProfileAuthors"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/profiles/defaultValues:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get LQA profile default values"
      description: ""
      operationId: "getLqaProfileDefaultValues"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LqaProfileDetailDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/profiles/{profileUid}:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get LQA profile details"
      description: ""
      operationId: "getLqaProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "profileUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LqaProfileDetailDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Quality Assurance"
      summary: "Update LQA profile"
      description: ""
      operationId: "updateLqaProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "profileUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateLqaProfileDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LqaProfileDetailDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Quality Assurance"
      summary: "Delete LQA profile"
      description: ""
      operationId: "deleteLqaProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "profileUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deleted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/profiles/{profileUid}/default:
    post:
      tags:
      - "Quality Assurance"
      summary: "Make LQA profile default"
      description: ""
      operationId: "makeDefault"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "profileUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LqaProfileReferenceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/lqa/profiles/{profileUid}/duplicate:
    post:
      tags:
      - "Quality Assurance"
      summary: "Duplicate LQA profile"
      description: ""
      operationId: "duplicateProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "profileUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LqaProfileReferenceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/machineTranslateSettings:
    get:
      tags:
      - "Machine Translation Settings"
      summary: "List machine translate settings"
      description: ""
      operationId: "getList"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        description: "Sorting field"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "asc"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoMachineTranslateSettingsPbmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/machineTranslateSettings/thirdPartyEngines:
    get:
      tags:
      - "Machine Translation Settings"
      summary: "List third party machine translate settings"
      description: ""
      operationId: "getThirdPartyEnginesList"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 100, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 100
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        description: "Sorting field"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "asc"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoMachineTranslateSettingsPbmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/machineTranslateSettings/types:
    get:
      tags:
      - "Machine Translation Settings"
      summary: "Get machine translate settings types"
      description: ""
      operationId: "getMTTypes"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TypesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/machineTranslateSettings/{mtsUid}:
    get:
      tags:
      - "Machine Translation Settings"
      summary: "Get machine translate settings"
      description: ""
      operationId: "getMTSettings"
      produces:
      - "application/json"
      parameters:
      - name: "mtsUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MachineTranslateSettingsPbmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/machineTranslateSettings/{mtsUid}/status:
    get:
      tags:
      - "Machine Translation Settings"
      summary: "Get status of machine translate engine"
      description: ""
      operationId: "getStatus"
      produces:
      - "application/json"
      parameters:
      - name: "mtsUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MachineTranslateStatusDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/machineTranslations/{mtSettingsUid}/translate:
    post:
      tags:
      - "Machine Translation"
      summary: "Translate with MT"
      description: ""
      operationId: "machineTranslation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "mtSettingsUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationRequestExtendedDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MachineTranslateResponse"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/mappings/tasks/{id}:
    get:
      tags:
      - "Mapping"
      summary: "Returns mapping for taskId (mxliff)"
      description: ""
      operationId: "getMappingForTask"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "workflowLevel"
        in: "query"
        required: false
        type: "integer"
        default: 1
        maximum: 15
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TaskMappingDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/memsourceTranslateProfiles:
    get:
      tags:
      - "Language AI"
      summary: "List of Language AI profiles"
      description: ""
      operationId: "listMemsourceTranslateProfile"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Sort by"
        required: false
        type: "string"
        default: "name"
        enum:
        - "name"
        - "dateCreated"
        - "createdBy"
        - "projects"
      - name: "order"
        in: "query"
        description: "desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 10"
        required: false
        type: "integer"
        default: 10
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "includeProjects"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoMemsourceTranslateProfileDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/netRateSchemes:
    get:
      tags:
      - "Net Rate Scheme"
      summary: "List net rate schemes"
      description: ""
      operationId: "getDiscountSchemes"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: false
        type: "string"
      - name: "isDefault"
        in: "query"
        description: "Filter for default attribute"
        required: false
        type: "boolean"
      - name: "createdInLastHours"
        in: "query"
        description: "Filter for those created within given hours"
        required: false
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoNetRateSchemeReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Net Rate Scheme"
      summary: "Create net rate scheme"
      description: ""
      operationId: "createDiscountScheme"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DiscountSchemeCreateDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/NetRateScheme"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/netRateSchemes/{netRateSchemeUid}:
    get:
      tags:
      - "Net Rate Scheme"
      summary: "Get net rate scheme"
      description: ""
      operationId: "getDiscountScheme"
      produces:
      - "application/json"
      parameters:
      - name: "netRateSchemeUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetRateScheme"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Net Rate Scheme"
      summary: "Edit net rate scheme"
      description: ""
      operationId: "updateDiscountScheme"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NetRateSchemeEdit"
      - name: "netRateSchemeUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetRateScheme"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Net Rate Scheme"
      summary: "Delete net rate scheme"
      description: ""
      operationId: "deleteDiscountScheme"
      produces:
      - "application/json"
      parameters:
      - name: "netRateSchemeUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/netRateSchemes/{netRateSchemeUid}/clone:
    post:
      tags:
      - "Net Rate Scheme"
      summary: "Clone net rate scheme"
      description: ""
      operationId: "cloneDiscountScheme"
      produces:
      - "application/json"
      parameters:
      - name: "netRateSchemeUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetRateScheme"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/netRateSchemes/{netRateSchemeUid}/workflowStepNetSchemes:
    get:
      tags:
      - "Net Rate Scheme"
      summary: "List schemes for workflow step"
      description: ""
      operationId: "getDiscountSchemeWorkflowSteps"
      produces:
      - "application/json"
      parameters:
      - name: "netRateSchemeUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoNetRateSchemeWorkflowStepReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/netRateSchemes/{netRateSchemeUid}/workflowStepNetSchemes/{netRateSchemeWorkflowStepId}:
    get:
      tags:
      - "Net Rate Scheme"
      summary: "Get scheme for workflow step"
      description: ""
      operationId: "getDiscountSchemeWorkflowStep"
      produces:
      - "application/json"
      parameters:
      - name: "netRateSchemeUid"
        in: "path"
        required: true
        type: "string"
      - name: "netRateSchemeWorkflowStepId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetRateSchemeWorkflowStep"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Net Rate Scheme"
      summary: "Edit scheme for workflow step"
      description: ""
      operationId: "editDiscountSchemeWorkflowStep"
      produces:
      - "application/json"
      parameters:
      - name: "netRateSchemeUid"
        in: "path"
        required: true
        type: "string"
      - name: "netRateSchemeWorkflowStepId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NetRateSchemeWorkflowStepEdit"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/NetRateSchemeWorkflowStep"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/notifications:
    get:
      tags:
      - "Notifications"
      summary: "List notifications"
      description: ""
      operationId: "listNotificationsForUser"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 20"
        required: false
        type: "integer"
        default: 20
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "category"
        in: "query"
        description: "Filtered by notification category"
        required: false
        type: "string"
        enum:
        - "SEEN"
        - "UNSEEN"
      - name: "createdBeforeDate"
        in: "query"
        description: "Filtered by create date time in ISO 8601 UTC format"
        required: false
        type: "string"
        x-example: "2024-05-25T10:15:30.00Z"
      - name: "createdAfterDate"
        in: "query"
        description: "Filtered by create date time in ISO 8601 UTC format"
        required: false
        type: "string"
        x-example: "2024-05-21T10:15:30.00Z"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageWithResponseTsDtoNotificationDto"
  /api2/v1/priceLists:
    get:
      tags:
      - "Price List"
      summary: "List price lists"
      description: ""
      operationId: "getListOfPriceList"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        description: "Filter for name"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoTranslationPriceListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Price List"
      summary: "Create price list"
      description: ""
      operationId: "createPriceList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPriceListCreateDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/TranslationPriceListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}:
    get:
      tags:
      - "Price List"
      summary: "Get price list"
      description: ""
      operationId: "getPriceList"
      produces:
      - "application/json"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TranslationPriceListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Price List"
      summary: "Update price list"
      description: ""
      operationId: "updatePriceList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPriceListCreateDto"
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TranslationPriceListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Price List"
      summary: "Delete price list"
      description: ""
      operationId: "deletePriceList"
      consumes:
      - "application/json"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}/clone:
    post:
      tags:
      - "Price List"
      summary: "Clone price list"
      description: ""
      operationId: "clonePriceList"
      produces:
      - "application/json"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TranslationPriceListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}/export:
    get:
      tags:
      - "Price List"
      summary: "Export translation price list"
      description: ""
      operationId: "exportPriceList"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}/import:
    post:
      tags:
      - "Price List"
      summary: "Import translation price list"
      description: ""
      operationId: "importPriceList"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        enum:
        - "multipart/form-data"
      - name: "file"
        in: "formData"
        description: "XLSX file to upload"
        required: true
        type: "file"
      responses:
        "200":
          description: "Import successful"
          schema:
            $ref: "#/definitions/PriceListForImport"
        "400":
          description: "Invalid file or no valid rows imported"
        "415":
          description: "Unsupported media type"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}/priceSets:
    get:
      tags:
      - "Price List"
      summary: "List price sets"
      description: ""
      operationId: "getPricesWithWorkflowSteps"
      produces:
      - "application/json"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sourceLanguages"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "targetLanguages"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoTranslationPriceSetDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Price List"
      summary: "Add language pairs"
      description: ""
      operationId: "createLanguagePair"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPriceSetCreateDto"
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/TranslationPriceSetListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Price List"
      summary: "Remove language pairs"
      description: ""
      operationId: "deleteLanguagePairs"
      consumes:
      - "application/json"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPriceSetBulkDeleteDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}/priceSets/minimumPrices:
    post:
      tags:
      - "Price List"
      summary: "Edit minimum prices"
      description: ""
      operationId: "setMinimumPriceForSet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPriceSetBulkMinimumPricesDto"
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TranslationPriceListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}/priceSets/prices:
    post:
      tags:
      - "Price List"
      summary: "Edit prices"
      description: "If object contains only price, all languages and workflow steps\
        \ will be updated"
      operationId: "setPrices"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPriceSetBulkPricesDto"
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TranslationPriceListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/priceLists/{priceListUid}/priceSets/{sourceLanguage}/{targetLanguage}:
    delete:
      tags:
      - "Price List"
      summary: "Remove language pair"
      description: ""
      operationId: "deleteLanguagePair"
      consumes:
      - "application/json"
      parameters:
      - name: "priceListUid"
        in: "path"
        required: true
        type: "string"
      - name: "sourceLanguage"
        in: "path"
        required: true
        type: "string"
      - name: "targetLanguage"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates:
    get:
      tags:
      - "Project Template"
      summary: "List project templates"
      description: "\nAPI call to list [project templates](https://support.phrase.com/hc/en-us/articles/5709647439772-Project-Templates-TMS-).\n\
        \nUse the query parameters below to refine your search criteria for project\
        \ templates:\n\n- **name** - The full project template name or a portion of\
        \ it. For example, using `name=GUI` or `name=02`\nwill locate project templates\
        \ named `GUI02`.\n- **clientId** - The client's ID within the system, not\
        \ interchangeable with its UID.\n- **clientName** - The complete or partial\
        \ name of the client. For instance, using `clientName=GUI` or `clientName=02`\n\
        will find project templates associated with the client `GUI02`.\n- **ownerUid**\
        \ - The user UID who owns the project template within the system, interchangeable\
        \ with its ID.\n- **domainName** - The complete or partial name of the domain.\
        \ Using `domainName=GUI` or `domainName=02` will find\nproject templates associated\
        \ with the domain `GUI02`.\n- **subDomainName** - The complete or partial\
        \ name of the subdomain. For instance, using `subDomainName=GUI` or\n`subDomainName=02`\
        \ will locate project templates linked to the subdomain `GUI02`.\n- **costCenterId**\
        \ - The cost center's ID within the system, not interchangeable with its UID.\n\
        - **costCenterName** - The complete or partial name of the cost center. For\
        \ example, using `costCenterName=GUI` or\n`costCenterName=02` will find project\
        \ templates associated with the cost center `GUI02`.\n- **businessUnitName**\
        \ - The complete or partial name of the business unit. For instance, using\
        \ `businessUnitName=GUI`\nor `businessUnitName=02` will locate project templates\
        \ linked to the business unit `GUI02`.\n- **sort** - Determines if the resulting\
        \ list of project templates should be sorted by their names or the date they\n\
        were created. This field supports either `dateCreated` or `templateName` as\
        \ values.\n- **direction** - Indicates the sorting order for the resulting\
        \ list by using either `asc` (ascending) or `desc`\n(descending) values.\n\
        - **pageNumber** - Indicates the desired page number (zero-based) to retrieve.\
        \ The total number of pages is returned in\nthe `totalPages` field within\
        \ each response.\n- **pageSize** - Indicates the page size, affecting the\
        \ `totalPages` retrieved in each response and potentially\nimpacting the number\
        \ of iterations needed to obtain all project templates.\n"
      operationId: "getProjectTemplates"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "clientId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "clientName"
        in: "query"
        required: false
        type: "string"
      - name: "ownerUid"
        in: "query"
        required: false
        type: "string"
      - name: "createdByUid"
        in: "query"
        required: false
        type: "string"
      - name: "domainName"
        in: "query"
        required: false
        type: "string"
      - name: "subDomainName"
        in: "query"
        required: false
        type: "string"
      - name: "costCenterId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "costCenterName"
        in: "query"
        required: false
        type: "string"
      - name: "businessUnitName"
        in: "query"
        required: false
        type: "string"
      - name: "sourceLangs"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "targetLangs"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "createdInLastHours"
        in: "query"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "dateCreated"
        enum:
        - "templateName"
        - "dateCreated"
        - "clientName"
        - "businessUnitName"
        - "domainName"
        - "subdomainName"
        - "createdBy"
        - "owner"
        - "sourceLang"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        default: "desc"
        pattern: "asc|desc"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoProjectTemplateReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Project Template"
      summary: "Create project template"
      description: ""
      operationId: "createProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProjectTemplateCreateActionDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ProjectTemplate"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}:
    get:
      tags:
      - "Project Template"
      summary: "Get project template"
      description: "Note: importSettings in response is deprecated and will be always\
        \ null"
      operationId: "getProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectTemplate"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Edit project template"
      description: ""
      operationId: "editProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProjectTemplateEditDto"
      responses:
        "200":
          description: "Edited"
          schema:
            $ref: "#/definitions/ProjectTemplate"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Project Template"
      summary: "Delete project template"
      description: ""
      operationId: "deleteProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/accessSettings:
    get:
      tags:
      - "Project Template"
      summary: "Get project template access and security settings"
      description: ""
      operationId: "getProjectTemplateAccessSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectSecuritySettingsDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Edit project template access and security settings"
      description: ""
      operationId: "editProjectTemplateAccessSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditProjectSecuritySettingsDtoV2"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectSecuritySettingsDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/analyseSettings:
    get:
      tags:
      - "Project Template"
      summary: "Get analyse settings"
      description: ""
      operationId: "getAnalyseSettingsForProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AbstractAnalyseSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Edit analyse settings"
      description: ""
      operationId: "updateAnalyseSettingsForProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditAnalyseSettingsDto"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AbstractAnalyseSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/customFields:
    get:
      tags:
      - "Project Template"
      summary: "Get custom fields of project template (page)"
      description: ""
      operationId: "getCustomFieldsPageOfProjectTemplate"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 20"
        required: false
        type: "integer"
        default: 20
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "createdBy"
        in: "query"
        description: "Filter by webhook creators UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "modifiedBy"
        in: "query"
        description: "Filter by webhook updaters UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "sortField"
        in: "query"
        description: "Sort by this field"
        required: false
        type: "string"
        enum:
        - "CREATED"
        - "LAST_MODIFIED"
      - name: "sortTrend"
        in: "query"
        description: "Sort direction"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Project Template"
      summary: "Create custom field instances"
      description: ""
      operationId: "createCustomFieldsOnProjectTemplate"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateCustomFieldInstancesDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstancesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Edit custom fields of the project template (batch)"
      description: ""
      operationId: "editCustomFieldsOnProjectTemplate"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFieldInstancesDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstancesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/customFields/{fieldInstanceUid}:
    get:
      tags:
      - "Project Template"
      summary: "Get custom field of project template"
      description: ""
      operationId: "getCustomFieldOfProjectTemplate"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - name: "fieldInstanceUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Edit custom field of project template"
      description: ""
      operationId: "editCustomFieldOnProjectTemplate"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - name: "fieldInstanceUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFieldInstanceDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Project Template"
      summary: "Delete custom field of project template"
      description: ""
      operationId: "deleteCustomFieldOfProjectTemplate"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - name: "fieldInstanceUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/importSettings:
    get:
      tags:
      - "Project Template"
      summary: "Get import settings"
      description: ""
      operationId: "getImportSettingsForProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Edit project template import settings"
      description: ""
      operationId: "editProjectTemplateImportSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FileImportSettingsCreateDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/mtSettings:
    get:
      tags:
      - "Project Template"
      summary: "Get project template machine translate settings"
      description: ""
      operationId: "getMachineTranslateSettingsForProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MTSettingsPerLanguageListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/qaSettings:
    get:
      tags:
      - "Project Template"
      summary: "Get quality assurance settings"
      description: ""
      operationId: "getProjectTemplateQASettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          examples:
            application/json:
              checks:
              - type: "VOID"
                name: "emptyTarget"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "endPunctuation"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "inconsistentTranslation"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "inconsistentFormatting"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "newerAtLowerLevel"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "missingNumber"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "repeatedWords"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "multipleSpaces"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "leadingAndTrailingSpaces"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "inconsistentTagContent"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "emptyTagContent"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "joinMarksInconsistency"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "emptyPairTags"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "nestedTags"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "malformed"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "nonConformingTerms"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "ignoreNotApprovedTerms"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "forbiddenTerms"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "spellCheck"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "segmentNotConfirmed"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "unresolvedComment"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "unresolvedComment"
                ignorable: true
                enabled: true
              - type: "NUMBER"
                name: "absoluteTargetLength"
                ignorable: true
                enabled: true
                value: 0
              - type: "NUMBER"
                name: "relativeTargetLength"
                ignorable: true
                enabled: true
                value: 0
              - type: "NUMBER"
                name: "targetLength"
                ignorable: true
                enabled: true
                value: 0
              - type: "NUMBER"
                name: "targetLengthPercent"
                ignorable: true
                enabled: true
                value: 0
              - type: "VOID"
                name: "targetLengthPerSegment"
                ignorable: true
                enabled: true
              - type: "STRING"
                name: "forbiddenStringsEnabled"
                ignorable: true
                enabled: true
                value: "string"
              - type: "VOID"
                name: "excludeLockedSegments"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "strictJobStatus"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "targetSourceIdentical"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "ignoreInAllWorkflowSteps"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "unmodifiedFuzzyTranslation"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "unmodifiedFuzzyTranslationTM"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "unmodifiedFuzzyTranslationMTNT"
                ignorable: true
                enabled: true
              - type: "VOID"
                name: "extraNumbers"
                ignorable: true
                enabled: true
              - type: "MORAVIA"
                name: "extraNumbers"
                ignorable: true
                enabled: true
                profile: "string"
              - type: "REGEX"
                name: "regexp"
                rules:
                  description: "string"
                  sourceRegexp: "string"
                  targetRegexp: "string"
                  id: "string"
                  ignorable: true
                  instant: true
          schema:
            $ref: "#/definitions/QASettingsDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Edit quality assurance settings"
      description: ""
      operationId: "setProjectTemplateQASettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditQASettingsDtoV2"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QASettingsDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/termBases:
    get:
      tags:
      - "Project Template"
      - "Term Base"
      summary: "Get term bases"
      description: ""
      operationId: "getProjectTemplateTermBases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectTemplateTermBaseListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      - "Term Base"
      summary: "Edit term bases in project template"
      description: ""
      operationId: "setProjectTemplateTermBases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SetProjectTemplateTermBaseDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectTemplateTermBaseListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projectTemplates/{projectTemplateUid}/transMemories/relevant:
    get:
      tags:
      - "Project Template"
      - "Translation Memory"
      summary: "List project template relevant translation memories"
      description: ""
      operationId: "relevantTransMemoriesForProjectTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "domainName"
        in: "query"
        required: false
        type: "string"
      - name: "clientName"
        in: "query"
        required: false
        type: "string"
      - name: "subDomainName"
        in: "query"
        required: false
        type: "string"
      - name: "targetLangs"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "strictLangMatching"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoTransMemoryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects:
    get:
      tags:
      - "Project"
      summary: "List projects"
      description: "\nAPI call to retrieve a paginated list of projects. Contains\
        \ a subset of information contained in\n[Get project](#operation/getProject)\
        \ API call.\n\nUtilize the query parameters below to refine the search criteria:\n\
        \n- **name** - The full project name or a portion of it. For instance, using\
        \ `name=GUI` or `name=02` will find projects\nnamed `GUI02`.\n- **clientId**\
        \ - The client's ID within the system, not interchangeable with its UID.\n\
        - **clientName** - The complete or partial name of the client. For example,\
        \ using `clientName=GUI` or `clientName=02`\nwill find projects associated\
        \ with the client `GUI02`.\n- **businessUnitId** - The business unit's ID\
        \ within the system, not interchangeable with its UID.\n- **businessUnitName**\
        \ - The complete or partial name of the business unit. For instance, using\
        \ `businessUnitName=GUI`\nor `businessUnitName=02` will find projects linked\
        \ to the business unit `GUI02`.\n- **statuses** - A list of project statuses.\
        \ When adding multiple statuses, include each as a dedicated query\nparameter,\
        \ e.g., `statuses=ASSIGNED&statuses=COMPLETED`.\n- **domainId** - The domain's\
        \ ID within the system, not interchangeable with its UID.\n- **domainName**\
        \ - The complete or partial name of the domain. Using `domainName=GUI` or\
        \ `domainName=02` will find\nprojects associated with the domain `GUI02`.\n\
        - **subDomainId** - The subdomain's ID within the system, not interchangeable\
        \ with its UID.\n- **subDomainName** - The complete or partial name of the\
        \ subdomain. For example, using `subDomainName=GUI` or\n`subDomainName=02`\
        \ will find projects linked to the subdomain `GUI02`.\n- **costCenterId**\
        \ - The cost center's ID within the system, not interchangeable with its UID.\n\
        - **costCenterName** - The complete or partial name of the cost center. For\
        \ instance, using `costCenterName=GUI` or\n`costCenterName=02` will find projects\
        \ associated with the cost center `GUI02`.\n- **dueInHours** - Filter for\
        \ jobs with due dates less than or equal to the specified number of hours.\n\
        - **createdInLastHours** - Filter for jobs created within the specified number\
        \ of hours.\n- **ownerId** - The user ID who owns the project within the system,\
        \ not interchangeable with its UID.\n- **jobStatuses** - A list of statuses\
        \ for jobs within the projects. Include each status as a dedicated query parameter,\n\
        e.g., `jobStatuses=ASSIGNED&jobStatuses=COMPLETED`.\n- **jobStatusGroup**\
        \ - The name of the status group used to filter projects containing at least\
        \ one job with the\nspecified status, similar to the status filter in the\
        \ Projects list for a Linguist user.\n- **buyerId** - The Buyer's ID.\n- **pageNumber**\
        \ - Indicates the desired page number (zero-based) to retrieve. The total\
        \ number of pages is returned in\nthe `totalPages` field within each response.\n\
        - **pageSize** - Indicates the page size, affecting the `totalPages` retrieved\
        \ in each response and potentially\ninfluencing the number of iterations needed\
        \ to obtain all projects.\n- **nameOrInternalId** - Specify either the project\
        \ name or Internal ID (the sequence number in the project list\ndisplayed\
        \ in the UI).\n- **includeArchived** - A boolean parameter to include archived\
        \ projects in the search.\n- **archivedOnly** - A boolean search indicating\
        \ whether only archived projects should be searched.\n"
      operationId: "listProjects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "clientId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "clientName"
        in: "query"
        required: false
        type: "string"
      - name: "businessUnitId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "businessUnitName"
        in: "query"
        required: false
        type: "string"
      - name: "statuses"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW"
          - "ASSIGNED"
          - "COMPLETED"
          - "ACCEPTED_BY_VENDOR"
          - "DECLINED_BY_VENDOR"
          - "COMPLETED_BY_VENDOR"
          - "CANCELLED"
        collectionFormat: "multi"
      - name: "targetLangs"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "domainId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "domainName"
        in: "query"
        required: false
        type: "string"
      - name: "subDomainId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "subDomainName"
        in: "query"
        required: false
        type: "string"
      - name: "costCenterId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "costCenterName"
        in: "query"
        required: false
        type: "string"
      - name: "dueInHours"
        in: "query"
        description: "-1 for projects that are overdue"
        required: false
        type: "integer"
        minimum: -1
        format: "int32"
      - name: "createdInLastHours"
        in: "query"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "sourceLangs"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "ownerId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "jobStatuses"
        in: "query"
        description: "Allowed for linguists only"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW"
          - "ACCEPTED"
          - "DECLINED"
          - "DELIVERED"
          - "EMAILED"
          - "COMPLETED"
          - "CANCELLED"
        collectionFormat: "multi"
      - name: "jobStatusGroup"
        in: "query"
        description: "Allowed for linguists only"
        required: false
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "COMPLETED"
      - name: "buyerId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "nameOrInternalId"
        in: "query"
        description: "Name or internal ID of project"
        required: false
        type: "string"
      - name: "includeArchived"
        in: "query"
        description: "List also archived projects"
        required: false
        type: "boolean"
        default: false
      - name: "archivedOnly"
        in: "query"
        description: "List only archived projects, regardless of `includeArchived`"
        required: false
        type: "boolean"
        default: false
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "ID"
        enum:
        - "INTERNAL_ID"
        - "NAME"
        - "DATE_CREATED"
        - "DATE_ARCHIVED"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAbstractProjectDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}:
    get:
      tags:
      - "Project"
      summary: "Get project"
      description: "\nThis API call retrieves information specific to a project.\n\
        \nThe level of detail in the response varies based on the user's role. Admins,\
        \ Project Managers, Vendors, Buyers, and\nLinguists receive different responses,\
        \ detailed below.\n\n- Details about predefined system metadata, such as client,\
        \ domain, subdomain, cost center, business unit, or status.\nNote that [Custom\
        \ Fields](#operation/getCustomField_1), if added to projects, are not included\
        \ here and require\nretrieval via a dedicated Custom Fields API call. Metadata\
        \ exposed to Linguists or Vendors might differ from what's\nvisible to Admins\
        \ or Project Managers.\n- [Workflow Step](https://support.phrase.com/hc/en-us/articles/5709717879324-Workflow-TMS-)\
        \ information, crucial for\nuser or vendor assignments through APIs. When\
        \ projects are created, each workflow step's global ID instantiates into a\n\
        project-specific workflow step ID necessary for user assignments. Attempting\
        \ to assign the global workflow step ID\n(found under Settings or via Workflow\
        \ Step APIs) results in an error, as only the project-specific step can be\
        \ assigned.\n- Progress information indicating the total number of jobs across\
        \ all workflow steps in the project, alongside the\nproportion of completed\
        \ and overdue jobs.\n"
      operationId: "getProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AbstractProjectDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Project"
      summary: "Delete project"
      description: ""
      operationId: "deleteProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "purge"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    patch:
      tags:
      - "Project"
      summary: "Edit project"
      description: ""
      operationId: "patchProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PatchProjectDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AbstractProjectDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/analyseSettings:
    get:
      tags:
      - "Project"
      summary: "Get analyse settings"
      description: ""
      operationId: "getAnalyseSettingsForProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnalyseSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/applyTemplate/{templateUid}/assignProviders:
    post:
      tags:
      - "Project"
      - "Project Template"
      summary: "Assigns providers from template"
      description: ""
      operationId: "assignLinguistsFromTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "templateUid"
        in: "path"
        required: true
        type: "string"
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/applyTemplate/{templateUid}/assignProviders/forJobParts:
    post:
      tags:
      - "Project"
      - "Project Template"
      summary: "Assigns providers from template (specific jobs)"
      description: ""
      operationId: "assignLinguistsFromTemplateToJobParts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "templateUid"
        in: "path"
        required: true
        type: "string"
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartReferences"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/assignVendor:
    post:
      tags:
      - "Project"
      summary: "Assign vendor"
      description: "\nTo unassign Vendor from Project, use empty body:\n```\n{}\n\
        ```\n    "
      operationId: "assignVendorToProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AssignVendorDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/assignableTemplates:
    get:
      tags:
      - "Project"
      - "Project Template"
      summary: "List assignable templates"
      description: ""
      operationId: "assignableTemplates"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AssignableTemplatesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/clone:
    post:
      tags:
      - "Project"
      summary: "Clone project"
      description: ""
      operationId: "cloneProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CloneProjectDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/AbstractProjectDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/customFields:
    get:
      tags:
      - "Project"
      summary: "Get custom fields of project (page)"
      description: ""
      operationId: "getCustomFieldsPageOfProject"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 20"
        required: false
        type: "integer"
        default: 20
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "createdBy"
        in: "query"
        description: "Filter by webhook creators UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "modifiedBy"
        in: "query"
        description: "Filter by webhook updaters UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "sortField"
        in: "query"
        description: "Sort by this field"
        required: false
        type: "string"
        enum:
        - "CREATED"
        - "LAST_MODIFIED"
      - name: "sortTrend"
        in: "query"
        description: "Sort direction"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Project"
      summary: "Create custom field instances"
      description: ""
      operationId: "createCustomFieldsOnProject"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateCustomFieldInstancesDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstancesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Edit custom fields of the project (batch)"
      description: ""
      operationId: "editCustomFieldsOnProject"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFieldInstancesDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstancesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/customFields/{fieldInstanceUid}:
    get:
      tags:
      - "Project"
      summary: "Get custom field of project"
      description: ""
      operationId: "getCustomFieldOfProject"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "fieldInstanceUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Edit custom field of project"
      description: ""
      operationId: "editCustomFieldOnProject"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "fieldInstanceUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFieldInstanceDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Project"
      summary: "Delete custom field of project"
      description: ""
      operationId: "deleteCustomFieldOfProject"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "fieldInstanceUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deleted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/fileHandovers:
    get:
      tags:
      - "Job"
      summary: "Download handover file(s)"
      description: "\nFor downloading multiple files as ZIP file provide multiple\
        \ IDs in query parameters.\n* For example `?jobUid={id1}&jobUid={id2}`\n*\
        \ When no files matched given IDs error 404 is returned, otherwise ZIP file\
        \ will include those that were found\n"
      operationId: "getHandoverFiles"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "query"
        description: "JobPart Id of requested handover file"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "File / Archive with file handovers"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Job"
      summary: "Upload handover file"
      description: "\nFor following jobs the handover file is not supported:\n* Continuous\
        \ jobs\n* Jobs from connectors\n* Split jobs\n* Multilingual jobs\n"
      operationId: "uploadHandoverFile"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "Memsource"
        in: "header"
        required: true
        type: "string"
        format: "application/json"
        x-example: "{\"jobs\":[{\"uid\":\"8kMckeDcgWWF4Fe4Szqjb1\"}]}"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?(filename\\*=UTF-8''(.+)|filename=\"\
          ?(.+)\"?)`"
        required: true
        type: "string"
      - name: "Content-Length"
        in: "header"
        required: false
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileHandoverDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Job"
      summary: "Delete handover file"
      description: ""
      operationId: "deleteHandoverFile"
      consumes:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartReferences"
      responses:
        "204":
          description: "Deleted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/fileNamingSettings:
    get:
      tags:
      - "Project"
      summary: "Get file naming settings for project"
      description: ""
      operationId: "getFileNamingSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileNamingSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Update file naming settings for project"
      description: ""
      operationId: "updateFileNamingSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FileNamingSettingsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileNamingSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/financialSettings:
    get:
      tags:
      - "Project"
      summary: "Get financial settings"
      description: ""
      operationId: "getFinancialSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FinancialSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Edit financial settings"
      description: ""
      operationId: "setFinancialSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SetFinancialSettingsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FinancialSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/importSettings:
    get:
      tags:
      - "Project"
      summary: "Get projects's default import settings"
      description: ""
      operationId: "getImportSettingsForProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Edit project import settings"
      description: ""
      operationId: "editImportSettingsOfProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FileImportSettingsCreateDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobPreviewPackage:
    post:
      tags:
      - "Project"
      summary: "Upload Job Preview Package"
      description: "Uploads a Job Preview Package to a project. ImportFile API then\
        \ refers to the preview package.\n        The package is a zip file containing\
        \ the preview HTML and related asset (css, js..) files."
      operationId: "uploadJobPreviewPackage"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        enum:
        - "multipart/form-data"
      - name: "file"
        in: "formData"
        description: "JobPreviewPackage file to upload"
        required: true
        type: "file"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/JobPreviewPackageDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs:
    post:
      tags:
      - "Job"
      summary: "Create job"
      description: "\nAn API call to create a [job](https://support.phrase.com/hc/en-us/articles/5709686763420-Jobs-TMS-)\n\
        within a specified [project](https://support.phrase.com/hc/en-us/articles/5709748435484-Projects-TMS-).\n\
        The source file can be provided directly in the message body or downloaded\
        \ from connector. \n\nPlease supply job metadata in `Memsource` header. For\
        \ file in the request body provide also the\nfilename in `Content-Disposition`\
        \ header.\n\nAccepted metadata:\n\n- **targetLangs** - This parameter specifies\
        \ what languages should the job be created in. Only languages that are\npresent\
        \ in the project are supported, but this parameter accepts a subset of languages.\
        \ When the file is uploaded, the\nnumber of jobs created (and returned) corresponds\
        \ to the number of target languages and the workflow steps of the\nproject.\
        \ For example, `sample.json` imported for `EN>DE` and `EN>FR` language combination\
        \ into a project with\n`Translation` and `Review` workflow steps will result\
        \ in 4 jobs being created, one for each language and step.\n_Note_: Each time\
        \ a file is uploaded, the resulting wordcount for each target language (not\
        \ workflow step) is counted\ntowards the organization's allowance.\n- **due**\
        \ - ISO 8601\n- **workflowSettings** - This parameter is used to set up assignments\
        \ and due date for projects with workflow steps.\nWhen a project is created,\
        \ the global workflow steps available via [List woorkflow steps](#operation/listWFSteps)\
        \ are\ninstantiated for the given project at hand. To assign users or due\
        \ dates, these project specific IDs need to be used\ninstead of the global\
        \ ones.\n- **assignments** - If a project does not contain workflow steps,\
        \ this parameter can be used to assign users directly.\n- **importSettings**\
        \ - Re-usable [import settings](#operation/createImportSettings)\n- **useProjectFileImportSettings**\
        \ - When project is created, either global default setting or settings of\
        \ a\n[project template](https://support.phrase.com/hc/en-us/articles/5709647439772-Project-Templates-TMS-)\
        \ are copied\ninto it. This parameter can be used to reference these project\
        \ settings instead of using the API defaults.\nMutually exclusive with importSettings\n\
        - **callbackUrl** - A URL that can be notified when the job creation has been\
        \ finished.\nUnlike [webhooks](https://support.phrase.com/hc/en-us/articles/5709693398812-Webhooks-TMS-)\
        \ which are global for the\nentire account, the `callbackUrl` is set only\
        \ for the specific operation at hand.\n- **path** - A parameter that can be\
        \ used to specify a location of the source file and preserved for later download.\n\
        This is automatically created when importing ZIP files.\n- **preTranslate**\
        \ - A parameter that indicates if the job should be\n[pre-translated](https://support.phrase.com/hc/en-us/articles/5709717749788-Pre-translation-TMS-)\
        \ after job creation.\n- **semanticMarkup** - Set semantic markup processing\
        \ after import when enabled for organization\n- **xmlAssistantProfile** -\
        \ Apply XML import settings defined using XML assistant\n- **jobPreviewPackageFileUidRef**\
        \ - reference to a job preview package file to create a preview for the imported\
        \ file\n  \nFor remote file jobs also `remoteFile` can be added. To retrieve\
        \ the information below,\nuse the [connector](#operation/getConnectorList)\
        \ APIs.\n- **connectorToken** - Token of the connector for the purposes of\
        \ the APIs\n- **remoteFolder** - An encoded name of the folder, retrieved\
        \ by e.g. [List files in a subfolder](#operation/getFolder)  \n- **remoteFileName**\
        \ - An encoded name of the file, retrieved similarly to above.\n- **continuous**\
        \ - Jobs created with files from a connector can be created\nas [continuous](https://support.phrase.com/hc/en-us/articles/5709711922972-Continuous-Jobs-CJ-TMS-)\n\
        \nCreate and assign job in project without workflow step:\n```\n\n{\n  \"\
        targetLangs\": [\n    \"cs_cz\"\n  ],\n  \"callbackUrl\": \"https://my-shiny-service.com/consumeCallback\"\
        ,\n  \"importSettings\": {\n    \"uid\": \"abcd123\"\n  },\n  \"due\": \"\
        2007-12-03T10:15:30.00Z\",\n  \"path\": \"destination directory\",\n  \"assignments\"\
        : [\n    {\n      \"targetLang\": \"cs_cz\",\n      \"providers\": [\n   \
        \     {\n          \"id\": \"4321\",\n          \"type\": \"USER\"\n     \
        \   }\n      ]\n    }\n  ],\n  \"notifyProvider\": {\n    \"organizationEmailTemplate\"\
        : {\n      \"id\": \"39\"\n    },\n    \"notificationIntervalInMinutes\":\
        \ \"10\"\n  }\n}\n```\n\nCreate job from remote file without workflow steps:\n\
        ```\n\n{\n  \"remoteFile\": {\n    \"connectorToken\": \"948123ef-e1ef-4cd3-a90e-af1617848af3\"\
        ,\n    \"remoteFolder\": \"/\",\n    \"remoteFileName\": \"Few words.docx\"\
        ,\n    \"continuous\": false\n  },\n  \"assignments\": [],\n  \"workflowSettings\"\
        : [],\n  \"targetLangs\": [\n    \"cs\"\n  ]\n}\n```\n\nCreate and assign\
        \ job in project with workflow step:\n```\n\n{\n  \"targetLangs\": [\n   \
        \ \"de\"\n  ],\n  \"useProjectFileImportSettings\": \"true\",\n  \"workflowSettings\"\
        : [\n    {\n      \"id\": \"64\",\n      \"due\": \"2007-12-03T10:15:30.00Z\"\
        ,\n      \"assignments\": [\n        {\n          \"targetLang\": \"de\",\n\
        \          \"providers\": [\n            {\n              \"id\": \"3\",\n\
        \              \"type\": \"VENDOR\"\n            }\n          ]\n        }\n\
        \      ],\n      \"notifyProvider\": {\n        \"organizationEmailTemplate\"\
        : {\n          \"id\": \"39\"\n        },\n        \"notificationIntervalInMinutes\"\
        : \"10\"\n      }\n    }\n  ]\n}\n```\n\nCreate a job with job preview package\
        \ reference:\n```\n{\n  \"targetLangs\": [\n    \"de\"\n  ],\n  \"jobPreviewPackageFileUidRef\"\
        : {\"uid\": \"jobPreviewPackageFileUid123\"}\n}\n```\n    "
      operationId: "createJob"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "Memsource"
        in: "header"
        required: false
        type: "string"
        format: "application/json"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?(filename\\*=UTF-8''(.+)|filename=\"\
          ?(.+)\"?)`"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/JobListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/batch:
    put:
      tags:
      - "Job"
      summary: "Edit jobs (batch)"
      description: "\nReturns only jobs which were updated by the batch operation.\n"
      operationId: "editParts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartUpdateBatchDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Job"
      summary: "Delete job (batch)"
      description: ""
      operationId: "deleteParts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartDeleteReferences"
      - name: "purge"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/bilingualFile:
    post:
      tags:
      - "Job"
      - "Bilingual File"
      summary: "Download bilingual file"
      description: "\nThis API call generates a bilingual file in the chosen format\
        \ by merging all submitted jobs together.\nNote that all submitted jobs must\
        \ belong to the same project; it's not feasible to merge jobs from multiple\
        \ projects.\n\nWhen dealing with MXLIFF or DOCX files, modifications made\
        \ externally can be imported back into the Phrase TMS project.\nAny changes\
        \ will be synchronized into the editor, allowing actions like confirming or\
        \ locking segments.\n\nUnlike the user interface (UI), the APIs also support\
        \ XLIFF as a bilingual format.\n\nWhile MXLIFF files are editable using various\
        \ means, their primary intended use is with the\n[CAT Desktop Editor](https://support.phrase.com/hc/en-us/articles/5709683873052-CAT-Desktop-Editor-TMS-).\n\
        It's crucial to note that alterations to the file incompatible with the CAT\
        \ Desktop Editor's features may result in\na corrupted file, leading to potential\
        \ loss or duplication of work.\n"
      operationId: "getBilingualFile"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      - "application/mxliff"
      - "application/xliff+xml"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GetBilingualFileDto"
      - name: "format"
        in: "query"
        required: false
        type: "string"
        default: "MXLF"
        enum:
        - "MXLF"
        - "DOCX"
        - "XLIFF"
        - "TMX"
      - name: "preview"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        "200":
          description: "application/octet-stream, application/mxliff, application/xliff+xml"
          headers:
            Content-Disposition:
              type: "string"
              description: "Contains filename (UTF-8 encoded). \n\n `filename*=UTF-8''ExampleFileName.md`"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/compare:
    post:
      tags:
      - "Job"
      summary: "Compare jobs on workflow levels"
      description: ""
      operationId: "comparePart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartReadyReferences"
      - name: "atWorkflowLevel"
        in: "query"
        required: false
        type: "integer"
        default: 1
        maximum: 15
        minimum: 1
        format: "int32"
      - name: "withWorkflowLevel"
        in: "query"
        required: false
        type: "integer"
        default: 1
        maximum: 15
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ComparedSegmentsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/connectorTask:
    post:
      tags:
      - "Job"
      summary: "Create job from connector asynchronous download task"
      description: "\nCreates the job in project specified by path param projectUid.\
        \ Source file is defined by downloadTaskId parameter. That is value of finished\
        \ download async task \n[Connector - Download file (async)](#operation/getFile_1).\n\
        \nPlease supply job metadata in body.\n\nAccepted metadata: \n\n  - `targetLangs`\
        \ - **required**\n  - `due` - ISO 8601\n  - `workflowSettings` - project with\
        \ workflow - see examples bellow\n  - `assignments` - project without workflows\
        \ - see examples bellow\n  - `importSettings` - re-usable import settings\
        \ - see [Create import settings](#operation/createImportSettings)\n  - `useProjectFileImportSettings`\
        \ - mutually exclusive with importSettings\n  - `callbackUrl` - consumer callback\n\
        \  - `path` - original destination directory\n  - `preTranslate` - set pre\
        \ translate job after import\n  - `semanticMarkup` - set semantic markup processing\
        \ after import when enabled for organization\n  - `xmlAssistantProfile` -\
        \ apply XML import settings defined using XML assistant\n  \nCreate job simple\
        \ (without workflow steps, without assignments):\n```\n{\n  \"targetLangs\"\
        : [\n    \"cs_cz\",\n    \"es_es\"\n  ]\n}\n```\n\nCreate and assign job in\
        \ project without workflow step:\n```\n{\n  \"targetLangs\": [\n    \"cs_cz\"\
        \n  ],\n  \"callbackUrl\": \"https://my-shiny-service.com/consumeCallback\"\
        ,\n  \"importSettings\": {\n    \"uid\": \"abcd123\"\n  },\n  \"due\": \"\
        2007-12-03T10:15:30.00Z\",\n  \"path\": \"destination directory\",\n  \"assignments\"\
        : [\n    {\n      \"targetLang\": \"cs_cz\",\n      \"providers\": [\n   \
        \     {\n          \"id\": \"4321\",\n          \"type\": \"USER\"\n     \
        \   }\n      ]\n    }\n  ],\n  \"notifyProvider\": {\n    \"organizationEmailTemplate\"\
        : {\n      \"id\": \"39\"\n    },\n    \"notificationIntervalInMinutes\":\
        \ \"10\"\n  }\n}\n```\n\nCreate and assign job in project with workflow step:\n\
        ```\n{\n  \"targetLangs\": [\n    \"de\"\n  ],\n  \"useProjectFileImportSettings\"\
        : \"true\",\n  \"workflowSettings\": [\n    {\n      \"id\": \"64\",\n   \
        \   \"due\": \"2007-12-03T10:15:30.00Z\",\n      \"assignments\": [\n    \
        \    {\n          \"targetLang\": \"de\",\n          \"providers\": [\n  \
        \          {\n              \"id\": \"3\",\n              \"type\": \"VENDOR\"\
        \n            }\n          ]\n        }\n      ],\n      \"notifyProvider\"\
        : {\n        \"organizationEmailTemplate\": {\n          \"id\": \"39\"\n\
        \        },\n        \"notificationIntervalInMinutes\": \"10\"\n      }\n\
        \    }\n  ]\n}\n```\n    "
      operationId: "createJobFromAsyncDownloadTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "downloadTaskId"
        in: "query"
        required: false
        type: "string"
      - name: "continuous"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobCreateRequestDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/JobListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/copySourceToTarget:
    post:
      tags:
      - "Job"
      summary: "Copy Source to Target"
      description: ""
      operationId: "copySourceToTarget"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartReadyReferences"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/humanTranslate:
    post:
      tags:
      - "Translation"
      summary: "Human translate (Gengo or Unbabel)"
      description: ""
      operationId: "humanTranslate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/HumanTranslateJobsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncRequestWrapperDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/notifyAssigned:
    post:
      tags:
      - "Job"
      summary: "Notify assigned users"
      description: ""
      operationId: "notifyAssigned"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NotifyJobPartsRequestDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/search:
    post:
      tags:
      - "Job"
      summary: "Search jobs in project"
      description: "\nThis API call can be used to verify (search) which of the provided\
        \ jobs belong to the specified project. For the jobs\nthat belong to the project,\
        \ a subset of [Get job](#operation/getPart) information will be returned and\
        \ the rest of the\njobs will be filtered out.\n"
      operationId: "searchPartsInProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SearchJobsRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchJobsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/segmentsCount:
    post:
      tags:
      - "Job"
      - "Segment"
      summary: "Get segments count"
      description: "\nThis API provides the current count of segments (progress data).\n\
        \nEvery time this API is called, it returns the most up-to-date information.\
        \ Consequently, these numbers will change\ndynamically over time. The data\
        \ retrieved from this API call is utilized to calculate the progress percentage\
        \ in the UI.\n\nThe call returns the following information:\n\nCounts of characters,\
        \ words, and segments for each of the locked, confirmed, and completed categories.\
        \ In this context,\n_completed_ is defined as `confirmed` + `locked` - `confirmed\
        \ and locked`.\n\nThe number of added words if the [Update source](https://support.phrase.com/hc/en-us/articles/10825557848220-Job-Tools)\n\
        operation has been performed on the job. In this context, added words are\
        \ defined as the original word count plus the\nsum of words added during all\
        \ subsequent update source operations.\n\nThe count of segments where relevant\
        \ machine translation (MT) was available (machineTranslationRelevantSegmentsCount)\n\
        and the number of segments where the MT output was post-edited (machineTranslationPostEditedSegmentsCount).\n\
        \nA breakdown of [Quality assurance](https://support.phrase.com/hc/en-us/articles/5709703799324-Quality-Assurance-QA-TMS-)\n\
        results, including the number of segments on which it was performed, the count\
        \ of warnings found, and the number of\nwarnings that were ignored.\n\nAdditionally,\
        \ a breakdown of the aforementioned information from the previous\n[Workflow\
        \ step](https://support.phrase.com/hc/en-us/articles/5709717879324-Workflow-TMS-)\
        \ is also provided.\n"
      operationId: "getSegmentsCount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartReadyReferences"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SegmentsCountsResponseListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/source:
    post:
      tags:
      - "Job"
      summary: "Update source"
      description: "\nAPI updated source file for specified job\n\nJob file can be\
        \ provided directly in the message body. \n\nPlease supply jobs in `Memsource`\
        \ header. \n\nFor file in the request body provide also the filename in `Content-Disposition`\
        \ header.\n\nIf a job from a multilingual file is updated, all jobs from the\
        \ same file are update too even if their UIDs aren't \nlisted in the jobs\
        \ field.\n\nAccepted metadata: \n\n  - `jobs` - **required** - list of jobs\
        \ UID reference (maximum size `100`)\n  - `preTranslate` - pre translate flag\
        \ (default `false`)\n  - `allowAutomaticPostAnalysis` - if automatic post\
        \ editing analysis should be created. If not specified then value \n     \
        \                              is taken from the analyse settings of the project\n\
        \  - `callbackUrl` - consumer callback\n\nJob restrictions:\n  - job must\
        \ belong to project specified in path (`projectUid`)\n  - job `UID` must be\
        \ from the first workflow step\n  - job cannot be split\n  - job cannot be\
        \ continuous\n  - job cannot originate in a connector\n  - status in any of\
        \ the job's workflow steps cannot be a final\n    status (`COMPLETED_BY_LINGUIST`,\
        \ `COMPLETED`, `CANCELLED`)\n  - job UIDs must be from the same multilingual\
        \ file if a multilingual file is updated\n  - multiple multilingual files\
        \ or a mixture of multilingual and other jobs cannot be updated in one call\n\
        \nFile restrictions:\n  - file cannot be a `.zip` file\n\nExample:\n\n```\n\
        {\n  \"jobs\": [\n    {\n        \"uid\": \"jobIn1stWfStepAndNonFinalStatusUid\"\
        \n    }\n  ],\n  \"preTranslate\": false,\n  \"allowAutomaticPostAnalysis\"\
        : false\n  \"callbackUrl\": \"https://my-shiny-service.com/consumeCallback\"\
        \n}\n```\n\n"
      operationId: "updateSource"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "Memsource"
        in: "header"
        required: false
        type: "string"
        format: "application/json"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?(filename\\*=UTF-8''(.+)|filename=\"\
          ?(.+)\"?)`"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      responses:
        "200":
          description: "Updated"
          schema:
            $ref: "#/definitions/JobUpdateSourceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/target:
    post:
      tags:
      - "Job"
      summary: "Update target"
      description: "\nAPI update target file for specified job\n\nJob file can be\
        \ provided directly in the message body.\n\nPlease supply jobs in `Memsource`\
        \ header.\n\nFor file in the request body provide also the filename in `Content-Disposition`\
        \ header.\n\nAccepted metadata:\n\n  - `jobs` - **required** - list of jobs\
        \ UID reference (maximum size `1`)\n  - `propagateConfirmedToTm` - sets if\
        \ confirmed segments should be stored in TM (default value: true)\n  - `callbackUrl`\
        \ - consumer callback\n  - `targetSegmentationRule` - ID reference to segmentation\
        \ rule of organization to use for update target\n  - `unconfirmChangedSegments`\
        \ - sets if segments should stay unconfirmed\n\nJob restrictions:\n  - job\
        \ must belong to project specified in path (`projectUid`)\n  - job cannot\
        \ be split\n  - job cannot be continuous\n  - job cannot originate in a connector\n\
        \  - job cannot have different file extension than original file\n\nFile restrictions:\n\
        \  - file cannot be a `.zip` file\n  - update target is not allowed for jobs\
        \ with file extensions: po, tbx, tmx, ttx, ts\n  - update target for multilingual\
        \ jobs works only with following file extensions: xliff, xlsx, csv\n\nExample:\n\
        \n```\n{\n  \"jobs\": [\n    {\n        \"uid\": \"jobUid\"\n    }\n  ],\n\
        \  \"propagateConfirmedToTm\": true,\n  \"targetSegmentationRule\": {\n  \
        \      \"id\": \"1\"\n   },\n  \"callbackUrl\": \"https://my-shiny-service.com/consumeCallback\"\
        \n}\n```\n\n"
      operationId: "updateTarget"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "Memsource"
        in: "header"
        required: false
        type: "string"
        format: "application/json"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?(filename\\*=UTF-8''(.+)|filename=\"\
          ?(.+)\"?)`"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      responses:
        "202":
          description: "Updated"
          schema:
            $ref: "#/definitions/JobUpdateSourceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/translations:
    delete:
      tags:
      - "Job"
      summary: "Delete all translations"
      description: ""
      operationId: "deleteAllTranslations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartReadyReferences"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobPartUid}/customFields:
    get:
      tags:
      - "Job"
      - "Custom Fields"
      summary: "Get custom fields"
      description: ""
      operationId: "getCustomFieldsJob"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobPartUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 20"
        required: false
        type: "integer"
        default: 20
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "createdBy"
        in: "query"
        description: "Filter creators UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "modifiedBy"
        in: "query"
        description: "Filter updaters UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "sortField"
        in: "query"
        description: "Sort by this field"
        required: false
        type: "string"
        enum:
        - "CREATED"
        - "LAST_MODIFIED"
      - name: "sortTrend"
        in: "query"
        description: "Sort direction"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoCustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Job"
      - "Custom Fields"
      summary: "Create custom field instances"
      description: ""
      operationId: "createCustomFieldsJob"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobPartUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateCustomFieldInstancesDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstancesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Job"
      - "Custom Fields"
      summary: "Edit custom fields (batch)"
      description: ""
      operationId: "editCustomFieldsJob"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobPartUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFieldInstancesDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstancesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobPartUid}/customFields/{instanceUid}:
    get:
      tags:
      - "Job"
      - "Custom Fields"
      summary: "Get custom field"
      description: ""
      operationId: "getCustomFieldJob"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobPartUid"
        in: "path"
        required: true
        type: "string"
      - name: "instanceUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Job"
      - "Custom Fields"
      summary: "Edit custom field"
      description: ""
      operationId: "editCustomFieldJob"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobPartUid"
        in: "path"
        required: true
        type: "string"
      - name: "instanceUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateCustomFieldInstanceDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CustomFieldInstanceDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Job"
      - "Custom Fields"
      summary: "Delete custom field"
      description: ""
      operationId: "deleteCustomFieldJob"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobPartUid"
        in: "path"
        required: true
        type: "string"
      - name: "instanceUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "Deleted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}:
    get:
      tags:
      - "Job"
      summary: "Get job"
      description: "\nThis API call provides specific information about a\n[job](https://support.phrase.com/hc/en-us/articles/5709686763420-Jobs-TMS-)\
        \ within a project.\n\nThe response includes fundamental job details such\
        \ as the current status, assigned providers, language combination, or\n[workflow\
        \ step](https://support.phrase.com/hc/en-us/articles/5709717879324-Workflow-TMS-)\
        \ to which the job belongs.\nAdditionally, it offers a subset of the [Get\
        \ project](#operation/getProject) information.\n\nFurthermore, the response\
        \ contains timestamps for the last\n[Update source and Update target](https://support.phrase.com/hc/en-us/articles/10825557848220-Job-Tools)\
        \ operations\nexecuted on the job.\n\nIf the job was imported as\n[continuous](https://support.phrase.com/hc/en-us/articles/5709711922972-Continuous-Jobs-CJ-TMS-),\
        \ the job will be\nmarked as such, and the response will include the timestamp\
        \ of the last update.\n\nMoreover, the response features a boolean flag indicating\
        \ if the job was imported successfully.\nIt also highlights potential errors\
        \ that might have occurred during the import process.\n\nThe `jobReference`\
        \ field serves as a unique identifier that allows matching corresponding jobs\
        \ across different\nworkflow steps.\n"
      operationId: "getPart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartExtendedDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Job"
      summary: "Edit job"
      description: "\nThis API call facilitates job editing using a PUT method.\n\n\
        Unlike [Patch job](#operation/patchPart), this call employs a PUT method,\
        \ necessitating the inclusion of all\nparameters in the request. Omitting\
        \ any parameter will reset its value to the default. For instance, if only\
        \ the status\nfield is included, the due date and provider fields will be\
        \ emptied, even if they had previous values.\n\nIt's recommended to either\
        \ use a call like [Get job](#operation/getPart) or [List jobs](#operation/listPartsV2)\
        \ to\ngather the unchanged information or consider using the [Patch job](#operation/patchPart)\
        \ operation.\n\nThis call supports editing the status, due date, and providers.\
        \ When modifying providers, it's crucial to submit both\nthe provider's ID\
        \ and its type (either VENDOR or USER).\n\nThe response will offer a subset\
        \ of information from [Get job](#operation/getPart).\n"
      operationId: "editPart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartUpdateSingleDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartExtendedDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    patch:
      tags:
      - "Job"
      summary: "Patch job"
      description: "\nThis API call allows for partial updates to jobs, modifying\
        \ specific fields without overwriting\nthose not included in the update request.\n\
        \nDiffering from [Edit job](#operation/editPart), this call employs a PATCH\
        \ method, updating only the provided fields\nwithout altering others. It's\
        \ beneficial when editing a subset of supported fields is required.\n\nThe\
        \ call supports the editing of status, due date, and providers. When editing\
        \ providers, it's essential to submit\nboth the ID of the provider and its\
        \ type (either VENDOR or USER).\n\nThe response will provide a subset of information\
        \ from [Get job](#operation/getPart).\n"
      operationId: "patchPart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartPatchSingleDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartExtendedDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/copySourceToTarget:
    post:
      tags:
      - "Job"
      summary: "Copy Source to Target job"
      description: ""
      operationId: "copySourceToTargetJobPart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/importSettings:
    get:
      tags:
      - "Job"
      summary: "Get import settings for job"
      description: ""
      operationId: "getImportSettingsForJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Job"
      summary: "Edit job import settings"
      description: ""
      operationId: "editJobImportSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/FileImportSettingsCreateDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/FileImportSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/original:
    get:
      tags:
      - "Job"
      summary: "Download original file"
      description: ""
      operationId: "getOriginalFile"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "application/octet-stream"
          headers:
            Content-Disposition:
              type: "string"
              description: "Contains filename (UTF-8 encoded). \n\n `filename*=UTF-8''ExampleFileName.md`"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/preview:
    get:
      tags:
      - "Job"
      summary: "Download preview file"
      description: ""
      operationId: "filePreviewJob"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "application/octet-stream"
          headers:
            Content-Disposition:
              type: "string"
              description: "Contains filename (UTF-8 encoded). \n\n `filename*=UTF-8''ExampleFileName.md`"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Job"
      summary: "Download preview file"
      description: "Takes bilingual file (.mxliff only) as argument. If not passed,\
        \ data will be taken from database"
      operationId: "filePreview"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      responses:
        "200":
          description: "application/octet-stream"
          headers:
            Content-Disposition:
              type: "string"
              description: "Contains filename (UTF-8 encoded). \n\n `filename*=UTF-8''ExampleFileName.md`"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/previewUrl:
    get:
      tags:
      - "Job"
      summary: "Get PDF preview"
      description: ""
      operationId: "previewUrls"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "workflowLevel"
        in: "query"
        required: false
        type: "integer"
        default: 1
        maximum: 15
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PreviewUrlsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/pseudoTranslate:
    post:
      tags:
      - "Job"
      summary: "Pseudo-translates job"
      description: ""
      operationId: "pseudoTranslateJobPart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PseudoTranslateActionDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/ignoreChecks:
    post:
      tags:
      - "Quality Assurance"
      summary: "Edit ignored checks"
      description: ""
      operationId: "updateIgnoredChecks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateIgnoredChecksDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/ignoredWarnings:
    post:
      tags:
      - "Quality Assurance"
      summary: "Add ignored warnings"
      description: ""
      operationId: "addIgnoredWarnings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateIgnoredWarningsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UpdateIgnoredWarningsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Quality Assurance"
      summary: "Delete ignored warnings"
      description: ""
      operationId: "deleteIgnoredWarnings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateIgnoredWarningsDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/segments:
    get:
      tags:
      - "Job"
      - "Segment"
      summary: "Get segments"
      description: ""
      operationId: "listSegments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "beginIndex"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "endIndex"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SegmentListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/setStatus:
    post:
      tags:
      - "Job"
      summary: "Edit job status"
      description: ""
      operationId: "setStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobStatusChangeActionDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/split:
    post:
      tags:
      - "Job"
      summary: "Split job"
      description: "\nSplits job by one of the following methods:\n* **After specific\
        \ segments** - fill in `segmentOrdinals`\n* **Into X parts** - fill in `partCount`\n\
        * **Into parts with specific size** - fill in `partSize`. partSize represents\
        \ segment count in each part.\n* **Into parts with specific word count** -\
        \ fill in `wordCount`\n* **By document parts** - fill in `byDocumentParts`,\
        \ works only with **PowerPoint** files\n\nOnly one option at a time is allowed."
      operationId: "split"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SplitJobActionDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/statusChanges:
    get:
      tags:
      - "Job"
      summary: "Get status changes"
      description: ""
      operationId: "statusChanges"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartStatusChangesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/targetFileWarnings:
    get:
      tags:
      - "Job"
      summary: "Get target file's warnings"
      description: "\nThis call will return target file's warnings. This means even\
        \ for other jobs that were created via 'split jobs' etc.\n"
      operationId: "getCompletedFileWarnings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TargetFileWarningsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/termBases/createByJob:
    post:
      tags:
      - "Term Base"
      - "Job"
      summary: "Create term in job's term bases"
      description: "Create new term in the write term base assigned to the job"
      operationId: "createTermByJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateTermsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TermPairDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/transMemories/searchSegment:
    post:
      tags:
      - "Translation Memory"
      - "Job"
      summary: "Search translation memory for segment by job"
      description: "Returns at most <i>maxSegments</i>\n            records with <i>score\
        \ >= scoreThreshold</i> and at most <i>maxSubsegments</i> records which are\
        \ subsegment,\n            i.e. the source text is substring of the query\
        \ text."
      operationId: "searchSegmentByJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SearchTMByJobRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponseListTmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/translationResources:
    get:
      tags:
      - "Job"
      - "Machine Translation Settings"
      - "Term Base"
      - "Translation Memory"
      summary: "Get translation resources"
      description: ""
      operationId: "getTranslationResources"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TranslationResourcesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/translations/translateWithMachineTranslation:
    post:
      tags:
      - "Translation"
      summary: "Translate using machine translation"
      description: "Configured machine translate settings is used"
      operationId: "machineTranslationJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MachineTranslateResponse"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/jobs/{jobUid}/workflowStep:
    get:
      tags:
      - "Job"
      summary: "Get job's workflowStep"
      description: ""
      operationId: "getPartsWorkflowStep"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectWorkflowStepDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/lqaSettings:
    get:
      tags:
      - "Project"
      summary: "Get LQA settings"
      description: ""
      operationId: "getProjectSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "workflowLevel"
        in: "query"
        required: false
        type: "integer"
        default: 1
        maximum: 15
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LqaSettingsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/mtSettings:
    get:
      tags:
      - "Project"
      summary: "Get project machine translate settings"
      description: ""
      operationId: "getMtSettingsForProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MTSettingsPerLanguageListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Edit machine translate settings"
      description: "This will erase all mtSettings per language for project.\n   \
        \     To remove all machine translate settings from project call without a\
        \ machineTranslateSettings parameter."
      operationId: "setMtSettingsForProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditProjectMTSettingsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MTSettingsPerLanguageListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/mtSettingsPerLanguage:
    put:
      tags:
      - "Project"
      summary: "Edit machine translate settings per language"
      description: "This will erase mtSettings for project"
      operationId: "setMtSettingsPerLanguageForProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditProjectMTSettPerLangListDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MTSettingsPerLanguageListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/providers:
    get:
      tags:
      - "Project"
      - "Provider"
      summary: "List project providers"
      description: ""
      operationId: "getProjectAssignments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "providerName"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoProviderReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/qaSettingsChecks:
    get:
      tags:
      - "Project"
      summary: "Get QA checks"
      description: "Returns enabled quality assurance settings."
      operationId: "enabledQualityChecks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/EnabledQualityChecksDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/quotes:
    get:
      tags:
      - "Project"
      summary: "List quotes"
      description: ""
      operationId: "getQuotesForProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Name to search by"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        description: "Sorting field"
        required: false
        type: "string"
        default: "DATE_CREATED"
        enum:
        - "DATE_CREATED"
        - "INNER_ID"
      - name: "order"
        in: "query"
        description: "Sorting order"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoQuoteDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/references:
    get:
      tags:
      - "Project Reference File"
      summary: "List project reference files"
      description: ""
      operationId: "listReferenceFiles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "filename"
        in: "query"
        required: false
        type: "string"
      - name: "dateCreatedSince"
        in: "query"
        description: "date time in ISO 8601 UTC format"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        description: "UID of user"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "DATE_CREATED"
        enum:
        - "FILENAME"
        - "DATE_CREATED"
        - "CREATED_BY"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "DESC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ReferenceFilePageDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Project Reference File"
      summary: "Delete project reference files (batch)"
      description: ""
      operationId: "batchDeleteReferenceFiles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ProjectReferenceFilesRequestDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/references/creators:
    get:
      tags:
      - "Project Reference File"
      summary: "List project reference file creators"
      description: "The result is not paged and returns up to 50 users.\n        \
        \        If the requested user is not included, the search can be narrowed\
        \ down with the `userName` parameter.\n            "
      operationId: "listReferenceFileCreators"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "userName"
        in: "query"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserReferencesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/references/download:
    post:
      tags:
      - "Project Reference File"
      summary: "Download project reference files (batch)"
      description: ""
      operationId: "batchDownloadReferenceFiles"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ProjectReferenceFilesRequestDto"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/references/{referenceFileId}:
    get:
      tags:
      - "Project Reference File"
      summary: "Download project reference file"
      description: ""
      operationId: "downloadReference"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "referenceFileId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/restore:
    patch:
      tags:
      - "Project"
      summary: "Restore project"
      description: "Restores a project that was previously archived"
      operationId: "restoreProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/runAutoLqa:
    post:
      tags:
      - "Language Quality Assessment"
      summary: "Run Auto LQA"
      description: "Runs Auto LQA either for job parts listed in `jobParts`\n    \
        \                or for all job parts in the given `projectWorkflowStep`.\n\
        \                    Both fields are mutually exclusive. If the project has\
        \ no steps,\n                    then all job parts in the project accessible\
        \ to the user are used."
      operationId: "runAutoLqa"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RunAutoLqaDto"
      responses:
        "202":
          description: "Accepted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/setStatus:
    post:
      tags:
      - "Project"
      summary: "Edit project status"
      description: ""
      operationId: "setProjectStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SetProjectStatusDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/targetLangs:
    post:
      tags:
      - "Project"
      summary: "Add target languages"
      description: "Add target languages to project"
      operationId: "addTargetLanguageToProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddTargetLangDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/termBases:
    get:
      tags:
      - "Project"
      - "Term Base"
      summary: "Get term bases"
      description: ""
      operationId: "getProjectTermBases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectTermBaseListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      - "Term Base"
      summary: "Edit term bases"
      description: ""
      operationId: "setProjectTermBases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SetTermBaseDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectTermBaseListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/termBases/relevant:
    get:
      tags:
      - "Project"
      - "Term Base"
      summary: "List project relevant term bases"
      description: ""
      operationId: "relevantTermBases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "domainName"
        in: "query"
        required: false
        type: "string"
      - name: "clientName"
        in: "query"
        required: false
        type: "string"
      - name: "subDomainName"
        in: "query"
        required: false
        type: "string"
      - name: "targetLangs"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "strictLangMatching"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoTermBaseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/transMemories/relevant:
    get:
      tags:
      - "Project"
      - "Translation Memory"
      summary: "List project relevant translation memories"
      description: ""
      operationId: "relevantTransMemoriesForProject"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "domainName"
        in: "query"
        required: false
        type: "string"
      - name: "clientName"
        in: "query"
        required: false
        type: "string"
      - name: "subDomainName"
        in: "query"
        required: false
        type: "string"
      - name: "targetLangs"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "strictLangMatching"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoTransMemoryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/transMemories/searchSegmentInProject:
    post:
      tags:
      - "Project"
      - "Translation Memory"
      summary: "Search translation memory for segment in the project"
      description: "Returns at most <i>maxSegments</i>\n            records with <i>score\
        \ >= scoreThreshold</i> and at most <i>maxSubsegments</i> records which are\
        \ subsegment,\n            i.e. the source text is substring of the query\
        \ text."
      operationId: "searchTmSegment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SearchTMRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponseListTmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/projects/{projectUid}/workflowSteps:
    post:
      tags:
      - "Project"
      summary: "Add workflow steps"
      description: ""
      operationId: "addWorkflowSteps"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddWorkflowStepsDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/quotes/email:
    post:
      tags:
      - "Quote"
      summary: "Email quotes"
      description: ""
      operationId: "emailQuotes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EmailQuotesRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/EmailQuotesResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/quotes/{quoteUid}:
    get:
      tags:
      - "Quote"
      summary: "Get quote"
      description: ""
      operationId: "get_2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "quoteUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QuoteDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Quote"
      summary: "Delete quote"
      description: ""
      operationId: "deleteQuote"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "quoteUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/scim/ResourceTypes:
    get:
      tags:
      - "SCIM"
      summary: "List the types of SCIM Resources available"
      description: ""
      operationId: "getResourceTypes"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScimResourceTypeSchema"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/scim/Schemas:
    get:
      tags:
      - "SCIM"
      summary: "Get supported SCIM Schemas"
      description: ""
      operationId: "getSchemas"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScimResourceSchema"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/scim/Schemas/{schemaUrn}:
    get:
      tags:
      - "SCIM"
      summary: "Get supported SCIM Schema by urn"
      description: ""
      operationId: "getSchemaByUrn"
      produces:
      - "application/json"
      parameters:
      - name: "schemaUrn"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScimResourceSchema"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/scim/ServiceProviderConfig:
    get:
      tags:
      - "SCIM"
      summary: "Retrieve the Service Provider's Configuration"
      description: ""
      operationId: "getServiceProviderConfigDto"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServiceProviderConfigDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/scim/Users:
    get:
      tags:
      - "SCIM"
      summary: "Search users"
      description: "\nThis operation supports <a href=\"http://ldapwiki.com/wiki/SCIM%20Filtering\"\
        \ target=\"_blank\">SCIM Filter</a>, \n<a href=\"http://ldapwiki.com/wiki/SCIM%20Search%20Request\"\
        \ target=\"_blank\">SCIM attributes</a> and \n<a href=\"http://ldapwiki.com/wiki/SCIM%20Sorting\"\
        \ target=\"_blank\">SCIM sort</a>\n\nSupported attributes:\n  - `id`\n  -\
        \ `active`\n  - `userName`\n  - `name.givenName`\n  - `name.familyName`\n\
        \  - `emails.value`\n  - `meta.created`\n"
      operationId: "searchUsers"
      produces:
      - "application/json"
      - "application/scim+json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "See method description"
        required: false
        type: "string"
      - name: "attributes"
        in: "query"
        description: "See method description"
        required: false
        type: "string"
      - name: "sortBy"
        in: "query"
        description: "See method description"
        required: false
        type: "string"
      - name: "sortOrder"
        in: "query"
        description: "See method description"
        required: false
        type: "string"
        default: "ascending"
        enum:
        - "ascending"
        - "descending"
      - name: "startIndex"
        in: "query"
        description: "The 1-based index of the first search result. Default 1"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        format: "int32"
      - name: "count"
        in: "query"
        description: "Non-negative Integer. Specifies the desired maximum number of\
          \ search results per page; e.g., 10."
        required: false
        type: "integer"
        default: 50
        maximum: 100
        minimum: 0
        format: "int32"
      responses:
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "SCIM"
      summary: "Create user using SCIM"
      description: "\nSupported schema: `\"urn:ietf:params:scim:schemas:core:2.0:User\"\
        `\n\nCreate active user:\n```\n{\n    \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\"\
        \n    ],\n    \"active\": true,\n    \"userName\": \"john.doe\",\n    \"emails\"\
        : [\n        {\n            \"primary\": true,\n            \"value\": \"\
        john.doe@example.com\",\n            \"type\": \"work\"\n        }\n    ],\n\
        \    \"name\": {\n        \"givenName\": \"John\",\n        \"familyName\"\
        : \"Doe\"\n    }\n}\n```\n"
      operationId: "createUserSCIM"
      consumes:
      - "application/json"
      - "application/scim+json"
      produces:
      - "application/json"
      - "application/scim+json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ScimUserCoreDto"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ScimUserCoreDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/scim/Users/{userId}:
    get:
      tags:
      - "SCIM"
      summary: "Get user"
      description: ""
      operationId: "getScimUser"
      produces:
      - "application/json"
      - "application/scim+json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ScimUserCoreDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "SCIM"
      summary: "Edit user using SCIM"
      description: ""
      operationId: "editUser"
      consumes:
      - "application/json"
      - "application/scim+json"
      produces:
      - "application/json"
      - "application/scim+json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ScimUserCoreDto"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Updated"
          schema:
            $ref: "#/definitions/ScimUserCoreDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "SCIM"
      summary: "Delete user using SCIM"
      description: ""
      operationId: "deleteUserScim"
      produces:
      - "application/json"
      - "application/scim+json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    patch:
      tags:
      - "SCIM"
      summary: "Patch user using SCIM"
      description: ""
      operationId: "patchUser"
      produces:
      - "application/json"
      - "application/scim+json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "object"
          additionalProperties:
            type: "object"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Patched"
          schema:
            $ref: "#/definitions/ScimUserCoreDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/segmentationRules:
    get:
      tags:
      - "Segmentation Rules"
      summary: "List segmentation rules"
      description: ""
      operationId: "getListOfSegmentationRules"
      produces:
      - "application/json"
      parameters:
      - name: "locales"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "DATE_CREATED"
        enum:
        - "LOCALE"
        - "NAME"
        - "FILENAME"
        - "PRIMARY"
        - "OWNER"
        - "DATE_CREATED"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: false
        type: "string"
      - name: "language"
        in: "query"
        description: "Filter by language"
        required: false
        type: "string"
      - name: "filename"
        in: "query"
        description: "Filter by filename"
        required: false
        type: "string"
      - name: "primary"
        in: "query"
        description: "Filter by the primary field"
        required: false
        type: "boolean"
      - name: "ownerUid"
        in: "query"
        description: "Filter by owner"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoSegmentationRuleDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Segmentation Rules"
      summary: "Create segmentation rule"
      description: "Creates new Segmentation Rule with file and segRule JSON Object\
        \ as header parameter. The same object is used for GET action."
      operationId: "createSegmentationRule"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "streamed file"
        required: true
        schema:
          $ref: "#/definitions/InputStream"
      - name: "segRule"
        in: "header"
        required: true
        type: "string"
        maxLength: 512
        minLength: 0
        format: "application/json: {name:'name', locale:'en', primary:'false', filename:'extra_file.xml'}"
        x-example: "{name:'name', locale:'en', primary:'false', filename:'extra_file.xml'}"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/SegmentationRuleDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/segmentationRules/owners:
    get:
      tags:
      - "Segmentation Rules"
      summary: "Get owners of segmentation rules"
      description: ""
      operationId: "getSegmentationRulesOwners"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SegmentationRulesOwnersDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/segmentationRules/{locale}/exportDefault:
    get:
      tags:
      - "Segmentation Rules"
      summary: "Export default segmentation rules"
      description: ""
      operationId: "exportDefaultSegmentationRules"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "locale"
        in: "path"
        required: true
        type: "string"
      - name: "format"
        in: "query"
        required: false
        type: "string"
        default: "SRX"
        enum:
        - "SRX"
        - "XLSX"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/segmentationRules/{segRuleUid}:
    get:
      tags:
      - "Segmentation Rules"
      summary: "Get segmentation rule"
      description: ""
      operationId: "getSegmentationRule"
      produces:
      - "application/json"
      parameters:
      - name: "segRuleUid"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SegmentationRuleDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Segmentation Rules"
      summary: "Edit segmentation rule"
      description: ""
      operationId: "updatesSegmentationRule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditSegmentationRuleDto"
      - name: "segRuleUid"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SegmentationRuleDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Segmentation Rules"
      summary: "Delete segmentation rule"
      description: ""
      operationId: "deletesSegmentationRule"
      parameters:
      - name: "segRuleUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/segmentationRules/{segRuleUid}/export:
    get:
      tags:
      - "Segmentation Rules"
      summary: "Export segmentation rule"
      description: ""
      operationId: "exportSegmentationRule"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "segRuleUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/services:
    get:
      tags:
      - "Service"
      summary: "List services"
      description: ""
      operationId: "listServices"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        description: "Sorting field"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "PUBLIC_NAME"
        - "TYPE"
      - name: "order"
        in: "query"
        description: "Sorting order"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoServiceListEntryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Service"
      summary: "Delete services (batch)"
      description: ""
      operationId: "deleteServices"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DeleteServicesDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/spellCheck/check:
    post:
      tags:
      - "Spell Check"
      summary: "Spell check"
      description: "Spell check using the settings of the user's organization"
      operationId: "check"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SpellCheckRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SpellCheckResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/spellCheck/check/{jobUid}:
    post:
      tags:
      - "Spell Check"
      summary: "Spell check for job"
      description: "Spell check using the settings from the project of the job"
      operationId: "checkByJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SpellCheckRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SpellCheckResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/spellCheck/suggest:
    post:
      tags:
      - "Spell Check"
      summary: "Suggest a word"
      description: "Spell check suggest using the users's spell check dictionary"
      operationId: "suggest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SuggestRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SuggestResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/spellCheck/words:
    post:
      tags:
      - "Spell Check"
      summary: "Add word to dictionary"
      description: ""
      operationId: "addWord"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DictionaryItemDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/subDomains:
    get:
      tags:
      - "SubDomain"
      summary: "List subdomains"
      description: ""
      operationId: "listSubDomains"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        description: "Uid of user"
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "NAME"
        enum:
        - "NAME"
        - "DATE_CREATED"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoSubDomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "SubDomain"
      summary: "Create subdomain"
      description: ""
      operationId: "createSubDomain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SubDomainEditDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/SubDomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/subDomains/{subDomainUid}:
    get:
      tags:
      - "SubDomain"
      summary: "Get subdomain"
      description: ""
      operationId: "getSubDomain"
      produces:
      - "application/json"
      parameters:
      - name: "subDomainUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SubDomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "SubDomain"
      summary: "Edit subdomain"
      description: ""
      operationId: "updateSubDomain"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "subDomainUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SubDomainEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SubDomainDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "SubDomain"
      summary: "Delete subdomain"
      description: ""
      operationId: "deleteSubDomain"
      parameters:
      - name: "subDomainUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases:
    get:
      tags:
      - "Term Base"
      summary: "List term bases"
      description: ""
      operationId: "listTermBases"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "lang"
        in: "query"
        description: "Language of the term base"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "clientId"
        in: "query"
        required: false
        type: "string"
      - name: "domainId"
        in: "query"
        required: false
        type: "string"
      - name: "subDomainId"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoTermBaseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Term Base"
      summary: "Create term base"
      description: ""
      operationId: "createTermBase"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TermBaseEditDto"
      responses:
        "200":
          description: "Created"
          schema:
            $ref: "#/definitions/TermBaseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}:
    get:
      tags:
      - "Term Base"
      summary: "Get term base"
      description: ""
      operationId: "getTermBase"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TermBaseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Term Base"
      summary: "Edit term base"
      description: "It is possible to add new languages only"
      operationId: "updateTermBase"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TermBaseEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TermBaseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Term Base"
      summary: "Delete term base"
      description: ""
      operationId: "deleteTermBase"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "purge"
        in: "query"
        description: "purge=false - the Termbase is can later be restored, \n    \
          \                \"purge=true - the Termbase is completely deleted and cannot\
          \ be restored"
        required: false
        type: "boolean"
        default: false
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/browse:
    post:
      tags:
      - "Term Base"
      summary: "Browse term base"
      description: ""
      operationId: "browseTerms"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BrowseRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BrowseResponseListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/concepts:
    get:
      tags:
      - "Term Base"
      summary: "List concepts"
      description: ""
      operationId: "listConcepts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConceptListResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Term Base"
      summary: "Create concept"
      description: ""
      operationId: "createConcept"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConceptEditDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ConceptWithMetadataDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Term Base"
      summary: "Delete concepts"
      description: ""
      operationId: "deleteConcepts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConceptListReference"
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/concepts/{conceptId}:
    get:
      tags:
      - "Term Base"
      summary: "Get concept"
      description: ""
      operationId: "getConcept"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "conceptId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConceptWithMetadataDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Term Base"
      summary: "Update concept"
      description: ""
      operationId: "updateConcept"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "conceptId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConceptEditDto"
      responses:
        "200":
          description: "Ok"
          schema:
            $ref: "#/definitions/ConceptWithMetadataDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Term Base"
      summary: "Delete concept"
      description: ""
      operationId: "deleteConcept"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "conceptId"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/concepts/{conceptId}/terms:
    get:
      tags:
      - "Term Base"
      summary: "Get terms of concept"
      description: ""
      operationId: "listTermsOfConcept"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "conceptId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConceptDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/export:
    get:
      tags:
      - "Term Base"
      summary: "Export term base"
      description: ""
      operationId: "exportTermBase"
      consumes:
      - "application/json"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "format"
        in: "query"
        required: false
        type: "string"
        default: "Tbx"
        enum:
        - "Tbx"
        - "Xlsx"
      - name: "charset"
        in: "query"
        required: false
        type: "string"
        default: "UTF-8"
      - name: "termStatus"
        in: "query"
        required: false
        type: "string"
        enum:
        - "NEW"
        - "APPROVED"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/lastBackgroundTask:
    get:
      tags:
      - "Term Base"
      summary: "Last import status"
      description: ""
      operationId: "getLastBackgroundTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BackgroundTasksTbDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/metadata:
    get:
      tags:
      - "Term Base"
      summary: "Get term base metadata"
      description: ""
      operationId: "getTermBaseMetadata"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MetadataTbDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/search:
    post:
      tags:
      - "Term Base"
      summary: "Search term base"
      description: ""
      operationId: "searchTerms"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TermBaseSearchRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponseListTbDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/terms:
    post:
      tags:
      - "Term Base"
      summary: "Create term"
      description: "Set conceptId to assign the term to an existing concept, otherwise\
        \ a new concept will be created."
      operationId: "createTerm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TermCreateDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/TermDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Term Base"
      summary: "Clear term base"
      description: "Deletes all terms"
      operationId: "clearTermBase"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/terms/{termId}:
    get:
      tags:
      - "Term Base"
      summary: "Get term"
      description: ""
      operationId: "getTerm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "termId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TermDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Term Base"
      summary: "Edit term"
      description: ""
      operationId: "updateTerm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "termId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TermEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TermDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Term Base"
      summary: "Delete term"
      description: ""
      operationId: "deleteTerm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "termId"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/termBases/{termBaseUid}/upload:
    post:
      tags:
      - "Term Base"
      summary: "Upload term base"
      description: "\nTerms can be imported from XLS/XLSX and TBX file formats into\
        \ a term base.\nSee <a target=\"_blank\" href=\"https://support.phrase.com/hc/en-us/articles/5709733372188\"\
        >Phrase Help Center</a>\n"
      operationId: "importTermBase"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?filename\\*=UTF-8''(.+)`"
        required: true
        type: "string"
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "charset"
        in: "query"
        required: false
        type: "string"
        default: "UTF-8"
      - name: "strictLangMatching"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "updateTerms"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImportTermBaseResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories:
    get:
      tags:
      - "Translation Memory"
      summary: "List translation memories"
      description: ""
      operationId: "listTransMemories"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "sourceLang"
        in: "query"
        required: false
        type: "string"
      - name: "targetLang"
        in: "query"
        required: false
        type: "string"
      - name: "clientId"
        in: "query"
        required: false
        type: "string"
      - name: "domainId"
        in: "query"
        required: false
        type: "string"
      - name: "subDomainId"
        in: "query"
        required: false
        type: "string"
      - name: "businessUnitId"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoTransMemoryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Translation Memory"
      summary: "Create translation memory"
      description: ""
      operationId: "createTransMemory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TransMemoryCreateDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/TransMemoryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/bulk:
    delete:
      tags:
      - "Translation Memory"
      summary: "Delete translation memories (batch)"
      description: ""
      operationId: "bulkDeleteTransMemories"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BulkDeleteTmDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/downloadCleaned/{asyncRequestId}:
    get:
      tags:
      - "Translation Memory"
      summary: "Download cleaned TM"
      description: ""
      operationId: "downloadCleanedTM"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "asyncRequestId"
        in: "path"
        description: "Request ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/downloadExport/{asyncRequestId}:
    get:
      tags:
      - "Translation Memory"
      summary: "Download export"
      description: ""
      operationId: "downloadSearchResult"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "asyncRequestId"
        in: "path"
        description: "Request ID"
        required: true
        type: "string"
      - name: "format"
        in: "query"
        required: false
        type: "string"
        default: "TMX"
        enum:
        - "TMX"
        - "XLSX"
      - name: "fields"
        in: "query"
        description: "Fields to include in exported XLSX"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ID"
          - "TEXT"
          - "PREVIOUS_SEGMENT"
          - "NEXT_SEGMENT"
          - "CONTEXT_KEY"
          - "CREATED_BY"
          - "CREATED_AT"
          - "MODIFIED_BY"
          - "MODIFIED_AT"
          - "CLIENT"
          - "PROJECT"
          - "DOMAIN"
          - "SUBDOMAIN"
          - "NOTE"
          - "REVIEWED"
          - "ALIGNED"
          - "FILENAME"
          - "METADATA"
        collectionFormat: "multi"
      responses:
        "200":
          description: "application/octet-stream"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/extractCleaned:
    post:
      tags:
      - "Translation Memory"
      summary: "Extract cleaned translation memory"
      description: "Returns a ZIP file containing the cleaned translation memories\
        \ in the specified outputFormat."
      operationId: "exportCleanedTMs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CleanedTransMemoriesDto"
      responses:
        "202":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncRequestWrapperDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}:
    get:
      tags:
      - "Translation Memory"
      summary: "Get translation memory"
      description: ""
      operationId: "getTransMemory"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TransMemoryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Translation Memory"
      summary: "Edit translation memory"
      description: ""
      operationId: "editTransMemory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TransMemoryEditDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TransMemoryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Translation Memory"
      summary: "Delete translation memory"
      description: ""
      operationId: "deleteTransMemory"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - name: "purge"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/exportByQueryAsync:
    post:
      tags:
      - "Translation Memory"
      summary: "Search translation memory"
      description: "Use [this API](#operation/downloadSearchResult) to download result"
      operationId: "exportByQueryAsync"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ExportByQueryDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncExportTMByQueryResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/lastBackgroundTask:
    get:
      tags:
      - "Translation Memory"
      summary: "Get last task information"
      description: ""
      operationId: "getBackgroundTasksForTransMems"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BackgroundTasksTmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/metadata:
    get:
      tags:
      - "Translation Memory"
      summary: "Get translation memory metadata"
      description: ""
      operationId: "getMetadata"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - name: "byLanguage"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MetadataResponse_2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/relatedProjects:
    get:
      tags:
      - "Translation Memory"
      summary: "List related projects"
      description: ""
      operationId: "getRelatedProjects"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Project name to filter by"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "order"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          default: "DESC"
          enum:
          - "ASC"
          - "DESC"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAbstractProjectDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/search:
    post:
      tags:
      - "Translation Memory"
      summary: "Search translation memory (sync)"
      description: ""
      operationId: "search"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SearchRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponseListTmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/segments:
    post:
      tags:
      - "Translation Memory"
      summary: "Insert segment"
      description: ""
      operationId: "insertToTransMemory"
      consumes:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SegmentDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Translation Memory"
      summary: "Delete all segments"
      description: ""
      operationId: "clearTransMemory"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/segments/{segmentId}:
    put:
      tags:
      - "Translation Memory"
      summary: "Edit segment"
      description: ""
      operationId: "updateTranslation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - name: "segmentId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Translation Memory"
      summary: "Delete both source and translation"
      description: "Not recommended for bulk removal of segments"
      operationId: "deleteSourceAndTranslations"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - name: "segmentId"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/segments/{segmentId}/lang/{lang}:
    delete:
      tags:
      - "Translation Memory"
      summary: "Delete segment of given language"
      description: "Not recommended for bulk removal of segments"
      operationId: "deleteTranslation"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - name: "segmentId"
        in: "path"
        required: true
        type: "string"
      - name: "lang"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/targetLanguages:
    post:
      tags:
      - "Translation Memory"
      summary: "Add target language to translation memory"
      description: ""
      operationId: "addTargetLangToTransMemory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TargetLanguageDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/TransMemoryDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/transMemories/{transMemoryUid}/wildCardSearch:
    post:
      tags:
      - "Translation Memory"
      summary: "Wildcard search"
      description: ""
      operationId: "wildcardSearch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/WildCardSearchRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponseListTmDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users:
    get:
      tags:
      - "User"
      summary: "List users"
      description: ""
      operationId: "getListOfUsersFiltered"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "firstName"
        in: "query"
        description: "Filter for first name, that starts with value"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      - name: "lastName"
        in: "query"
        description: "Filter for last name, that starts with value"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      - name: "name"
        in: "query"
        description: "Filter for last name or first name, that starts with value"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      - name: "userName"
        in: "query"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      - name: "email"
        in: "query"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      - name: "nameOrEmail"
        in: "query"
        description: "Filter for last name, first name or email starting with the\
          \ value"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      - name: "role"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ADMIN"
          - "PROJECT_MANAGER"
          - "LINGUIST"
          - "GUEST"
          - "SUBMITTER"
          - "PORTAL_MEMBER"
        collectionFormat: "multi"
      - name: "includeDeleted"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ID"
          - "LAST_NAME"
          - "FIRST_NAME"
        collectionFormat: "multi"
      - name: "order"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ASC"
          - "DESC"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoUserDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/lastLogins:
    get:
      tags:
      - "User"
      summary: "List last login dates"
      description: ""
      operationId: "user-lastLogins"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userName"
        in: "query"
        required: false
        type: "string"
        maxLength: 255
        minLength: 0
      - name: "role"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ADMIN"
          - "PROJECT_MANAGER"
          - "LINGUIST"
          - "GUEST"
          - "SUBMITTER"
          - "PORTAL_MEMBER"
        collectionFormat: "multi"
      - name: "sort"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ID"
          - "LAST_LOGIN_DATE"
        collectionFormat: "multi"
      - name: "order"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ASC"
          - "DESC"
        collectionFormat: "multi"
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 100, default 100"
        required: false
        type: "integer"
        default: 100
        maximum: 100
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoLastLoginDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}:
    delete:
      tags:
      - "User"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/emailLoginInformation:
    post:
      tags:
      - "User"
      summary: "Send login information"
      description: ""
      operationId: "sendLoginInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/jobs:
    get:
      tags:
      - "User"
      summary: "List assigned jobs"
      description: ""
      operationId: "listJobs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW"
          - "ACCEPTED"
          - "DECLINED"
          - "DELIVERED"
          - "EMAILED"
          - "COMPLETED"
          - "CANCELLED"
        collectionFormat: "multi"
      - name: "projectUid"
        in: "query"
        required: false
        type: "string"
      - name: "targetLang"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "workflowStepId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "dueInHours"
        in: "query"
        description: "-1 for jobs that are overdue"
        required: false
        type: "integer"
        minimum: -1
        format: "int32"
      - name: "filename"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAssignedJobDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/loginStatistics:
    get:
      tags:
      - "User"
      summary: "Login statistics"
      description: ""
      operationId: "loginActivity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserStatisticsListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/projects:
    get:
      tags:
      - "User"
      - "Project"
      summary: "List assigned projects"
      description: "List projects in which the user is assigned to at least one job\
        \ matching the criteria"
      operationId: "listAssignedProjects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      - name: "status"
        in: "query"
        description: "Status of the assigned jobs"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW"
          - "ACCEPTED"
          - "DECLINED"
          - "DELIVERED"
          - "EMAILED"
          - "COMPLETED"
          - "CANCELLED"
        collectionFormat: "multi"
      - name: "targetLang"
        in: "query"
        description: "Target language of the assigned jobs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "workflowStepId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "dueInHours"
        in: "query"
        description: "Number of hours in which the assigned jobs are due. Use `-1`\
          \ for jobs that are overdue."
        required: false
        type: "integer"
        minimum: -1
        format: "int32"
      - name: "filename"
        in: "query"
        required: false
        type: "string"
      - name: "projectName"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoProjectReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/targetLangs:
    get:
      tags:
      - "User"
      summary: "List assigned target languages"
      description: ""
      operationId: "listTargetLangs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW"
          - "ACCEPTED"
          - "DECLINED"
          - "DELIVERED"
          - "EMAILED"
          - "COMPLETED"
          - "CANCELLED"
        collectionFormat: "multi"
      - name: "projectUid"
        in: "query"
        required: false
        type: "string"
      - name: "workflowStepId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "dueInHours"
        in: "query"
        description: "-1 for jobs that are overdue"
        required: false
        type: "integer"
        minimum: -1
        format: "int32"
      - name: "filename"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoString"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/undelete:
    post:
      tags:
      - "User"
      summary: "Restore user"
      description: ""
      operationId: "cancelDeletion"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/updatePassword:
    post:
      tags:
      - "User"
      summary: "Update password"
      description: "\nCan be used by the user to update their own password or by ADMIN\
        \ to update password of user without joined account\n* Password length must\
        \ be between 8 and 255\n* Password must not be same as the username\n"
      operationId: "updatePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserPasswordEditDto"
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/users/{userUid}/workflowSteps:
    get:
      tags:
      - "User"
      - "Workflow Step"
      summary: "List assigned workflow steps"
      description: ""
      operationId: "listWorkflowSteps"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW"
          - "ACCEPTED"
          - "DECLINED"
          - "DELIVERED"
          - "EMAILED"
          - "COMPLETED"
          - "CANCELLED"
        collectionFormat: "multi"
      - name: "projectUid"
        in: "query"
        required: false
        type: "string"
      - name: "targetLang"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "dueInHours"
        in: "query"
        description: "-1 for jobs that are overdue"
        required: false
        type: "integer"
        minimum: -1
        format: "int32"
      - name: "filename"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoWorkflowStepReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/vendors:
    get:
      tags:
      - "Vendor"
      summary: "List vendors"
      description: ""
      operationId: "listVendors"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        description: "Name or the vendor, for filtering"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoVendorDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Vendor"
      summary: "Create vendor"
      description: ""
      operationId: "createVendor"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateVendorDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/VendorDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Vendor"
      summary: "Delete vendors (batch)"
      description: ""
      operationId: "deleteVendors"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DeleteVendorsDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/vendors/{vendorUid}:
    get:
      tags:
      - "Vendor"
      summary: "Get vendor"
      description: ""
      operationId: "getVendor"
      produces:
      - "application/json"
      parameters:
      - name: "vendorUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/VendorDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/webhooksCalls:
    get:
      tags:
      - "Webhook"
      summary: "Lists webhook calls"
      description: ""
      operationId: "getWebhookCallsList"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "events"
        in: "query"
        description: "List of Webhook events to filter by"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "JOB_STATUS_CHANGED"
          - "JOB_CREATED"
          - "JOB_DELETED"
          - "JOB_UNSHARED"
          - "JOB_ASSIGNED"
          - "JOB_DUE_DATE_CHANGED"
          - "JOB_UPDATED"
          - "JOB_TARGET_UPDATED"
          - "JOB_EXPORTED"
          - "JOB_UNEXPORTED"
          - "JOB_AUTO_LQA_FINISHED"
          - "JOB_METADATA_UPDATED"
          - "JOB_CUSTOM_FIELDS_UPDATED"
          - "PROJECT_CREATED"
          - "PROJECT_DELETED"
          - "PROJECT_UNSHARED"
          - "PROJECT_STATUS_CHANGED"
          - "PROJECT_DUE_DATE_CHANGED"
          - "SHARED_PROJECT_ASSIGNED"
          - "PROJECT_METADATA_UPDATED"
          - "PRE_TRANSLATION_FINISHED"
          - "ANALYSIS_CREATED"
          - "CONTINUOUS_JOB_UPDATED"
          - "PROJECT_TEMPLATE_CREATED"
          - "PROJECT_TEMPLATE_UPDATED"
          - "PROJECT_TEMPLATE_DELETED"
          - "RAW_MT_CONVERTER_IMPORT_FINISHED"
          - "RAW_MT_PRE_TRANSLATION_FINISHED"
          - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
          - "TERM_BASE_TERM_CREATED"
          - "TERM_BASE_TERM_UPDATED"
          - "TERM_BASE_TERM_DELETED"
          - "TERM_BASE_CONCEPT_CREATED"
          - "TERM_BASE_CONCEPT_UPDATED"
          - "TERM_BASE_CONCEPT_DELETED"
          - "TERM_BASE_IMPORTED"
        collectionFormat: "multi"
      - name: "status"
        in: "query"
        description: "Status of Webhook calls to filter by"
        required: false
        type: "string"
        enum:
        - "SUCCESS"
        - "FAIL"
      - name: "webhookUid"
        in: "query"
        description: "UID of Webhook to filter by"
        required: false
        type: "string"
      - name: "parentUid"
        in: "query"
        description: "UID of parent webhook call to filter by"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoWebhookCallDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/webhooksCalls/replay:
    post:
      tags:
      - "Webhook"
      summary: "Replay webhook calls"
      description: "Replays given list of Webhook Calls in specified order in the\
        \ request"
      operationId: "replayWebhookCalls"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ReplayRequestDto"
      responses:
        "202":
          description: "Accepted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/webhooksCalls/replay/latest:
    post:
      tags:
      - "Webhook"
      summary: "Replay last webhook calls"
      description: "Replays specified number of last Webhook calls from oldest to\
        \ the newest one"
      operationId: "replayLast"
      produces:
      - "application/json"
      parameters:
      - name: "numberOfCalls"
        in: "query"
        description: "Number of calls to be replayed"
        required: false
        type: "integer"
        default: 5
        maximum: 100
        minimum: 1
        format: "int32"
      - name: "events"
        in: "query"
        description: "List of Webhook events to filter by"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "JOB_STATUS_CHANGED"
          - "JOB_CREATED"
          - "JOB_DELETED"
          - "JOB_UNSHARED"
          - "JOB_ASSIGNED"
          - "JOB_DUE_DATE_CHANGED"
          - "JOB_UPDATED"
          - "JOB_TARGET_UPDATED"
          - "JOB_EXPORTED"
          - "JOB_UNEXPORTED"
          - "JOB_AUTO_LQA_FINISHED"
          - "JOB_METADATA_UPDATED"
          - "JOB_CUSTOM_FIELDS_UPDATED"
          - "PROJECT_CREATED"
          - "PROJECT_DELETED"
          - "PROJECT_UNSHARED"
          - "PROJECT_STATUS_CHANGED"
          - "PROJECT_DUE_DATE_CHANGED"
          - "SHARED_PROJECT_ASSIGNED"
          - "PROJECT_METADATA_UPDATED"
          - "PRE_TRANSLATION_FINISHED"
          - "ANALYSIS_CREATED"
          - "CONTINUOUS_JOB_UPDATED"
          - "PROJECT_TEMPLATE_CREATED"
          - "PROJECT_TEMPLATE_UPDATED"
          - "PROJECT_TEMPLATE_DELETED"
          - "RAW_MT_CONVERTER_IMPORT_FINISHED"
          - "RAW_MT_PRE_TRANSLATION_FINISHED"
          - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
          - "TERM_BASE_TERM_CREATED"
          - "TERM_BASE_TERM_UPDATED"
          - "TERM_BASE_TERM_DELETED"
          - "TERM_BASE_CONCEPT_CREATED"
          - "TERM_BASE_CONCEPT_UPDATED"
          - "TERM_BASE_CONCEPT_DELETED"
          - "TERM_BASE_IMPORTED"
        collectionFormat: "multi"
      - name: "status"
        in: "query"
        description: "Status of Webhook calls to filter by"
        required: false
        type: "string"
        enum:
        - "SUCCESS"
        - "FAIL"
      responses:
        "202":
          description: "Accepted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/workflowSteps:
    get:
      tags:
      - "Workflow Step"
      summary: "List workflow steps"
      description: ""
      operationId: "listWFSteps"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        default: "ID"
        enum:
        - "ID"
        - "NAME"
        - "ORDER"
        - "ABBR"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      - name: "name"
        in: "query"
        description: "Name of the workflow step"
        required: false
        type: "string"
      - name: "abbr"
        in: "query"
        description: "Abbreviation of workflow step"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoWorkflowStepDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Workflow Step"
      summary: "Create workflow step"
      description: ""
      operationId: "createWFStep"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateWorkflowStepDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/WorkflowStepDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/workflowSteps/{workflowStepUid}:
    get:
      tags:
      - "Workflow Step"
      summary: "Get workflow step"
      description: ""
      operationId: "getWFStep"
      consumes:
      - "application/json"
      parameters:
      - name: "workflowStepUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/WorkflowStepDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Workflow Step"
      summary: "Edit workflow step"
      description: ""
      operationId: "editWFStep"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "workflowStepUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditWorkflowStepDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/WorkflowStepDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Workflow Step"
      summary: "Delete workflow step"
      description: ""
      operationId: "deleteWFStep"
      consumes:
      - "application/json"
      parameters:
      - name: "workflowStepUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v1/xmlAssistantProfiles:
    get:
      tags:
      - "XML Assistant"
      summary: "Get XML assistant profiles for organization"
      description: ""
      operationId: "listXmlAssistantProfiles"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "description"
        in: "query"
        required: false
        type: "string"
      - name: "createdBy"
        in: "query"
        required: false
        type: "string"
      - name: "updatedBy"
        in: "query"
        required: false
        type: "string"
      - name: "createdAt"
        in: "query"
        required: false
        type: "string"
      - name: "updatedAt"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 1000
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        enum:
        - "name"
        - "createdAt"
        - "createdBy"
        - "updatedAt"
        - "updatedBy"
      - name: "order"
        in: "query"
        required: false
        type: "string"
        enum:
        - "asc"
        - "desc"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoXmlAssistantProfileListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/analyses:
    post:
      tags:
      - "Analysis"
      summary: "Create analysis"
      description: "Returns created analyses - batching analyses by number of segments\
        \ (api.segment.count.approximation, default 100000), in case request contains\
        \ more segments than maximum (api.segment.max.count, default 300000), returns\
        \ 400 bad request."
      operationId: "createAnalyseAsyncV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateAnalyseAsyncV2Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncAnalyseListResponseV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/analyses/bulk:
    put:
      tags:
      - "Analysis"
      summary: "Edit analyses (batch)"
      description: "If no netRateScheme is provided in request, then netRateScheme\
        \ associated with provider will\nbe used if it exists, otherwise it will remain\
        \ the same as it was."
      operationId: "analyses-batchEdit-v2"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/BulkEditAnalyseV2Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnalysesV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/analyses/{analyseUid}:
    put:
      tags:
      - "Analysis"
      summary: "Edit analysis"
      description: "If no netRateScheme is provided in\nrequest, then netRateScheme\
        \ associated with provider will be used if it exists, otherwise it will remain\
        \ the same\nas it was."
      operationId: "editAnalysis"
      produces:
      - "application/json"
      parameters:
      - name: "analyseUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditAnalyseV2Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnalyseV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/bilingualFiles:
    post:
      tags:
      - "Bilingual File"
      summary: "Upload bilingual file"
      description: "Returns updated job parts and projects"
      operationId: "uploadBilingualFileV2"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "saveToTransMemory"
        in: "query"
        required: false
        type: "string"
        default: "Confirmed"
        enum:
        - "All"
        - "Confirmed"
        - "None"
      - name: "setCompleted"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - in: "body"
        name: "multipart"
        description: "Multipart request with files"
        required: true
        schema:
          $ref: "#/definitions/UploadBilingualFileRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectJobPartsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/connectors/{connectorId}/folders/{folder}/files/{fileName}/upload:
    post:
      tags:
      - "Connector"
      summary: "Upload file (async)"
      description: "Upload a file to a subfolder of the selected connector"
      operationId: "uploadFileV2"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"
      - name: "fileName"
        in: "path"
        required: true
        type: "string"
      - name: "mimeType"
        in: "query"
        description: "Mime type of the file to upload"
        required: false
        type: "string"
      - name: "Memsource"
        in: "header"
        required: true
        type: "string"
        format: "application/json"
        x-example: "{\"subfolderName\":\"myFolder\",\"commitMessage\":\"add translation\"\
          ,\"callbackUrl\":\"https://webhook.site/83b222a1-5cf2-48ec-b8b9-7f79bb2a25e4\"\
          }"
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
        enum:
        - "multipart/form-data"
      - name: "file"
        in: "formData"
        description: "Translated file to upload"
        required: true
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncFileOpResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/connectors/{connectorId}/folders/{folder}/files/{file}:
    post:
      tags:
      - "Connector"
      summary: "Download file (async)"
      description: "\nCreate an asynchronous request to download a file from a (sub)folder\
        \ of the selected connector. \nAfter a callback with successful response is\
        \ received, prepared file can be downloaded by [Download prepared file](#operation/getPreparedFile)\
        \ \nor [Create job from connector asynchronous download task](#operation/createJobFromAsyncDownloadTask).\n"
      operationId: "getFileForConnectorV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"
      - name: "file"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GetFileRequestParamsDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncFileOpResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/connectors/{connectorId}/folders/{folder}/files/{file}/tasks/{taskId}:
    get:
      tags:
      - "Connector"
      summary: "Download prepared file"
      description: "Download the file by referencing successfully finished async download\
        \ request [Connector - Download file (async)](#operation/getFile_1)."
      operationId: "getPreparedFile"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "connectorId"
        in: "path"
        required: true
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"
      - name: "file"
        in: "path"
        required: true
        type: "string"
      - name: "taskId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/InputStreamLength"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/jobs/workflowChanges:
    post:
      tags:
      - "Workflow changes"
      summary: "Download workflow changes report"
      description: ""
      operationId: "downloadWorkflowChanges"
      produces:
      - "text/html"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/WorkflowChangesDto"
      responses:
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/jobs/{jobUid}/conversations/lqas:
    post:
      tags:
      - "Conversations"
      summary: "Create LQA conversation"
      description: ""
      operationId: "createLqaConversationV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateLqaConversationDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/LQAConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/jobs/{jobUid}/conversations/lqas/{conversationId}:
    put:
      tags:
      - "Conversations"
      summary: "Update LQA conversation"
      description: ""
      operationId: "updateLqaConversationV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditLqaConversationDto"
      responses:
        "202":
          description: "Updated"
          schema:
            $ref: "#/definitions/LQAConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/jobs/{jobUid}/conversations/lqas/{conversationId}/comments:
    post:
      tags:
      - "Conversations"
      summary: "Add LQA comment"
      description: ""
      operationId: "addLQACommentV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddCommentDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/AddLqaCommentResultDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/jobs/{jobUid}/conversations/lqas/{conversationId}/comments/{commentId}:
    put:
      tags:
      - "Conversations"
      summary: "Edit LQA comment"
      description: ""
      operationId: "updateLQACommentV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - name: "commentId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddCommentDto"
      responses:
        "202":
          description: "Updated"
          schema:
            $ref: "#/definitions/LQAConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/lqa/profiles/authors:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get list of LQA profile authors"
      description: ""
      operationId: "getLqaProfileAuthorsV2"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 20"
        required: false
        type: "integer"
        default: 20
        maximum: 50
        minimum: 1
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoUserReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projectTemplates/{projectTemplateUid}:
    put:
      tags:
      - "Project Template"
      summary: "Edit project template"
      description: ""
      operationId: "editProjectTemplateV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProjectTemplateEditV2Dto"
      responses:
        "200":
          description: "Edited"
          schema:
            $ref: "#/definitions/ProjectTemplate"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projectTemplates/{projectTemplateUid}/transMemories:
    put:
      tags:
      - "Project Template"
      summary: "Edit translation memories"
      description: "If user wants to edit “All target languages” or \"All workflow\
        \ steps”, \n                       but there are already varied TM settings\
        \ for individual languages or steps, \n                       then the user\
        \ risks to overwrite these individual choices."
      operationId: "setProjectTemplateTransMemoriesV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SetProjectTemplateTransMemoriesV2Dto"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectTemplateTransMemoryListV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/applyTemplate/async/{templateUid}:
    post:
      tags:
      - "Project"
      - "Project Template"
      summary: "Create project from template (async)"
      description: ""
      operationId: "createProjectFromTemplateV2Async"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "templateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateProjectFromTemplateAsyncV2Dto"
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/AsyncRequestWrapperV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/applyTemplate/{templateUid}:
    post:
      tags:
      - "Project"
      - "Project Template"
      summary: "Create project from template"
      description: ""
      operationId: "createProjectFromTemplateV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "templateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateProjectFromTemplateV2Dto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/AbstractProjectDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}:
    put:
      tags:
      - "Project"
      summary: "Edit project"
      description: ""
      operationId: "editProjectV2"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditProjectV2Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AbstractProjectDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/accessSettings:
    get:
      tags:
      - "Project"
      summary: "Get access and security settings"
      description: ""
      operationId: "getProjectAccessSettingsV2"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectSecuritySettingsDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Edit access and security settings"
      description: ""
      operationId: "editProjectAccessSettingsV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditProjectSecuritySettingsDtoV2"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectSecuritySettingsDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs:
    get:
      tags:
      - "Job"
      summary: "List jobs"
      description: "\nAPI call to return a paginated list of [jobs](https://support.phrase.com/hc/en-us/articles/5709686763420-Jobs-TMS-)\n\
        in the given project.\n\nUse the query parameters to further narrow down the\
        \ searching criteria.\n\n- **pageNumber** - A zero-based parameter indicating\
        \ the page number you wish to retrieve. The total number of pages is\nreturned\
        \ in each response in the `totalPages` field in the top level of the response.\n\
        - **pageSize** - A parameter indicating the size of the page you wish to return.\n\
        This has direct effect on the `totalPages`\nretrieved in each response and\
        \ can hence influence the number of times to iterate over to get all the jobs.\n\
        - **count** - When set to `true`, the response will not contain the list of\
        \ jobs (the `content` field) but only the\ncounts of elements and pages. Can\
        \ be used to quickly retrieve the number of elements and pages to iterate\
        \ over.\n- **workflowLevel** - A non-zero based parameter indicating which\n\
        [workflow steps](https://support.phrase.com/hc/en-us/articles/5709717879324-Workflow-TMS-)\n\
        the returned jobs belong to. If left unspecified, its value is set to 1.\n\
        - **status** - A parameter allowing for filtering only for jobs in a specific\
        \ status.\n- **assignedUser** - A parameter allowing for filtering only for\
        \ jobs assigned to a specific user.\nThe parameter accepts a user ID.\n- **dueInHours**\
        \ - A parameter allowing for filtering only for jobs whose due date is less\
        \ or equal to the number\n of hours specified.\n- **filename** - A parameter\
        \ allowing for filtering only for jobs with a specific file name.\n- **targetLang**\
        \ - A parameter allowing for filtering only for jobs with a specific target\
        \ language.\n- **assignedVendor** - A parameter allowing for filtering only\
        \ for jobs assigned to a specific vendor.\nThe parameter accepts a user ID.\n\
        - **notReady** - A parameter allowing for filtering only jobs that have been\
        \ imported. When set to `true` the response\n will only contain jobs that\
        \ have not been imported yet.\n This will also return jobs that have not been\
        \ imported correctly, e.g. due to an error.\n"
      operationId: "listPartsV2"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "count"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "workflowLevel"
        in: "query"
        required: false
        type: "integer"
        default: 1
        maximum: 15
        minimum: 1
        format: "int32"
      - name: "status"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "NEW"
          - "ACCEPTED"
          - "DECLINED"
          - "REJECTED"
          - "DELIVERED"
          - "EMAILED"
          - "COMPLETED"
          - "CANCELLED"
        collectionFormat: "multi"
      - name: "assignedUser"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "dueInHours"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "filename"
        in: "query"
        required: false
        type: "string"
      - name: "targetLang"
        in: "query"
        required: false
        type: "string"
      - name: "assignedVendor"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "notReady"
        in: "query"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoJobPartReferenceV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/pseudoTranslate:
    post:
      tags:
      - "Job"
      summary: "Pseudo-translate job"
      description: ""
      operationId: "pseudoTranslateV2"
      produces:
      - "*/*"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PseudoTranslateWrapperDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/qualityAssurances/ignoredWarnings:
    post:
      tags:
      - "Quality Assurance"
      summary: "Add ignored warnings"
      description: ""
      operationId: "addIgnoredWarningsV2"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateIgnoredWarningsDto_2"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UpdateIgnoredWarningsDto_2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Quality Assurance"
      summary: "Delete ignored warnings"
      description: ""
      operationId: "deleteIgnoredWarningsV2"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UpdateIgnoredWarningsDto_2"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/qualityAssurances/settings:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get QA settings"
      description: "Returns enabled quality assurance checks and settings."
      operationId: "enabledQualityChecksForProject"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          examples:
            application/json:
              forbiddenStrings:
              - "string"
              enabledChecks:
              - checkerType: "EmptyTranslation"
                ignorable: false
                instant: false
              - checkerType: "TrailingPunctuation"
                ignorable: false
                instant: false
              - checkerType: "Formatting"
                ignorable: false
                instant: false
              - checkerType: "JoinTags"
                ignorable: false
                instant: false
              - checkerType: "MissingNumbers"
                ignorable: false
                instant: false
              - checkerType: "MultipleSpaces"
                ignorable: false
                instant: false
              - checkerType: "NonConformingTerm"
                ignorable: false
                instant: false
              - checkerType: "NotConfirmed"
                ignorable: false
                instant: false
              - checkerType: "TranslationLength"
                ignorable: false
              - checkerType: "AbsoluteLength"
                ignorable: false
                instant: false
              - checkerType: "RelativeLength"
                ignorable: false
                instant: false
              - checkerType: "EmptyPairTags"
                ignorable: false
                instant: false
              - checkerType: "InconsistentTranslationTargetSource"
                ignorable: true
                instant: false
              - checkerType: "InconsistentTranslationSourceTarget"
                ignorable: true
                instant: false
              - checkerType: "ForbiddenString"
                ignorable: false
                instant: false
              - checkerType: "SpellCheck"
                ignorable: false
                instant: false
              - checkerType: "RepeatedWords"
                ignorable: false
                instant: false
              - checkerType: "InconsistentTagContent"
                ignorable: false
                instant: false
              - checkerType: "EmptyTagContent"
                ignorable: false
                instant: false
              - checkerType: "Malformed"
                ignorable: false
                instant: false
              - checkerType: "ForbiddenTerm"
                ignorable: false
                instant: false
              - checkerType: "NewerAtLowerLevel"
                ignorable: false
                instant: false
              - checkerType: "LeadingAndTrailingSpaces"
                ignorable: false
                instant: false
              - checkerType: "TargetSourceIdentical"
                ignorable: false
                instant: false
              - checkerType: "SourceOrTargetRegexp"
              - checkerType: "UnmodifiedFuzzyTranslationTM"
                ignorable: true
                instant: false
              - checkerType: "UnmodifiedFuzzyTranslationMTNT"
                ignorable: true
                instant: false
              - checkerType: "Moravia"
                ignorable: false
                instant: false
                context:
                  moraviaProfileId: "MoraviaProfileIdValue"
              - checkerType: "ExtraNumbers"
                ignorable: true
                instant: false
              - checkerType: "UnresolvedConversation"
                ignorable: false
              - checkerType: "NestedTags"
                ignorable: false
                instant: false
              excludeLockedSegments: true
              userCanSetInstantQA: true
              strictJobStatus: true
              regexpRules:
              - description: "string"
                sourceRegexp: "string"
                targetRegexp: "string"
                id: "string"
                ignorable: true
                instant: true
          schema:
            $ref: "#/definitions/QualityAssuranceChecksDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/translations:
    delete:
      tags:
      - "Job"
      summary: "Delete specific translations"
      description: ""
      operationId: "deleteAllTranslationsV2"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartReadyDeleteTranslationDto"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/webEditor:
    post:
      tags:
      - "Job"
      summary: "Get Web Editor URL"
      description: "\nPossible warning codes are:\n  - `NOT_ACCEPTED_BY_LINGUIST`\
        \ - Job is not accepted by linguist\n  - `NOT_ASSIGNED_TO_LINGUIST` - Job\
        \ is not assigned to linguist\n  - `PDF` - One of requested jobs is PDF\n\
        \  - `PREVIOUS_WORKFLOW_NOT_COMPLETED` - Previous workflow step is not completed\n\
        \  - `PREVIOUS_WORKFLOW_NOT_COMPLETED_STRICT` - Previous workflow step is\
        \ not completed and project has strictWorkflowFinish set to true\n  - `IN_DELIVERED_STATE`\
        \ - Jobs in DELIVERED state\n  - `IN_COMPLETED_STATE` - Jobs in COMPLETED\
        \ state\n  - `IN_REJECTED_STATE` - Jobs in REJECTED state\n\nPossible error\
        \ codes are:\n  - `ASSIGNED_TO_OTHER_USER` - Job is accepted by other user\n\
        \  - `NOT_UNIQUE_TARGET_LANG` - Requested jobs contains different target locales\n\
        \  - `TOO_MANY_SEGMENTS` - Count of requested job's segments is higher than\
        \ **40000**\n  - `TOO_MANY_JOBS` - Count of requested jobs is higher than\
        \ **290**\n  - `COMPLETED_JOINED_WITH_OTHER` - Jobs in COMPLETED state cannot\
        \ be joined with jobs in other states\n  - `DELIVERED_JOINED_WITH_OTHER` -\
        \ Jobs in DELIVERED state cannot be joined with jobs in other states\n  -\
        \ `REJECTED_JOINED_WITH_OTHER` - Jobs in REJECTED state cannot be joined with\
        \ jobs in other states\n\nWarning response example:\n```\n{\n    \"warnings\"\
        : [\n        {\n            \"message\": \"Not accepted by linguist\",\n \
        \           \"args\": {\n                \"jobs\": [\n                   \
        \ \"abcd1234\"\n                ]\n            },\n            \"code\": \"\
        NOT_ACCEPTED_BY_LINGUIST\"\n        },\n        {\n            \"message\"\
        : \"Previous workflow step not completed\",\n            \"args\": {\n   \
        \             \"jobs\": [\n                    \"abcd1234\"\n            \
        \    ]\n            },\n            \"code\": \"PREVIOUS_WORKFLOW_NOT_COMPLETED\"\
        \n        }\n    ],\n    \"url\": \"/web/job/abcd1234-efgh5678/translate\"\
        \n}\n```\n\nError response example:\nStatus: `400 Bad Request`\n```\n{\n \
        \   \"errorCode\": \"NOT_UNIQUE_TARGET_LANG\",\n    \"errorDescription\":\
        \ \"Only files with identical target languages can be joined\",\n    \"errorDetails\"\
        : [\n        {\n            \"code\": \"NOT_UNIQUE_TARGET_LANG\",\n      \
        \      \"args\": {\n                \"targetLocales\": [\n               \
        \     \"de\",\n                    \"en\"\n                ]\n           \
        \ },\n            \"message\": \"Only files with identical target languages\
        \ can be joined\"\n        },\n        {\n            \"code\": \"TOO_MANY_SEGMENTS\"\
        ,\n            \"args\": {\n                \"maxSegments\": 40000,\n    \
        \            \"segments\": 400009\n            },\n            \"message\"\
        : \"Up to 40000 segments can be opened in the CAT Web Editor, job has 400009\
        \ segments\"\n        }\n    ]\n}\n```\n"
      operationId: "webEditorLinkV2"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateWebEditorLinkDtoV2"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/WebEditorLinkDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/{jobUid}/downloadTargetFile/{asyncRequestId}:
    get:
      tags:
      - "Job"
      summary: "Download target file based on async request"
      description: "\nThis call will return target file with translation. This means\
        \ even for other jobs that were created via\n'split jobs' etc.\n\nThe asyncRequestId\
        \ can be used only once. Once the download is initiated , the asyncRequestId\
        \ becomes\ninvalid for further use.\n"
      operationId: "downloadCompletedFile"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "asyncRequestId"
        in: "path"
        required: true
        type: "string"
      - name: "format"
        in: "query"
        required: false
        type: "string"
        default: "ORIGINAL"
        enum:
        - "ORIGINAL"
        - "PDF"
      responses:
        "200":
          description: "application/octet-stream"
          headers:
            Content-Disposition:
              type: "string"
              description: "Contains filename (UTF-8 encoded). \n\n `filename*=UTF-8''ExampleFileName.md`"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/{jobUid}/providers/suggest:
    post:
      tags:
      - "Provider"
      - "Job"
      summary: "Get suggested providers"
      description: ""
      operationId: "listProviders_4"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProviderListDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/settings:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get QA settings for job"
      description: "Returns enabled quality assurance checks and settings for job."
      operationId: "enabledQualityChecksForJob"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          examples:
            application/json:
              forbiddenStrings:
              - "string"
              enabledChecks:
              - checkerType: "EmptyTranslation"
                ignorable: false
                instant: false
              - checkerType: "TrailingPunctuation"
                ignorable: false
                instant: false
              - checkerType: "Formatting"
                ignorable: false
                instant: false
              - checkerType: "JoinTags"
                ignorable: false
                instant: false
              - checkerType: "MissingNumbers"
                ignorable: false
                instant: false
              - checkerType: "MultipleSpaces"
                ignorable: false
                instant: false
              - checkerType: "NonConformingTerm"
                ignorable: false
                instant: false
              - checkerType: "NotConfirmed"
                ignorable: false
                instant: false
              - checkerType: "TranslationLength"
                ignorable: false
              - checkerType: "AbsoluteLength"
                ignorable: false
                instant: false
              - checkerType: "RelativeLength"
                ignorable: false
                instant: false
              - checkerType: "EmptyPairTags"
                ignorable: false
                instant: false
              - checkerType: "InconsistentTranslationTargetSource"
                ignorable: true
                instant: false
              - checkerType: "InconsistentTranslationSourceTarget"
                ignorable: true
                instant: false
              - checkerType: "ForbiddenString"
                ignorable: false
                instant: false
              - checkerType: "SpellCheck"
                ignorable: false
                instant: false
              - checkerType: "RepeatedWords"
                ignorable: false
                instant: false
              - checkerType: "InconsistentTagContent"
                ignorable: false
                instant: false
              - checkerType: "EmptyTagContent"
                ignorable: false
                instant: false
              - checkerType: "Malformed"
                ignorable: false
                instant: false
              - checkerType: "ForbiddenTerm"
                ignorable: false
                instant: false
              - checkerType: "NewerAtLowerLevel"
                ignorable: false
                instant: false
              - checkerType: "LeadingAndTrailingSpaces"
                ignorable: false
                instant: false
              - checkerType: "TargetSourceIdentical"
                ignorable: false
                instant: false
              - checkerType: "SourceOrTargetRegexp"
              - checkerType: "UnmodifiedFuzzyTranslationTM"
                ignorable: true
                instant: false
              - checkerType: "UnmodifiedFuzzyTranslationMTNT"
                ignorable: true
                instant: false
              - checkerType: "Moravia"
                ignorable: false
                instant: false
                context:
                  moraviaProfileId: "MoraviaProfileIdValue"
              - checkerType: "ExtraNumbers"
                ignorable: true
                instant: false
              - checkerType: "UnresolvedConversation"
                ignorable: false
              - checkerType: "NestedTags"
                ignorable: false
                instant: false
              excludeLockedSegments: true
              userCanSetInstantQA: true
              strictJobStatus: true
              regexpRules:
              - description: "string"
                sourceRegexp: "string"
                targetRegexp: "string"
                id: "string"
                ignorable: true
                instant: true
          schema:
            $ref: "#/definitions/QualityAssuranceChecksDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/{jobUid}/targetFile:
    put:
      tags:
      - "Job"
      summary: "Download target file (async)"
      description: "\nThis call initiates an asynchronous request to generate and\
        \ download the target file containing translations.\nThis request covers jobs\
        \ created via actions like 'split jobs', ensuring accessibility even for such\
        \ cases.\n\nTo monitor the status of this asynchronous request, you have two\
        \ options:\n1. Use [Get asynchronous request](#operation/getAsyncRequest).\n\
        2. Search for the asyncRequestId by utilizing [List pending requests](#operation/listPendingRequests).\n\
        \nIn contrast to the previous version (v1) of this call, v2 does not directly\
        \ provide the target file within the response.\nOnce the asynchronous request\
        \ is completed, you can download the target file using\n[Download target file\
        \ based on async request](#operation/downloadCompletedFile).\n\n_Note_: The\
        \ asyncRequestId can be used only once. Once the download is initiated through\
        \ `Download target file based on\nasync request`, the asyncRequestId becomes\
        \ invalid for further use.\n"
      operationId: "completedFileV2"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/AsyncRequestWrapperV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/{jobUid}/termBases/searchByJob:
    post:
      tags:
      - "Term Base"
      - "Job"
      summary: "Search job's term bases"
      description: "Search all read term bases assigned to the job"
      operationId: "searchTermsByJobV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SearchTbByJobRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchTbResponseListDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/jobs/{jobUid}/termBases/searchInTextByJob:
    post:
      tags:
      - "Term Base"
      - "Job"
      summary: "Search terms in text"
      description: "Search in text in all read term bases assigned to the job"
      operationId: "searchTermsInTextByJobV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SearchTbInTextByJobRequestDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchInTextResponseList2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/providers/suggest:
    post:
      tags:
      - "Project"
      - "Provider"
      summary: "Get suggested providers"
      description: ""
      operationId: "listProviders_3"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProviderListDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/qaSettings:
    put:
      tags:
      - "Project"
      summary: "Edit quality assurance settings"
      description: ""
      operationId: "setProjectQASettingsV2"
      consumes:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditQASettingsDtoV2"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QASettingsDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/references:
    post:
      tags:
      - "Project Reference File"
      summary: "Create project reference files"
      description: "\nThe `json` request part allows sending additional data as JSON,\n\
        such as a text note that will be used for all the given reference files.\n\
        In case no `file` parts are sent, only 1 reference is created with the given\
        \ note.\nEither at least one file must be sent or the note must be specified.\n\
        Example:\n\n```\n{\n    \"note\": \"Sample text\"\n}\n```\n"
      operationId: "createReferenceFiles"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "multipart"
        description: "Multipart request with files and JSON"
        required: true
        schema:
          $ref: "#/definitions/CreateReferenceFilesRequest"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ReferenceFilesDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/projects/{projectUid}/workflowSteps:
    get:
      tags:
      - "Project"
      summary: "Get workflow steps"
      description: ""
      operationId: "getProjectWorkflowStepsV2"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "withAssignedJobs"
        in: "query"
        description: "Return only steps containing jobs assigned to the calling linguist."
        required: false
        type: "boolean"
        default: false
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectWorkflowStepListDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/quotes:
    post:
      tags:
      - "Quote"
      summary: "Create quote"
      description: "Either WorkflowSettings or Units must be sent for billingUnit\
        \ \"Hour\"."
      operationId: "createQuoteV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/QuoteCreateV2Dto"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QuoteV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/termBases/{termBaseUid}/upload:
    post:
      tags:
      - "Term Base"
      summary: "Upload term base"
      description: "\nTerms can be imported from XLS/XLSX and TBX file formats into\
        \ a term base.\nSee <a target=\"_blank\" href=\"https://support.phrase.com/hc/en-us/articles/5709733372188\"\
        >Phrase Help Center</a>\n"
      operationId: "importTermBaseV2"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?filename\\*=UTF-8''(.+)`"
        required: true
        type: "string"
      - name: "termBaseUid"
        in: "path"
        required: true
        type: "string"
      - name: "charset"
        in: "query"
        required: false
        type: "string"
        default: "UTF-8"
      - name: "strictLangMatching"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "updateTerms"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/transMemories/{transMemoryUid}/export:
    post:
      tags:
      - "Translation Memory"
      summary: "Export translation memory"
      description: "Use [this API](#operation/downloadSearchResult) to download result"
      operationId: "exportV2"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ExportTMDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncExportTMResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/transMemories/{transMemoryUid}/import:
    post:
      tags:
      - "Translation Memory"
      summary: "Import TMX"
      description: ""
      operationId: "importTransMemoryV2"
      consumes:
      - "application/octet-stream"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Length"
        in: "header"
        required: false
        type: "integer"
        format: "int64"
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      - name: "Content-Disposition"
        in: "header"
        description: "must match pattern `((inline|attachment); )?filename\\*=UTF-8''(.+)`"
        required: true
        type: "string"
      - name: "strictLangMatching"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "stripNativeCodes"
        in: "query"
        required: false
        type: "boolean"
        default: true
      - name: "excludeNotConfirmedSegments"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        "202":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AsyncRequestWrapperV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/transMemories/{transMemoryUid}/segments:
    delete:
      tags:
      - "Translation Memory"
      summary: "Delete all segments."
      description: "This call is **asynchronous**, use [this API](#operation/getAsyncRequest)\
        \ to check the result"
      operationId: "clearTransMemoryV2"
      produces:
      - "application/json"
      parameters:
      - name: "transMemoryUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "202":
          description: "Accepted"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/webhooks:
    get:
      tags:
      - "Webhook"
      summary: "Lists webhooks"
      description: ""
      operationId: "getWebHookListV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pageNumber"
        in: "query"
        description: "Page number, starting with 0, default 0"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "name"
        in: "query"
        description: "Filter by webhook name"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        description: "Filter by enabled/disabled status"
        required: false
        type: "string"
        enum:
        - "ENABLED"
        - "DISABLED"
      - name: "url"
        in: "query"
        description: "Filter by webhook URL"
        required: false
        type: "string"
      - name: "events"
        in: "query"
        description: "Filter by webhook events, any match is included"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "JOB_STATUS_CHANGED"
          - "JOB_CREATED"
          - "JOB_DELETED"
          - "JOB_UNSHARED"
          - "JOB_ASSIGNED"
          - "JOB_DUE_DATE_CHANGED"
          - "JOB_UPDATED"
          - "JOB_TARGET_UPDATED"
          - "JOB_EXPORTED"
          - "JOB_UNEXPORTED"
          - "JOB_AUTO_LQA_FINISHED"
          - "JOB_METADATA_UPDATED"
          - "JOB_CUSTOM_FIELDS_UPDATED"
          - "PROJECT_CREATED"
          - "PROJECT_DELETED"
          - "PROJECT_UNSHARED"
          - "PROJECT_STATUS_CHANGED"
          - "PROJECT_DUE_DATE_CHANGED"
          - "SHARED_PROJECT_ASSIGNED"
          - "PROJECT_METADATA_UPDATED"
          - "PRE_TRANSLATION_FINISHED"
          - "ANALYSIS_CREATED"
          - "CONTINUOUS_JOB_UPDATED"
          - "PROJECT_TEMPLATE_CREATED"
          - "PROJECT_TEMPLATE_UPDATED"
          - "PROJECT_TEMPLATE_DELETED"
          - "RAW_MT_CONVERTER_IMPORT_FINISHED"
          - "RAW_MT_PRE_TRANSLATION_FINISHED"
          - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
          - "TERM_BASE_TERM_CREATED"
          - "TERM_BASE_TERM_UPDATED"
          - "TERM_BASE_TERM_DELETED"
          - "TERM_BASE_CONCEPT_CREATED"
          - "TERM_BASE_CONCEPT_UPDATED"
          - "TERM_BASE_CONCEPT_DELETED"
          - "TERM_BASE_IMPORTED"
        collectionFormat: "multi"
      - name: "createdBy"
        in: "query"
        description: "Filter by webhook creators UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "modifiedBy"
        in: "query"
        description: "Filter by webhook updaters UIDs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "sortField"
        in: "query"
        description: "Sort by this field"
        required: false
        type: "string"
        enum:
        - "NAME"
        - "STATUS"
        - "CREATED"
        - "LAST_MODIFIED"
      - name: "sortTrend"
        in: "query"
        description: "Sort direction"
        required: false
        type: "string"
        default: "ASC"
        enum:
        - "ASC"
        - "DESC"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoWebHookDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    post:
      tags:
      - "Webhook"
      summary: "Create webhook"
      description: ""
      operationId: "createWebHookV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateWebHookDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/WebHookDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/webhooks/previews:
    get:
      tags:
      - "Webhook"
      summary: "Get webhook body previews"
      description: ""
      operationId: "getWebhookPreviews"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "events"
        in: "query"
        description: "Filter by webhook events"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "JOB_STATUS_CHANGED"
          - "JOB_CREATED"
          - "JOB_DELETED"
          - "JOB_UNSHARED"
          - "JOB_ASSIGNED"
          - "JOB_DUE_DATE_CHANGED"
          - "JOB_UPDATED"
          - "JOB_TARGET_UPDATED"
          - "JOB_EXPORTED"
          - "JOB_UNEXPORTED"
          - "JOB_AUTO_LQA_FINISHED"
          - "JOB_METADATA_UPDATED"
          - "JOB_CUSTOM_FIELDS_UPDATED"
          - "PROJECT_CREATED"
          - "PROJECT_DELETED"
          - "PROJECT_UNSHARED"
          - "PROJECT_STATUS_CHANGED"
          - "PROJECT_DUE_DATE_CHANGED"
          - "SHARED_PROJECT_ASSIGNED"
          - "PROJECT_METADATA_UPDATED"
          - "PRE_TRANSLATION_FINISHED"
          - "ANALYSIS_CREATED"
          - "CONTINUOUS_JOB_UPDATED"
          - "PROJECT_TEMPLATE_CREATED"
          - "PROJECT_TEMPLATE_UPDATED"
          - "PROJECT_TEMPLATE_DELETED"
          - "RAW_MT_CONVERTER_IMPORT_FINISHED"
          - "RAW_MT_PRE_TRANSLATION_FINISHED"
          - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
          - "TERM_BASE_TERM_CREATED"
          - "TERM_BASE_TERM_UPDATED"
          - "TERM_BASE_TERM_DELETED"
          - "TERM_BASE_CONCEPT_CREATED"
          - "TERM_BASE_CONCEPT_UPDATED"
          - "TERM_BASE_CONCEPT_DELETED"
          - "TERM_BASE_IMPORTED"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/WebhookPreviewsDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/webhooks/{webHookUid}:
    get:
      tags:
      - "Webhook"
      summary: "Get webhook"
      description: ""
      operationId: "getWebHookV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "webHookUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/WebHookDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Webhook"
      summary: "Edit webhook"
      description: ""
      operationId: "updateWebHookV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "webHookUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateWebHookDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/WebHookDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    delete:
      tags:
      - "Webhook"
      summary: "Delete webhook"
      description: ""
      operationId: "deleteWebHookV2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "webHookUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "204":
          description: "No Content"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v2/webhooks/{webhookUid}/test:
    post:
      tags:
      - "Webhook"
      summary: "Send test webhook"
      description: ""
      operationId: "sendTestWebhook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "webhookUid"
        in: "path"
        description: "UID of the webhook"
        required: true
        type: "string"
      - name: "event"
        in: "query"
        description: "Event of test webhook"
        required: true
        type: "string"
        enum:
        - "JOB_STATUS_CHANGED"
        - "JOB_CREATED"
        - "JOB_DELETED"
        - "JOB_UNSHARED"
        - "JOB_ASSIGNED"
        - "JOB_DUE_DATE_CHANGED"
        - "JOB_UPDATED"
        - "JOB_TARGET_UPDATED"
        - "JOB_EXPORTED"
        - "JOB_UNEXPORTED"
        - "JOB_AUTO_LQA_FINISHED"
        - "JOB_METADATA_UPDATED"
        - "JOB_CUSTOM_FIELDS_UPDATED"
        - "PROJECT_CREATED"
        - "PROJECT_DELETED"
        - "PROJECT_UNSHARED"
        - "PROJECT_STATUS_CHANGED"
        - "PROJECT_DUE_DATE_CHANGED"
        - "SHARED_PROJECT_ASSIGNED"
        - "PROJECT_METADATA_UPDATED"
        - "PRE_TRANSLATION_FINISHED"
        - "ANALYSIS_CREATED"
        - "CONTINUOUS_JOB_UPDATED"
        - "PROJECT_TEMPLATE_CREATED"
        - "PROJECT_TEMPLATE_UPDATED"
        - "PROJECT_TEMPLATE_DELETED"
        - "RAW_MT_CONVERTER_IMPORT_FINISHED"
        - "RAW_MT_PRE_TRANSLATION_FINISHED"
        - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
        - "TERM_BASE_TERM_CREATED"
        - "TERM_BASE_TERM_UPDATED"
        - "TERM_BASE_TERM_DELETED"
        - "TERM_BASE_CONCEPT_CREATED"
        - "TERM_BASE_CONCEPT_UPDATED"
        - "TERM_BASE_CONCEPT_DELETED"
        - "TERM_BASE_IMPORTED"
      responses:
        "201":
          description: "Test webhook sent"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/analyses/{analyseUid}:
    get:
      tags:
      - "Analysis"
      summary: "Get analysis"
      description: "\nThis API endpoint retrieves analysis results, encompassing basic\
        \ information about the analysis, such as its name,\nassigned provider,\n\
        [net rate scheme](https://support.phrase.com/hc/en-us/articles/5709665578908-Net-Rate-Schemes-TMS-),\n\
        [Analysis settings](https://support.phrase.com/hc/en-us/articles/5709712007708-Analysis-TMS-)\
        \ settings and a subset of\n[Get project](#operation/getProject) information\
        \ for the project the analysis belongs to.\n\nThe analysis results consist\
        \ of each analyzed language, presented as an item within the `analyseLanguageParts`\
        \ array.\nEach of these items contains details regarding the analyzed\n[jobs](https://support.phrase.com/hc/en-us/articles/5709686763420-Jobs-TMS-),\n\
        [translation memories](https://support.phrase.com/hc/en-us/articles/5709688865692-Translation-Memories-Overview)\n\
        and the resultant data.\n\nThe analysis results are divided into two sections:\n\
        \n- `data` stores the raw numbers,\n- `discountedData` recalculates the raw\
        \ numbers using the selected net rate scheme.\n\nSimilar to the UI, both raw\
        \ and net numbers are categorized based on their source into TM, MT, and NT\
        \ categories,\nincluding repetitions where applicable. These categories are\
        \ then further subdivided based on the match score.\n"
      operationId: "getAnalyseV3"
      produces:
      - "application/json"
      parameters:
      - name: "analyseUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnalyseV3Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/auth/login:
    post:
      tags:
      - "Authentication"
      summary: "Login"
      description: ""
      operationId: "loginV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginV3Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponseV3Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/auth/loginOther:
    post:
      tags:
      - "Authentication"
      summary: "Login as another user"
      description: "Available only for admin"
      operationId: "loginOtherV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginOtherV3Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginResponseV3Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/auth/loginToSession:
    post:
      tags:
      - "Authentication"
      summary: "Login to session"
      description: ""
      operationId: "loginToSession_2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/LoginToSessionV3Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginToSessionResponseV3Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/jobs:
    patch:
      tags:
      - "Job"
      summary: "Edit jobs (with possible partial updates)"
      description: "Allows partial update, not breaking whole batch if single job\
        \ fails and returns list of errors"
      operationId: "patchUpdateJobParts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobPartPatchBatchDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobPartPatchResultDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/jobs/{jobUid}/conversations/plains:
    post:
      tags:
      - "Conversations"
      summary: "Create plain conversation"
      description: ""
      operationId: "createSegmentTargetConversationV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreatePlainConversationDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/PlainConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/jobs/{jobUid}/conversations/plains/{conversationId}/comments:
    post:
      tags:
      - "Conversations"
      summary: "Add plain comment"
      description: ""
      operationId: "addPlainCommentV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddCommentDto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/AddPlainCommentResultDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/jobs/{jobUid}/conversations/plains/{conversationId}/comments/{commentId}:
    put:
      tags:
      - "Conversations"
      summary: "Edit plain comment"
      description: ""
      operationId: "updatePlainCommentV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - name: "conversationId"
        in: "path"
        required: true
        type: "string"
      - name: "commentId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddCommentDto"
      responses:
        "202":
          description: "Updated"
          schema:
            $ref: "#/definitions/PlainConversationDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projectTemplates/{projectTemplateUid}/transMemories:
    get:
      tags:
      - "Project Template"
      - "Translation Memory"
      summary: "Get translation memories"
      description: ""
      operationId: "getProjectTemplateTransMemories_2"
      produces:
      - "application/json"
      parameters:
      - name: "targetLang"
        in: "query"
        description: "Filter project translation memories by target language"
        required: false
        type: "string"
      - name: "wfStepUid"
        in: "query"
        description: "Filter project translation memories by workflow step"
        required: false
        type: "string"
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectTemplateTransMemoryListDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects:
    post:
      tags:
      - "Project"
      summary: "Create project"
      description: ""
      operationId: "createProjectV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/CreateProjectV3Dto"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/AbstractProjectDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}:
    put:
      tags:
      - "Project"
      summary: "Edit project"
      description: ""
      operationId: "editProjectV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EditProjectV3Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AbstractProjectDtoV2"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/analyses:
    get:
      tags:
      - "Project"
      - "Analysis"
      summary: "List analyses by project"
      description: ""
      operationId: "listByProjectV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Name to search by"
        required: false
        type: "string"
      - name: "uid"
        in: "query"
        description: "Uid to search by"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        description: "Page size, accepts values between 1 and 50, default 50"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "sort"
        in: "query"
        description: "Sorting field"
        required: false
        type: "string"
        default: "DATE_CREATED"
        enum:
        - "DATE_CREATED"
        - "INNER_ID"
      - name: "order"
        in: "query"
        description: "Sorting order"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      - name: "onlyOwnerOrg"
        in: "query"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAnalyseReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/export:
    post:
      tags:
      - "Job"
      summary: "Export jobs to online repository"
      description: ""
      operationId: "exportToOnlineRepository"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/JobExportActionDto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/JobExportResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/preTranslate:
    post:
      tags:
      - "Translation"
      summary: "Pre-translate job"
      description: ""
      operationId: "preTranslateV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PreTranslateJobsV3Dto"
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/AsyncRequestWrapperV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/qualityAssurances/run:
    post:
      tags:
      - "Quality Assurance"
      summary: "Run quality assurance (batch)"
      description: "Call \"Get QA settings\" endpoint to get the list of enabled QA\
        \ checks"
      operationId: "runQaForJobPartsV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/QualityAssuranceBatchRunDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/qualityAssurances/segments/run:
    post:
      tags:
      - "Quality Assurance"
      summary: "Run quality assurance on selected segments"
      description: "By default runs only fast running checks. Source and target language\
        \ of jobs have to match."
      operationId: "runQaForSegmentsV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/QualityAssuranceSegmentsRunDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/{jobUid}/analyses:
    get:
      tags:
      - "Analysis"
      - "Job"
      summary: "List analyses"
      description: ""
      operationId: "listPartAnalyseV3"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        default: 50
        maximum: 50
        minimum: 1
        format: "int32"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PageDtoAnalyseReference"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/run:
    post:
      tags:
      - "Quality Assurance"
      summary: "Run quality assurance"
      description: "Call \"Get QA settings\" endpoint to get the list of enabled QA\
        \ checks"
      operationId: "runQaForJobPartV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/QualityAssuranceRunDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/{jobUid}/targetFile:
    put:
      tags:
      - "Job"
      summary: "Download target file (async)"
      description: "\nThis call initiates an asynchronous request to generate and\
        \ download the target file containing translations.\nThis request covers jobs\
        \ created via actions like 'split jobs', ensuring accessibility even for such\
        \ cases.\n\nTo monitor the status of this asynchronous request, you have three\
        \ options:\n1. Use [Get asynchronous request](#operation/getAsyncRequest).\n\
        2. Search for the asyncRequestId by utilizing [List pending requests](#operation/listPendingRequests).\n\
        3. Use callbackUrl to get notification that operation was finished\n\nIn contrast\
        \ to the previous version (v1) of this call, v2 does not directly provide\
        \ the target file within the response.\nOnce the asynchronous request is completed,\
        \ you can download the target file using\n[Download target file based on async\
        \ request](#operation/downloadCompletedFile).\n\n_Note_: The asyncRequestId\
        \ can be used only once. Once the download is initiated through `Download\
        \ target file based on\nasync request`, the asyncRequestId becomes invalid\
        \ for further use.\n"
      operationId: "completedFileV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DownloadTargetFileDto"
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/AsyncRequestWrapperV2Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/{jobUid}/transMemories/search:
    post:
      tags:
      - "Job"
      - "Translation Memory"
      summary: "Search job's translation memories"
      description: ""
      operationId: "searchByJob3"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SearchTMByJobRequestDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponseListTmDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/jobs/{jobUid}/transMemories/wildCardSearch:
    post:
      tags:
      - "Job"
      - "Translation Memory"
      summary: "Wildcard search job's translation memories"
      description: ""
      operationId: "wildCardSearchByJob3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/WildCardSearchByJobRequestDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SearchResponseListTmDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/projects/{projectUid}/transMemories:
    get:
      tags:
      - "Project"
      summary: "Get translation memories"
      description: ""
      operationId: "getProjectTransMemoriesV3"
      produces:
      - "application/json"
      parameters:
      - name: "targetLang"
        in: "query"
        description: "Filter project translation memories by target language"
        required: false
        type: "string"
      - name: "wfStepUid"
        in: "query"
        description: "Filter project translation memories by workflow step"
        required: false
        type: "string"
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectTransMemoryListDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Edit translation memories"
      description: "If user wants to edit “All target languages” or \"All workflow\
        \ steps”, \n                       but there are already varied TM settings\
        \ for individual languages or steps, \n                       then the user\
        \ risks to overwrite these individual choices."
      operationId: "setProjectTransMemoriesV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SetProjectTransMemoriesV3Dto"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectTransMemoryListDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/users:
    post:
      tags:
      - "User"
      summary: "Create user"
      description: ""
      operationId: "createUserV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AbstractUserCreateDto"
      - name: "sendInvitation"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/UserDetailsDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/users/{userUid}:
    get:
      tags:
      - "User"
      summary: "Get user"
      description: ""
      operationId: "getUserV3"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserDetailsDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "User"
      summary: "Edit user"
      description: ""
      operationId: "updateUserV3"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AbstractUserEditDto"
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserDetailsDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v3/users/{userUid}/disableTwoFactorAuth:
    post:
      tags:
      - "User"
      summary: "Disable two-factor authentication"
      description: ""
      operationId: "disableTwoFactorAuthV3"
      produces:
      - "application/json"
      parameters:
      - name: "userUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserDetailsDtoV3"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projectTemplates/{projectTemplateUid}/preTranslateSettings:
    get:
      tags:
      - "Project Template"
      summary: "Get project template pre-translate settings"
      description: ""
      operationId: "getProjectTemplatePreTranslateSettingsV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PreTranslateSettingsV4Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project Template"
      summary: "Update project template pre-translate settings"
      description: ""
      operationId: "updateProjectTemplatePreTranslateSettingsV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectTemplateUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PreTranslateSettingsV4Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PreTranslateSettingsV4Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projects/{projectUid}/jobs/qualityAssurances/run:
    post:
      tags:
      - "Quality Assurance"
      summary: "Run quality assurance (batch)"
      description: "Call \"Get QA settings\" endpoint to get the list of enabled QA\
        \ checks"
      operationId: "runQaForJobPartsV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/QualityAssuranceBatchRunDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projects/{projectUid}/jobs/qualityAssurances/segments/run:
    post:
      tags:
      - "Quality Assurance"
      summary: "Run quality assurance on selected segments"
      description: "By default runs only fast running checks. Source and target language\
        \ of jobs have to match."
      operationId: "runQaForSegmentsV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/QualityAssuranceSegmentsRunDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projects/{projectUid}/jobs/qualityAssurances/segments/{segmentId}/runWithUpdate:
    post:
      tags:
      - "Quality Assurance"
      - "Bilingual File"
      summary: "Run quality assurance on selected segments and save segments"
      description: "By default runs only fast running checks."
      operationId: "runQaAndSaveV4"
      consumes:
      - "application/octet-stream"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/InputStream"
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "segmentId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projects/{projectUid}/jobs/qualityAssurances/settings:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get QA settings for project"
      description: "Returns enabled quality assurance checks and settings."
      operationId: "getQaSettingsForProjectV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceChecksDtoV4"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/run:
    post:
      tags:
      - "Quality Assurance"
      summary: "Run quality assurance"
      description: "Call \"Get QA settings\" endpoint to get the list of enabled QA\
        \ checks"
      operationId: "runQaForJobPartV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/QualityAssuranceRunDtoV3"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceResponseDto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projects/{projectUid}/jobs/{jobUid}/qualityAssurances/settings:
    get:
      tags:
      - "Quality Assurance"
      summary: "Get QA settings for job part"
      description: "Returns enabled quality assurance checks and settings for job."
      operationId: "getQaSettingsForJobPartV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - name: "jobUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/QualityAssuranceChecksDtoV4"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
  /api2/v4/projects/{projectUid}/preTranslateSettings:
    get:
      tags:
      - "Project"
      summary: "Get project pre-translate settings"
      description: ""
      operationId: "getProjectPreTranslateSettingsV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PreTranslateSettingsV4Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
    put:
      tags:
      - "Project"
      summary: "Update project pre-translate settings"
      description: ""
      operationId: "updateProjectPreTranslateSettingsV4"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectUid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/PreTranslateSettingsV4Dto"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PreTranslateSettingsV4Dto"
        "415":
          description: "Unsupported media type"
        "400":
          description: "Bad request"
        "500":
          description: "Internal server error"
        "404":
          description: "Resource not found"
        "401":
          description: "Not authorized"
        "403":
          description: "Forbidden"
        "410":
          description: "Gone"
        "408":
          description: "Timeout"
        "405":
          description: "Method not allowed"
        "501":
          description: "Not implemented"
        "429":
          description: "Too many requests"
securityDefinitions:
  ApiToken:
    description: "Get a token from `auth/login` [endpoint](#operation/login) and then\
      \ pass it in the `Authorization` HTTP header in every subsequent API call. For\
      \ more information visit our [help center](https://support.phrase.com/hc/en-us/articles/5709662181404-API-Authentication-TMS-#token-0-0)."
    type: "apiKey"
    name: "Authorization"
    in: "header"
  OAuth2:
    description: "A standard OAuth 2.0 authorization code flow. For more information\
      \ visit our [help center](https://support.phrase.com/hc/en-us/articles/5709662181404-API-Authentication-TMS-#oauth-2-0-0-1)."
    type: "oauth2"
    authorizationUrl: "https://cloud.memsource.com/web/oauth/authorize"
    tokenUrl: "https://cloud.memsource.com/web/oauth/token"
    flow: "accessCode"
definitions:
  ADMIN:
    allOf:
    - $ref: "#/definitions/AbstractUserCreateDto"
    - type: "object"
      properties: {}
  ADMIN_EDIT:
    allOf:
    - $ref: "#/definitions/AbstractUserEditDto"
    - type: "object"
      properties: {}
  ADMIN_RESPONSE:
    allOf:
    - $ref: "#/definitions/UserDetailsDtoV3"
    - type: "object"
      properties: {}
  AbsoluteTranslationLengthWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        limit:
          type: "string"
  AbstractAnalyseSettingsDto:
    type: "object"
    discriminator: "type"
    properties:
      type:
        type: "string"
        description: "Response differs based on analyse type"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "PreAnalyseTarget"
        - "Compare"
      includeConfirmedSegments:
        type: "boolean"
        description: "Default: false"
      includeNotConfirmedSegments:
        type: "boolean"
        description: "Default: false"
      includeNumbers:
        type: "boolean"
        description: "Default: false"
      includeLockedSegments:
        type: "boolean"
        description: "Default: false"
      countSourceUnits:
        type: "boolean"
        description: "Default: false"
      includeTransMemory:
        type: "boolean"
        description: "Default: false"
      namingPattern:
        type: "string"
      analyzeByLanguage:
        type: "boolean"
        description: "Default: false"
      analyzeByProvider:
        type: "boolean"
        description: "Default: false"
      allowAutomaticPostAnalysis:
        type: "boolean"
        description: "If automatic post analysis should be created after update source.\
          \ Default: false"
    description: "Base analyseSettingsDto"
  AbstractProjectDto:
    type: "object"
    discriminator: "userRole"
    properties:
      uid:
        type: "string"
      internalId:
        type: "integer"
        format: "int32"
      id:
        type: "string"
      name:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      owner:
        $ref: "#/definitions/UserReference"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      references:
        type: "array"
        items:
          $ref: "#/definitions/ReferenceFileReference"
      mtSettingsPerLanguageList:
        type: "array"
        items:
          $ref: "#/definitions/MTSettingsPerLanguageReference"
      userRole:
        type: "string"
        description: "Response differs based on user's role"
        readOnly: true
    description: "Base projectDto"
  AbstractProjectDtoV2:
    type: "object"
    discriminator: "userRole"
    properties:
      uid:
        type: "string"
      internalId:
        type: "integer"
        format: "int32"
      id:
        type: "string"
      name:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      owner:
        $ref: "#/definitions/UserReference"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      references:
        type: "array"
        items:
          $ref: "#/definitions/ReferenceFileReference"
      mtSettingsPerLanguageList:
        type: "array"
        items:
          $ref: "#/definitions/MTSettingsPerLanguageReference"
      status:
        type: "string"
        enum:
        - "NEW"
        - "ASSIGNED"
        - "COMPLETED"
        - "ACCEPTED_BY_VENDOR"
        - "DECLINED_BY_VENDOR"
        - "COMPLETED_BY_VENDOR"
        - "CANCELLED"
      userRole:
        type: "string"
        description: "Response differs based on user's role"
        readOnly: true
    description: "Base projectDto"
  AbstractUserCreateDto:
    type: "object"
    required:
    - "email"
    - "firstName"
    - "lastName"
    - "role"
    - "timezone"
    - "userName"
    discriminator: "role"
    properties:
      userName:
        type: "string"
        minLength: 0
        maxLength: 255
      firstName:
        type: "string"
        minLength: 0
        maxLength: 255
      lastName:
        type: "string"
        minLength: 0
        maxLength: 255
      email:
        type: "string"
        minLength: 0
        maxLength: 255
      password:
        type: "string"
        description: "Will be ignored if sendInvitation parameter is set to true"
        minLength: 0
        maxLength: 255
      role:
        type: "string"
        description: "Enum: \"ADMIN\", \"PROJECT_MANAGER\", \"LINGUIST\", \"GUEST\"\
          , \"SUBMITTER\", \"PORTAL_MEMBER\""
        enum:
        - "SYS_ADMIN"
        - "SYS_ADMIN_READ"
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      timezone:
        type: "string"
        minLength: 0
        maxLength: 255
      receiveNewsletter:
        type: "boolean"
        description: "Default: true"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      active:
        type: "boolean"
        description: "Default: true"
  AbstractUserEditDto:
    type: "object"
    required:
    - "email"
    - "firstName"
    - "lastName"
    - "role"
    - "timezone"
    - "userName"
    discriminator: "role"
    properties:
      userName:
        type: "string"
        minLength: 0
        maxLength: 255
      firstName:
        type: "string"
        minLength: 0
        maxLength: 255
      lastName:
        type: "string"
        minLength: 0
        maxLength: 255
      email:
        type: "string"
        minLength: 0
        maxLength: 255
      role:
        type: "string"
        description: "Enum: \"ADMIN\", \"PROJECT_MANAGER\", \"LINGUIST\", \"GUEST\"\
          , \"SUBMITTER\", \"PORTAL_MEMBER\""
        enum:
        - "SYS_ADMIN"
        - "SYS_ADMIN_READ"
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      timezone:
        type: "string"
        minLength: 0
        maxLength: 255
      receiveNewsletter:
        type: "boolean"
        description: "Default: true"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      active:
        type: "boolean"
        description: "Default: true"
  AccuracyWeightsDto:
    type: "object"
    properties:
      accuracy:
        $ref: "#/definitions/ToggleableWeightDto"
      addition:
        $ref: "#/definitions/ToggleableWeightDto"
      omission:
        $ref: "#/definitions/ToggleableWeightDto"
      mistranslation:
        $ref: "#/definitions/ToggleableWeightDto"
      underTranslation:
        $ref: "#/definitions/ToggleableWeightDto"
      untranslated:
        $ref: "#/definitions/ToggleableWeightDto"
      improperTmMatch:
        $ref: "#/definitions/ToggleableWeightDto"
      overTranslation:
        $ref: "#/definitions/ToggleableWeightDto"
  AddCommentDto:
    type: "object"
    required:
    - "text"
    properties:
      text:
        type: "string"
  AddLqaCommentResultDto:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ID of created comment"
      conversation:
        description: "LQA Conversation"
        $ref: "#/definitions/LQAConversationDto"
  AddPlainCommentResultDto:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ID of created comment"
      conversation:
        description: "Conversation"
        $ref: "#/definitions/PlainConversationDto"
  AddTargetLangDto:
    type: "object"
    properties:
      targetLangs:
        type: "array"
        items:
          type: "string"
        maxItems: 2147483647
        minItems: 1
  AddWorkflowStepsDto:
    type: "object"
    properties:
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
        maxItems: 2147483647
        minItems: 1
  AdditionalWorkflowStepDto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  AdditionalWorkflowStepRequestDto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the additional workflow step"
        minLength: 0
        maxLength: 255
  AdditionalWorkflowStepV2Dto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  Admin, Project Manager:
    allOf:
    - $ref: "#/definitions/AbstractProjectDto"
    - type: "object"
      properties:
        shared:
          type: "boolean"
          description: "Default: false"
        progress:
          $ref: "#/definitions/ProgressDto"
        client:
          $ref: "#/definitions/ClientReference"
        costCenter:
          $ref: "#/definitions/CostCenterReference"
        businessUnit:
          $ref: "#/definitions/BusinessUnitReference"
        dateDue:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          enum:
          - "NEW"
          - "ASSIGNED"
          - "COMPLETED"
          - "ACCEPTED_BY_VENDOR"
          - "DECLINED_BY_VENDOR"
          - "COMPLETED_BY_VENDOR"
          - "CANCELLED"
        purchaseOrder:
          type: "string"
        isPublishedOnJobBoard:
          type: "boolean"
          description: "Default: false"
        note:
          type: "string"
        createdBy:
          $ref: "#/definitions/UserReference"
        qualityAssuranceSettings:
          $ref: "#/definitions/ObjectReference"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/ProjectWorkflowStepDto"
        analyseSettings:
          $ref: "#/definitions/ObjectReference"
        accessSettings:
          $ref: "#/definitions/ObjectReference"
        financialSettings:
          $ref: "#/definitions/ObjectReference"
        projectWorkflowSettings:
          $ref: "#/definitions/ProjectWorkflowSettingsReference"
        archived:
          type: "boolean"
        dateArchived:
          type: "string"
          format: "date-time"
        archivedBy:
          $ref: "#/definitions/UserReference"
  Admin, Project Manager (v2):
    allOf:
    - $ref: "#/definitions/AbstractProjectDtoV2"
    - type: "object"
      properties:
        shared:
          type: "boolean"
          description: "Default: false"
        progress:
          $ref: "#/definitions/ProgressDtoV2"
        client:
          $ref: "#/definitions/ClientReference"
        costCenter:
          $ref: "#/definitions/CostCenterReference"
        businessUnit:
          $ref: "#/definitions/BusinessUnitReference"
        dateDue:
          type: "string"
          format: "date-time"
        purchaseOrder:
          type: "string"
        isPublishedOnJobBoard:
          type: "boolean"
          description: "Default: false"
        note:
          type: "string"
        createdBy:
          $ref: "#/definitions/UserReference"
        qualityAssuranceSettings:
          $ref: "#/definitions/ObjectReference"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/ProjectWorkflowStepDtoV2"
        analyseSettings:
          $ref: "#/definitions/ObjectReference"
        accessSettings:
          $ref: "#/definitions/ObjectReference"
        financialSettings:
          $ref: "#/definitions/ObjectReference"
        projectWorkflowSettings:
          $ref: "#/definitions/ProjectWorkflowSettingsReference"
  AnalyseJobDto:
    type: "object"
    properties:
      uid:
        type: "string"
      filename:
        type: "string"
      data:
        $ref: "#/definitions/DataDtoV1"
      discountedData:
        $ref: "#/definitions/DataDtoV1"
  AnalyseJobReference:
    type: "object"
    properties:
      uid:
        type: "string"
      filename:
        type: "string"
      innerId:
        type: "string"
  AnalyseLanguagePartDto:
    type: "object"
    properties:
      id:
        type: "string"
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      data:
        $ref: "#/definitions/DataDtoV1"
      discountedData:
        $ref: "#/definitions/DataDtoV1"
      jobs:
        type: "array"
        description: "Max of 100 jobs returned, use \"List jobs of analyses\" to get\
          \ all"
        items:
          $ref: "#/definitions/AnalyseJobReference"
  AnalyseLanguagePartReference:
    type: "object"
    properties:
      id:
        type: "string"
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      jobs:
        type: "array"
        description: "Max of 100 jobs returned, use \"List jobs of analyses\" to get\
          \ all"
        items:
          $ref: "#/definitions/AnalyseJobReference"
  AnalyseLanguagePartV2Dto:
    type: "object"
    properties:
      id:
        type: "string"
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      data:
        $ref: "#/definitions/DataDto"
      discountedData:
        $ref: "#/definitions/DataDto"
      jobs:
        type: "array"
        description: "Max of 100 jobs returned, use \"List jobs of analyses\" to get\
          \ all"
        items:
          $ref: "#/definitions/AnalyseJobReference"
  AnalyseLanguagePartV3Dto:
    type: "object"
    properties:
      id:
        type: "string"
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      data:
        $ref: "#/definitions/DataDto_2"
      discountedData:
        $ref: "#/definitions/DataDto_2"
      jobs:
        type: "array"
        description: "Max of 100 jobs returned, use \"List jobs of analyses\" to get\
          \ all"
        items:
          $ref: "#/definitions/AnalyseJobReference"
      transMemories:
        type: "array"
        items:
          $ref: "#/definitions/TransMemoryReferenceDtoV2"
  AnalyseRecalculateRequestDto:
    type: "object"
    required:
    - "analyses"
    properties:
      analyses:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
        maxItems: 100
        minItems: 1
      callbackUrl:
        type: "string"
  AnalyseRecalculateResponseDto:
    type: "object"
    properties:
      analyses:
        type: "array"
        items:
          $ref: "#/definitions/AsyncAnalyseResponseDto"
  AnalyseReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      innerId:
        type: "string"
      type:
        type: "string"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "PreAnalyseTarget"
        - "Compare"
        - "PreAnalyseProvider"
        - "ContinuousPostAnalyse"
        - "ContinuousPreAnalyse"
      name:
        type: "string"
      provider:
        $ref: "#/definitions/ProviderReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      netRateScheme:
        $ref: "#/definitions/NetRateSchemeReference"
      analyseLanguageParts:
        type: "array"
        items:
          $ref: "#/definitions/AnalyseLanguagePartReference"
      outdated:
        type: "boolean"
      importStatus:
        $ref: "#/definitions/ImportStatusDto"
      pureWarnings:
        type: "array"
        items:
          type: "string"
  AnalyseSettingsDto:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "PreAnalyseTarget"
        - "Compare"
      includeFuzzyRepetitions:
        type: "boolean"
        description: "Default: false"
      separateFuzzyRepetitions:
        type: "boolean"
        description: "Default: false"
      includeNonTranslatables:
        type: "boolean"
        description: "Default: false"
      includeMachineTranslationMatches:
        type: "boolean"
        description: "Default: false"
      includeConfirmedSegments:
        type: "boolean"
        description: "Default: false"
      includeNotConfirmedSegments:
        type: "boolean"
        description: "Default: false"
      includeNumbers:
        type: "boolean"
        description: "Default: false"
      includeLockedSegments:
        type: "boolean"
        description: "Default: false"
      countSourceUnits:
        type: "boolean"
        description: "Default: false"
      includeTransMemory:
        type: "boolean"
        description: "Default: false"
      namingPattern:
        type: "string"
      analyzeByLanguage:
        type: "boolean"
        description: "Default: false"
      analyzeByProvider:
        type: "boolean"
        description: "Default: false"
      allowAutomaticPostAnalysis:
        type: "boolean"
        description: "If automatic post analysis should be created after update source.\
          \ Default: false"
      transMemoryPostEditing:
        type: "boolean"
        description: "Default: false"
      nonTranslatablePostEditing:
        type: "boolean"
        description: "Default: false"
      machineTranslatePostEditing:
        type: "boolean"
        description: "Default: false"
  AnalyseV2Dto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      type:
        type: "string"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "PreAnalyseTarget"
        - "Compare"
        - "PreAnalyseProvider"
        - "ContinuousPostAnalyse"
        - "ContinuousPreAnalyse"
      name:
        type: "string"
      provider:
        $ref: "#/definitions/ProviderReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      netRateScheme:
        $ref: "#/definitions/NetRateSchemeReference"
      analyseLanguageParts:
        type: "array"
        items:
          $ref: "#/definitions/AnalyseLanguagePartV2Dto"
  AnalyseV3Dto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      innerId:
        type: "integer"
        format: "int32"
      type:
        type: "string"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "PreAnalyseTarget"
        - "Compare"
        - "PreAnalyseProvider"
        - "ContinuousPostAnalyse"
        - "ContinuousPreAnalyse"
      name:
        type: "string"
      provider:
        $ref: "#/definitions/ProviderReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      netRateScheme:
        $ref: "#/definitions/NetRateSchemeReference"
      canChangeNetRateScheme:
        type: "boolean"
      analyseLanguageParts:
        type: "array"
        items:
          $ref: "#/definitions/AnalyseLanguagePartV3Dto"
      settings:
        $ref: "#/definitions/AbstractAnalyseSettingsDto"
      outdated:
        type: "boolean"
      importStatus:
        $ref: "#/definitions/ImportStatusDto"
      pureWarnings:
        type: "array"
        items:
          type: "string"
      project:
        $ref: "#/definitions/ProjectReference"
  AnalysesV2Dto:
    type: "object"
    properties:
      analyses:
        type: "array"
        items:
          $ref: "#/definitions/AnalyseV2Dto"
  AndroidSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
      icuSubFilter:
        type: "boolean"
        description: "Default: `false`"
  AppleTokenResponseDto:
    type: "object"
    properties:
      access_token:
        type: "string"
      token_type:
        type: "string"
      expires_in:
        type: "string"
      refresh_token:
        type: "string"
      id_token:
        type: "string"
  AsciidocSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
      htmlInPassthrough:
        type: "boolean"
        description: "Default: `false`"
      nontranslatableMonospaceCustomStylesRegexp:
        type: "string"
      extractCustomDocumentAttributeNameRegexp:
        type: "string"
        description: "Default: `.*`"
      extractBtnMenuLabels:
        type: "boolean"
        description: "Default: `false`"
  AssessmentBasicDto:
    type: "object"
    properties:
      lqaProfile:
        description: "LQA profile used for issues flagging and score calculation"
        $ref: "#/definitions/LqaProfileAssessmentDto"
      startedDate:
        type: "string"
        format: "date-time"
        description: "When assessment started or empty if it was not yet"
    description: "Basic info about LQA assessment"
  AssessmentDetailDto:
    type: "object"
    properties:
      jobPartUid:
        type: "string"
        description: "UID of the corresponding job"
      assessmentJobPartUid:
        type: "string"
        description: "UID of job corresponding to the assessment. Null when assessment\
          \ not found"
      requestedJobPartUid:
        type: "string"
        description: "The originally requested job UID"
      workflowStep:
        $ref: "#/definitions/WorkflowStepDto"
      reportCanBeDownloaded:
        type: "boolean"
        description: "If Assessment report/scorecard is ready and can be downloaded,\
          \ user's rights are considered"
      lqaEnabled:
        type: "boolean"
        description: "If LQA is enabled and configured for this job"
      availability:
        type: "string"
        enum:
        - "NOT_AVAILABLE"
        - "DISABLED_IN_ALL_WORKFLOW_STEPS"
        - "DISABLED_IN_CURRENT_WORKFLOW_STEP"
        - "ENABLED"
      lqaProfile:
        description: "LQA profile used for issues flagging and score calculation"
        $ref: "#/definitions/LqaProfileAssessmentDto"
      startedDate:
        type: "string"
        format: "date-time"
        description: "When assessment was started (or empty)"
      finishedDate:
        type: "string"
        format: "date-time"
        description: "When assessment was finished (or empty)"
      editedDate:
        type: "string"
        format: "date-time"
        description: "When assessment was edited after previous finish (or empty)"
      assessmentResult:
        description: "Scoring results if assessment was finished"
        $ref: "#/definitions/AssessmentResultDto"
      overallFeedback:
        type: "string"
        description: "Overall feedback from the LQA reviewer"
      translationProvider:
        $ref: "#/definitions/UidReference"
      reviewProvider:
        $ref: "#/definitions/ReviewProviderDto"
      origin:
        type: "string"
        enum:
        - "HUMAN"
        - "AI"
      mode:
        type: "string"
        enum:
        - "ISSUES"
        - "ISSUES_AND_SCORE"
      status:
        type: "string"
        enum:
        - "NOT_STARTED"
        - "STARTED"
        - "FINISHED"
        - "FINISHED_WITH_EDITING"
        - "EDITED"
    description: "LQA assessment state"
  AssessmentDetailsDto:
    type: "object"
    properties:
      assessmentDetails:
        type: "array"
        items:
          $ref: "#/definitions/AssessmentDetailDto"
  AssessmentRequestDto:
    type: "object"
    required:
    - "jobParts"
    properties:
      jobParts:
        type: "array"
        description: "UIDs of the corresponding job parts"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
  AssessmentResultDto:
    type: "object"
    properties:
      jobPart:
        description: "Assessed JobPart"
        $ref: "#/definitions/UidReference"
      status:
        type: "string"
        description: "Result based on score and configured threshold"
        enum:
        - "PASS"
        - "FAIL"
      score:
        type: "number"
        format: "double"
        description: "LQA score in percentage"
      issueCounts:
        description: "Sums of issues from each error category"
        $ref: "#/definitions/IssueCountsDto"
  AssessmentResultsDto:
    type: "object"
    required:
    - "results"
    properties:
      results:
        type: "array"
        items:
          $ref: "#/definitions/AssessmentResultDto"
  AssignVendorDto:
    type: "object"
    properties:
      vendor:
        $ref: "#/definitions/IdReference"
      dateDue:
        type: "string"
        format: "date-time"
  AssignableTemplatesDto:
    type: "object"
    properties:
      assignableTemplates:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateDto"
  AssignedJobDto:
    type: "object"
    properties:
      uid:
        type: "string"
      innerId:
        type: "string"
      filename:
        type: "string"
      dateDue:
        type: "string"
        format: "date-time"
      dateCreated:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      targetLang:
        type: "string"
      sourceLang:
        type: "string"
      project:
        $ref: "#/definitions/ProjectReference"
      workflowStep:
        $ref: "#/definitions/ProjectWorkflowStepReference"
      importStatus:
        $ref: "#/definitions/ImportStatusDto"
      imported:
        type: "boolean"
  AssignmentPerTargetLangDto:
    type: "object"
    properties:
      targetLang:
        type: "string"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
  AsyncAnalyseListResponseDto:
    type: "object"
    properties:
      analyses:
        type: "array"
        items:
          $ref: "#/definitions/AsyncAnalyseResponseDto"
  AsyncAnalyseListResponseV2Dto:
    type: "object"
    properties:
      asyncRequests:
        type: "array"
        items:
          $ref: "#/definitions/AsyncAnalyseResponseV2Dto"
  AsyncAnalyseResponseDto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/AsyncRequestDto"
      analyse:
        $ref: "#/definitions/ObjectReference"
  AsyncAnalyseResponseV2Dto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/AsyncRequestV2Dto"
      analyse:
        $ref: "#/definitions/ObjectReference"
  AsyncExportTMByQueryDto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/ObjectReference"
      transMemory:
        $ref: "#/definitions/ObjectReference"
      exportTargetLangs:
        type: "array"
        items:
          type: "string"
      queries:
        type: "array"
        items:
          $ref: "#/definitions/Query"
  AsyncExportTMByQueryResponseDto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/AsyncRequestDto"
      asyncExport:
        $ref: "#/definitions/AsyncExportTMByQueryDto"
  AsyncExportTMDto:
    type: "object"
    properties:
      transMemory:
        $ref: "#/definitions/ObjectReference"
      exportTargetLangs:
        type: "array"
        items:
          type: "string"
  AsyncExportTMResponseDto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/AsyncRequestV2Dto"
      asyncExport:
        $ref: "#/definitions/AsyncExportTMDto"
  AsyncFileOpResponseDto:
    type: "object"
    properties:
      id:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      fileName:
        type: "string"
      action:
        type: "string"
        enum:
        - "GUI_UPLOAD"
        - "GUI_DOWNLOAD"
        - "GUI_REIMPORT"
        - "GUI_REIMPORT_TARGET"
        - "CJ_UPLOAD"
        - "CJ_DOWNLOAD"
        - "APC_UPLOAD"
        - "APC_DOWNLOAD"
        - "API_UPLOAD"
        - "API_DOWNLOAD"
        - "SUBMITTER_PORTAL_DOWNLOAD"
  AsyncRequestDto:
    type: "object"
    properties:
      id:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      action:
        type: "string"
        enum:
        - "PRE_ANALYSE"
        - "POST_ANALYSE"
        - "CONTINUOUS_PRE_ANALYSE"
        - "CONTINUOUS_POST_ANALYSE"
        - "COMPARE_ANALYSE"
        - "PARENT_ANALYSE"
        - "PRE_TRANSLATE"
        - "ASYNC_TRANSLATE"
        - "IMPORT_JOB"
        - "IMPORT_FILE"
        - "ALIGN"
        - "EXPORT_TMX_BY_QUERY"
        - "EXPORT_TMX"
        - "IMPORT_TMX"
        - "IMPORT_MXLF_INTO_TM"
        - "IMPORT_TBX"
        - "INSERT_INTO_TM"
        - "DELETE_TM"
        - "CLEAR_TM"
        - "QA"
        - "QA_V3"
        - "UPDATE_CONTINUOUS_JOB"
        - "UPDATE_SOURCE"
        - "UPDATE_TARGET"
        - "EXTRACT_CLEANED_TMS"
        - "GLOSSARY_PUT"
        - "GLOSSARY_DELETE"
        - "CREATE_PROJECT"
        - "EXPORT_COMPLETE_FILE"
        - "IMPORT_ANNOTATIONS"
        - "FILE_FLOW_CONVERTER_IMPORT"
        - "FILE_FLOW_MT_PRETRANSLATE"
        - "FILE_FLOW_QUALITY_ESTIMATION"
        - "AUTO_LQA"
      asyncResponse:
        $ref: "#/definitions/AsyncResponseDto"
      parent:
        $ref: "#/definitions/AsyncRequestDto"
      project:
        $ref: "#/definitions/ProjectReference"
  AsyncRequestReference:
    type: "object"
    properties:
      id:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      action:
        type: "string"
        enum:
        - "PRE_ANALYSE"
        - "POST_ANALYSE"
        - "CONTINUOUS_PRE_ANALYSE"
        - "CONTINUOUS_POST_ANALYSE"
        - "COMPARE_ANALYSE"
        - "PARENT_ANALYSE"
        - "PRE_TRANSLATE"
        - "ASYNC_TRANSLATE"
        - "IMPORT_JOB"
        - "IMPORT_FILE"
        - "ALIGN"
        - "EXPORT_TMX_BY_QUERY"
        - "EXPORT_TMX"
        - "IMPORT_TMX"
        - "IMPORT_MXLF_INTO_TM"
        - "IMPORT_TBX"
        - "INSERT_INTO_TM"
        - "DELETE_TM"
        - "CLEAR_TM"
        - "QA"
        - "QA_V3"
        - "UPDATE_CONTINUOUS_JOB"
        - "UPDATE_SOURCE"
        - "UPDATE_TARGET"
        - "EXTRACT_CLEANED_TMS"
        - "GLOSSARY_PUT"
        - "GLOSSARY_DELETE"
        - "CREATE_PROJECT"
        - "EXPORT_COMPLETE_FILE"
        - "IMPORT_ANNOTATIONS"
        - "FILE_FLOW_CONVERTER_IMPORT"
        - "FILE_FLOW_MT_PRETRANSLATE"
        - "FILE_FLOW_QUALITY_ESTIMATION"
        - "AUTO_LQA"
  AsyncRequestReferenceDto:
    type: "object"
    properties:
      uid:
        type: "string"
        description: "UID of the object"
      type:
        type: "string"
        description: "Type of the object"
        enum:
        - "JOB"
    description: "Reference object that is being processed by async request"
  AsyncRequestStatusDto:
    type: "object"
    properties:
      concurrentRequests:
        description: "Current count of running requests and the allowed limit"
        $ref: "#/definitions/ConcurrentRequestsDto"
  AsyncRequestV2Dto:
    type: "object"
    properties:
      id:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      action:
        type: "string"
        enum:
        - "PRE_ANALYSE"
        - "POST_ANALYSE"
        - "CONTINUOUS_PRE_ANALYSE"
        - "CONTINUOUS_POST_ANALYSE"
        - "COMPARE_ANALYSE"
        - "PARENT_ANALYSE"
        - "PRE_TRANSLATE"
        - "ASYNC_TRANSLATE"
        - "IMPORT_JOB"
        - "IMPORT_FILE"
        - "ALIGN"
        - "EXPORT_TMX_BY_QUERY"
        - "EXPORT_TMX"
        - "IMPORT_TMX"
        - "IMPORT_MXLF_INTO_TM"
        - "IMPORT_TBX"
        - "INSERT_INTO_TM"
        - "DELETE_TM"
        - "CLEAR_TM"
        - "QA"
        - "QA_V3"
        - "UPDATE_CONTINUOUS_JOB"
        - "UPDATE_SOURCE"
        - "UPDATE_TARGET"
        - "EXTRACT_CLEANED_TMS"
        - "GLOSSARY_PUT"
        - "GLOSSARY_DELETE"
        - "CREATE_PROJECT"
        - "EXPORT_COMPLETE_FILE"
        - "IMPORT_ANNOTATIONS"
        - "FILE_FLOW_CONVERTER_IMPORT"
        - "FILE_FLOW_MT_PRETRANSLATE"
        - "FILE_FLOW_QUALITY_ESTIMATION"
        - "AUTO_LQA"
      asyncResponse:
        $ref: "#/definitions/AsyncResponseV2Dto"
      parent:
        $ref: "#/definitions/AsyncRequestV2Dto"
      project:
        $ref: "#/definitions/ProjectReference"
  AsyncRequestWrapperDto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/AsyncRequestDto"
  AsyncRequestWrapperV2Dto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/AsyncRequestV2Dto"
      reference:
        description: "Different depending on context of the action"
        $ref: "#/definitions/AsyncRequestReferenceDto"
  AsyncResponseDto:
    type: "object"
    properties:
      dateCreated:
        type: "string"
        format: "date-time"
      errorCode:
        type: "string"
      errorDesc:
        type: "string"
      errorDetails:
        type: "array"
        items:
          $ref: "#/definitions/ErrorDetailDto"
      warnings:
        type: "array"
        items:
          $ref: "#/definitions/ErrorDetailDto"
      acceptedSegmentsCount:
        type: "integer"
        format: "int64"
  AsyncResponseV2Dto:
    type: "object"
    properties:
      dateCreated:
        type: "string"
        format: "date-time"
      errorCode:
        type: "string"
      errorDesc:
        type: "string"
      errorDetails:
        type: "array"
        items:
          $ref: "#/definitions/ErrorDetailDtoV2"
      warnings:
        type: "array"
        items:
          $ref: "#/definitions/ErrorDetailDtoV2"
  Attribute:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "STRING"
        - "BOOLEAN"
        - "DECIMAL"
        - "INTEGER"
        - "DATE_TIME"
        - "BINARY"
        - "REFERENCE"
        - "COMPLEX"
      subAttributes:
        type: "array"
        items:
          $ref: "#/definitions/Attribute"
      multiValued:
        type: "boolean"
      description:
        type: "string"
      required:
        type: "boolean"
      caseExact:
        type: "boolean"
      mutability:
        type: "string"
        enum:
        - "READ_ONLY"
        - "READ_WRITE"
        - "IMMUTABLE"
        - "WRITE_ONLY"
      returned:
        type: "string"
        enum:
        - "ALWAYS"
        - "NEVER"
        - "DEFAULT"
        - "REQUEST"
      uniqueness:
        type: "string"
        enum:
        - "NONE"
        - "SERVER"
        - "GLOBAL"
  AuthSchema:
    type: "object"
    properties:
      type:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      specUrl:
        type: "string"
      primary:
        type: "boolean"
  AutomatedProjectSettingsDto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      organization:
        $ref: "#/definitions/NameDto"
      active:
        type: "boolean"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      connector:
        $ref: "#/definitions/NameDto"
      remoteFolder:
        type: "string"
  BackgroundTaskReference:
    type: "object"
    properties:
      errorCode:
        type: "string"
      errorMessage:
        type: "string"
      dataText:
        type: "string"
      status:
        type: "string"
  BackgroundTasksTbDto:
    type: "object"
    properties:
      status:
        type: "string"
      finishedDataText:
        type: "string"
      asyncRequest:
        $ref: "#/definitions/AsyncRequestDto"
      lastTaskString:
        type: "string"
      metadata:
        $ref: "#/definitions/MetadataResponse"
      lastTaskOk:
        type: "string"
      lastTaskError:
        type: "string"
      lastTaskErrorHtml:
        type: "string"
  BackgroundTasksTmDto:
    type: "object"
    properties:
      status:
        type: "string"
      finishedDataText:
        type: "string"
      asyncRequest:
        $ref: "#/definitions/AsyncRequestDto"
      lastTaskString:
        type: "string"
      metadata:
        $ref: "#/definitions/MetadataResponse_2"
      lastTaskOk:
        type: "string"
      lastTaskError:
        type: "string"
      lastTaskErrorHtml:
        type: "string"
  BrowseRequestDto:
    type: "object"
    properties:
      queryLang:
        type: "string"
      query:
        type: "string"
      status:
        type: "string"
      pageNumber:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 50
  BrowseResponseListDto:
    type: "object"
    properties:
      searchResults:
        type: "array"
        items:
          $ref: "#/definitions/ConceptDto"
  BulkDeleteAnalyseDto:
    type: "object"
    required:
    - "analyses"
    properties:
      analyses:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
        maxItems: 100
        minItems: 1
      purge:
        type: "boolean"
        description: "Default: false"
  BulkDeleteTmDto:
    type: "object"
    required:
    - "tms"
    properties:
      tms:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      purge:
        type: "boolean"
        description: "Default: false"
  BulkEditAnalyseV2Dto:
    type: "object"
    required:
    - "analyses"
    properties:
      analyses:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
        maxItems: 100
        minItems: 1
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      provider:
        $ref: "#/definitions/ProviderReference"
      netRateScheme:
        $ref: "#/definitions/UidReference"
  BusinessUnitDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
  BusinessUnitEditDto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
  BusinessUnitReference:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  BusinessUnitReference_2:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
  BusinessUnitReference_3:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  Buyer:
    allOf:
    - $ref: "#/definitions/AbstractProjectDto"
    - type: "object"
      properties:
        shared:
          type: "boolean"
          description: "Default: false"
        progress:
          $ref: "#/definitions/ProgressDto"
        client:
          $ref: "#/definitions/ClientReference"
        costCenter:
          $ref: "#/definitions/CostCenterReference"
        businessUnit:
          $ref: "#/definitions/BusinessUnitReference"
        dateDue:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          enum:
          - "NEW"
          - "ASSIGNED"
          - "COMPLETED"
          - "ACCEPTED_BY_VENDOR"
          - "DECLINED_BY_VENDOR"
          - "COMPLETED_BY_VENDOR"
          - "CANCELLED"
        purchaseOrder:
          type: "string"
        isPublishedOnJobBoard:
          type: "boolean"
          description: "Default: false"
        note:
          type: "string"
        createdBy:
          $ref: "#/definitions/UserReference"
        qualityAssuranceSettings:
          $ref: "#/definitions/ObjectReference"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/ProjectWorkflowStepDto"
        analyseSettings:
          $ref: "#/definitions/ObjectReference"
        accessSettings:
          $ref: "#/definitions/ObjectReference"
        financialSettings:
          $ref: "#/definitions/ObjectReference"
        projectWorkflowSettings:
          $ref: "#/definitions/ProjectWorkflowSettingsReference"
        archived:
          type: "boolean"
        dateArchived:
          type: "string"
          format: "date-time"
        archivedBy:
          $ref: "#/definitions/UserReference"
        vendorOwner:
          $ref: "#/definitions/USER"
        vendor:
          $ref: "#/definitions/VendorReference"
  BuyerDto:
    type: "object"
    properties:
      uid:
        type: "string"
      defaultProjectOwner:
        $ref: "#/definitions/UserReference_2"
      vendorOrganization:
        $ref: "#/definitions/OrganizationReference"
  BuyerEditDto:
    type: "object"
    properties:
      defaultProjectOwner:
        description: "Default Owner of projects must be Admin or PM"
        $ref: "#/definitions/IdReference"
  BuyerReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
  CheckResponse:
    type: "object"
    properties:
      text:
        type: "string"
      misspelledWords:
        type: "array"
        items:
          $ref: "#/definitions/MisspelledWord"
  CleanedTransMemoriesDto:
    type: "object"
    required:
    - "uids"
    properties:
      uids:
        type: "array"
        items:
          type: "string"
      outputFormat:
        type: "string"
        enum:
        - "TXT"
        - "TSV"
      preserveRatio:
        type: "number"
        minimum: 0.0
        maximum: 1.0
        exclusiveMinimum: true
        exclusiveMaximum: false
      targetLangs:
        type: "array"
        items:
          type: "string"
  CleanupTask:
    type: "object"
  ClientDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      externalId:
        type: "string"
      note:
        type: "string"
      displayNoteInProject:
        type: "boolean"
        description: "Default: false"
      priceList:
        $ref: "#/definitions/PriceListReference"
      netRateScheme:
        $ref: "#/definitions/NetRateSchemeReference"
      createdBy:
        $ref: "#/definitions/UserReference"
  ClientEditDto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      externalId:
        type: "string"
        minLength: 0
        maxLength: 255
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      displayNoteInProject:
        type: "boolean"
        description: "Default: false"
      priceList:
        $ref: "#/definitions/IdReference"
      netRateScheme:
        $ref: "#/definitions/IdReference"
  ClientReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
  ClientReference_3:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      note:
        type: "string"
  ClientReference_4:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
  CloneProjectDto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
  CommentDto:
    type: "object"
    properties:
      id:
        type: "string"
      text:
        type: "string"
      createdBy:
        $ref: "#/definitions/MentionableUserDto"
      dateCreated:
        type: "string"
        format: "date-time"
      dateModified:
        type: "string"
        format: "date-time"
      mentions:
        type: "array"
        items:
          $ref: "#/definitions/MentionDto"
  CommonConversationDto:
    type: "object"
    discriminator: "type"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        description: "Field references differs based on the Conversation Type."
      dateCreated:
        type: "string"
        format: "date-time"
      dateModified:
        type: "string"
        format: "date-time"
      dateEdited:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/MentionableUserDto"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/CommentDto"
      status:
        $ref: "#/definitions/StatusDto"
      deleted:
        type: "boolean"
  ComparedSegmentDto:
    type: "object"
    properties:
      uid:
        type: "string"
      state:
        type: "string"
        enum:
        - "Miss"
        - "Diff"
  ComparedSegmentsDto:
    type: "object"
    properties:
      segments:
        type: "array"
        items:
          $ref: "#/definitions/ComparedSegmentDto"
  ConceptDto:
    type: "object"
    properties:
      id:
        type: "string"
      writable:
        type: "boolean"
      terms:
        type: "array"
        items:
          type: "array"
          items:
            $ref: "#/definitions/TermDto"
  ConceptDtov2:
    type: "object"
    properties:
      id:
        type: "string"
      definition:
        type: "string"
      domain:
        type: "string"
      subDomains:
        type: "array"
        items:
          type: "string"
      url:
        type: "string"
      note:
        type: "string"
  ConceptEditDto:
    type: "object"
    properties:
      domain:
        $ref: "#/definitions/UidReference"
      subdomains:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      definition:
        type: "string"
      url:
        type: "string"
      conceptNote:
        type: "string"
  ConceptListReference:
    type: "object"
    required:
    - "concepts"
    properties:
      concepts:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
        maxItems: 100
        minItems: 1
  ConceptListResponseDto:
    type: "object"
    properties:
      concepts:
        type: "array"
        items:
          $ref: "#/definitions/ConceptWithMetadataDto"
      totalCount:
        type: "integer"
        format: "int64"
  ConceptWithMetadataDto:
    type: "object"
    properties:
      id:
        type: "string"
      domain:
        $ref: "#/definitions/DomainReference"
      subdomains:
        type: "array"
        items:
          $ref: "#/definitions/SubDomainReference"
      url:
        type: "string"
      definition:
        type: "string"
      conceptNote:
        type: "string"
  ConcurrentRequestsDto:
    type: "object"
    properties:
      limit:
        type: "integer"
        format: "int32"
        description: "Max number of allowed concurrent request, null value means no\
          \ limit"
      count:
        type: "integer"
        format: "int32"
        description: "Current count of running concurrent requests"
  ConnectorAsyncTaskStateDto:
    type: "object"
    properties:
      id:
        type: "string"
      jobUid:
        type: "string"
      status:
        type: "string"
        enum:
        - "NEW"
        - "SUCCESS"
        - "ERROR"
        - "CONVERTER_ERROR"
      taskType:
        type: "string"
        enum:
        - "DOWNLOAD"
        - "UPLOAD"
        - "REIMPORT"
        - "REIMPORT_TARGET"
      taskProcessingType:
        type: "string"
        enum:
        - "GUI"
        - "CJ"
        - "APC"
        - "API"
        - "SUBMITTER_PORTAL"
      jobFileName:
        type: "string"
      targetLang:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      dateProcessed:
        type: "string"
        format: "date-time"
      errorMessage:
        type: "string"
  ConnectorAsyncTaskStatesDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ConnectorAsyncTaskStateDto"
      sort:
        $ref: "#/definitions/Sort"
      successCount:
        type: "integer"
        format: "int32"
      errorCount:
        type: "integer"
        format: "int32"
      projectUid:
        type: "string"
      projectName:
        type: "string"
  ConnectorDto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "AEM_PLUGIN"
        - "AMAZON_S3"
        - "AZURE"
        - "BITBUCKET"
        - "BITBUCKETSERVER"
        - "BLUEPRINT"
        - "BOX"
        - "BRAZE"
        - "CONFLUENCE"
        - "CONTENTFUL"
        - "CONTENTFULENTRYLEVEL"
        - "CONTENTFUL2"
        - "CONTENTSTACK"
        - "DROPBOX"
        - "DRUPAL"
        - "DRUPAL_PLUGIN"
        - "FTP"
        - "GIT"
        - "GITHUB"
        - "GITLAB"
        - "GOOGLE"
        - "HELPSCOUT"
        - "HUBSPOT"
        - "JOOMLA"
        - "KENTICO"
        - "KENTICO_KONTENT"
        - "MAGENTO"
        - "MARKETO"
        - "ONEDRIVE"
        - "OPTIMIZELY"
        - "PARDOT"
        - "PHRASE"
        - "SALESFORCE"
        - "SFTP"
        - "SHAREPOINT"
        - "SITECORE"
        - "TRIDION"
        - "TYPO3"
        - "VERBIS"
        - "WORDPRESS"
        - "ZENDESK"
      organization:
        $ref: "#/definitions/NameDto"
      createdBy:
        $ref: "#/definitions/NameDto"
      createdAt:
        type: "string"
        format: "date-time"
      localToken:
        type: "string"
      automatedProjectSettings:
        type: "array"
        items:
          $ref: "#/definitions/AutomatedProjectSettingsDto"
  ConnectorErrorDetailDto:
    type: "object"
    properties:
      code:
        type: "string"
      message:
        type: "string"
      messageCode:
        type: "string"
      args:
        type: "object"
        additionalProperties:
          type: "object"
      skipPrefix:
        type: "boolean"
  ConnectorErrorsDto:
    type: "object"
    properties:
      errors:
        type: "array"
        items:
          $ref: "#/definitions/ConnectorErrorDetailDto"
  ConnectorListDto:
    type: "object"
    properties:
      connectors:
        type: "array"
        items:
          $ref: "#/definitions/ConnectorDto"
      totalCount:
        type: "integer"
        format: "int32"
  ContinuousJobInfoDto:
    type: "object"
    properties:
      dateUpdated:
        type: "string"
        format: "date-time"
  ConversationListDto:
    type: "object"
    properties:
      conversations:
        type: "array"
        items:
          $ref: "#/definitions/CommonConversationDto"
  CostCenterDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
  CostCenterEditDto:
    type: "object"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
  CostCenterReference:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  CostCenterReference_2:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
  CountsDto:
    type: "object"
    properties:
      segments:
        type: "number"
        format: "double"
      words:
        type: "number"
        format: "double"
      characters:
        type: "number"
        format: "double"
      normalizedPages:
        type: "number"
        format: "double"
      percent:
        type: "number"
        format: "double"
      editingTime:
        type: "number"
        format: "double"
  CountsDto_2:
    type: "object"
    properties:
      segments:
        type: "number"
        format: "double"
      words:
        type: "number"
        format: "double"
      characters:
        type: "number"
        format: "double"
      normalizedPages:
        type: "number"
        format: "double"
      percent:
        type: "number"
        format: "double"
      editingTime:
        type: "number"
        format: "double"
  CountsDto_3:
    type: "object"
    properties:
      segments:
        type: "number"
        format: "double"
      words:
        type: "number"
        format: "double"
      characters:
        type: "number"
        format: "double"
      normalizedPages:
        type: "number"
        format: "double"
      percent:
        type: "number"
        format: "double"
      editingTime:
        type: "number"
        format: "double"
  CreateAnalyseAsyncV2Dto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        description: "Job uids of jobs from the same project"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 50000
        minItems: 1
      type:
        type: "string"
        description: "default: PreAnalyse"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "Compare"
      includeFuzzyRepetitions:
        type: "boolean"
        description: "Default: true"
      separateFuzzyRepetitions:
        type: "boolean"
        description: "Default: false"
      includeConfirmedSegments:
        type: "boolean"
        description: "Default: true"
      includeNumbers:
        type: "boolean"
        description: "Default: true"
      includeLockedSegments:
        type: "boolean"
        description: "Default: true"
      countSourceUnits:
        type: "boolean"
        description: "Default: true"
      includeTransMemory:
        type: "boolean"
        description: "Default: true. Works only for type=PreAnalyse."
      includeNonTranslatables:
        type: "boolean"
        description: "Default: false. Works only for type=PreAnalyse."
      includeMachineTranslationMatches:
        type: "boolean"
        description: "Default: false. Works only for type=PreAnalyse."
      transMemoryPostEditing:
        type: "boolean"
        description: "Default: false. Works only for type=PostAnalyse."
      nonTranslatablePostEditing:
        type: "boolean"
        description: "Default: false. Works only for type=PostAnalyse."
      machineTranslatePostEditing:
        type: "boolean"
        description: "Default: false. Works only for type=PostAnalyse."
      analyzeByProvider:
        type: "boolean"
        example: false
        description: "Default: false."
      analyzeByLanguage:
        type: "boolean"
        example: false
        description: "Default: false."
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      netRateScheme:
        $ref: "#/definitions/IdReference"
      compareWorkflowLevel:
        type: "integer"
        format: "int32"
        description: "Required for type=Compare"
        minimum: 1
        maximum: 15
      useProjectAnalysisSettings:
        type: "boolean"
        description: "Default: false. Use default project settings. Will be overwritten\
          \ with setting sent\n        in the API call."
      callbackUrl:
        type: "string"
      provider:
        $ref: "#/definitions/ProviderReference"
  CreateAnalyseListAsyncDto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        description: "Job uids of jobs from the same project"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      type:
        type: "string"
        description: "default: PreAnalyse"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "Compare"
      includeFuzzyRepetitions:
        type: "boolean"
        description: "Default: true"
      separateFuzzyRepetitions:
        type: "boolean"
        description: "Default: false"
      includeConfirmedSegments:
        type: "boolean"
        description: "Default: true"
      includeNumbers:
        type: "boolean"
        description: "Default: true"
      includeLockedSegments:
        type: "boolean"
        description: "Default: true"
      countSourceUnits:
        type: "boolean"
        description: "Default: true"
      includeTransMemory:
        type: "boolean"
        description: "Default: true. Works only for type=PreAnalyse."
      includeNonTranslatables:
        type: "boolean"
        description: "Default: false. Works only for type=PreAnalyse."
      includeMachineTranslationMatches:
        type: "boolean"
        description: "Default: false. Works only for type=PreAnalyse."
      transMemoryPostEditing:
        type: "boolean"
        description: "Default: false. Works only for type=PostAnalyse."
      nonTranslatablePostEditing:
        type: "boolean"
        description: "Default: false. Works only for type=PostAnalyse."
      machineTranslatePostEditing:
        type: "boolean"
        description: "Default: false. Works only for type=PostAnalyse."
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      netRateScheme:
        $ref: "#/definitions/IdReference"
      compareWorkflowLevel:
        type: "integer"
        format: "int32"
        description: "Required for type=Compare"
        minimum: 1
        maximum: 15
      useProjectAnalysisSettings:
        type: "boolean"
        description: "Default: false. Use default project settings. Will be overwritten\
          \ with setting sent\n        in the API call."
      callbackUrl:
        type: "string"
  CreateCustomFieldDto:
    type: "object"
    required:
    - "allowedEntities"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      allowedEntities:
        type: "array"
        items:
          type: "string"
          enum:
          - "PROJECT"
          - "JOB"
      options:
        type: "array"
        items:
          type: "string"
      type:
        type: "string"
        enum:
        - "MULTI_SELECT"
        - "SINGLE_SELECT"
        - "STRING"
        - "NUMBER"
        - "URL"
        - "DATE"
      required:
        type: "boolean"
      description:
        type: "string"
        minLength: 0
        maxLength: 500
  CreateCustomFieldInstanceDto:
    type: "object"
    required:
    - "customField"
    properties:
      customField:
        $ref: "#/definitions/UidReference"
      selectedOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      value:
        type: "string"
        minLength: 0
        maxLength: 4096
  CreateCustomFieldInstancesDto:
    type: "object"
    properties:
      customFieldInstances:
        type: "array"
        items:
          $ref: "#/definitions/CreateCustomFieldInstanceDto"
  CreateCustomFileTypeDto:
    type: "object"
    required:
    - "filenamePattern"
    - "name"
    - "type"
    properties:
      name:
        type: "string"
      filenamePattern:
        type: "string"
      type:
        type: "string"
        enum:
        - "html"
        - "json"
        - "xml"
        - "multiling_xml"
        - "txt"
      fileImportSettings:
        $ref: "#/definitions/FileImportSettingsCreateDto"
  CreateLqaConversationDto:
    type: "object"
    required:
    - "references"
    properties:
      lqaDescription:
        type: "string"
      references:
        $ref: "#/definitions/LQAReferences"
  CreateLqaProfileDto:
    type: "object"
    required:
    - "errorCategories"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      errorCategories:
        $ref: "#/definitions/ErrorCategoriesDto"
      penaltyPoints:
        $ref: "#/definitions/PenaltyPointsDto"
      passFailThreshold:
        $ref: "#/definitions/PassFailThresholdDto"
  CreatePlainConversationDto:
    type: "object"
    required:
    - "references"
    properties:
      comment:
        $ref: "#/definitions/AddCommentDto"
      references:
        $ref: "#/definitions/PlainReferences"
  CreateProjectFromTemplateAsyncV2Dto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
      dateDue:
        type: "string"
        format: "date-time"
      note:
        type: "string"
      client:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      costCenter:
        $ref: "#/definitions/IdReference"
      callbackUrl:
        type: "string"
  CreateProjectFromTemplateV2Dto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
      dateDue:
        type: "string"
        format: "date-time"
      note:
        type: "string"
      client:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      costCenter:
        $ref: "#/definitions/IdReference"
  CreateProjectV3Dto:
    type: "object"
    required:
    - "name"
    - "sourceLang"
    - "targetLangs"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      client:
        description: "Client referenced by id"
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      costCenter:
        $ref: "#/definitions/IdReference"
      purchaseOrder:
        type: "string"
        minLength: 0
        maxLength: 255
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
      dateDue:
        type: "string"
        format: "date-time"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      lqaProfiles:
        type: "array"
        description: "Lqa profiles that will be added to workflow steps"
        items:
          $ref: "#/definitions/LqaProfilesForWsV2Dto"
      customFields:
        type: "array"
        description: "Custom fields for project"
        items:
          $ref: "#/definitions/CustomFieldInstanceApiDto"
      fileHandover:
        type: "boolean"
        description: "Default: false"
      propagateTranslationsToLowerWfDuringUpdateSource:
        type: "boolean"
        description: "Default: false"
  CreateReferenceFileNoteDto:
    type: "object"
    required:
    - "note"
    properties:
      note:
        type: "string"
  CreateReferenceFilesRequest:
    type: "object"
    properties:
      file:
        type: "array"
        description: "Files with appropriate `Content-Type` header"
        items:
          $ref: "#/definitions/MultipartFile"
      json:
        description: "Additional data in JSON format (`Content-Type`: `application/json)`"
        $ref: "#/definitions/CreateReferenceFileNoteDto"
  CreateTermsDto:
    type: "object"
    required:
    - "sourceTerm"
    - "targetTerm"
    properties:
      sourceTerm:
        $ref: "#/definitions/TermCreateByJobDto"
      targetTerm:
        $ref: "#/definitions/TermCreateByJobDto"
  CreateVendorDto:
    type: "object"
    required:
    - "vendorToken"
    properties:
      vendorToken:
        type: "string"
      netRateScheme:
        $ref: "#/definitions/UidReference"
      priceList:
        $ref: "#/definitions/UidReference"
      sourceLocales:
        type: "array"
        items:
          type: "string"
      targetLocales:
        type: "array"
        items:
          type: "string"
      clients:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      domains:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      subDomains:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
  CreateWebEditorLinkDtoV2:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        description: "Maximum supported number of jobs is 260"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 2147483647
        minItems: 1
  CreateWebHookDto:
    type: "object"
    required:
    - "events"
    - "url"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      url:
        type: "string"
      events:
        type: "array"
        items:
          type: "string"
          enum:
          - "JOB_STATUS_CHANGED"
          - "JOB_CREATED"
          - "JOB_DELETED"
          - "JOB_UNSHARED"
          - "JOB_ASSIGNED"
          - "JOB_DUE_DATE_CHANGED"
          - "JOB_UPDATED"
          - "JOB_TARGET_UPDATED"
          - "JOB_EXPORTED"
          - "JOB_UNEXPORTED"
          - "JOB_AUTO_LQA_FINISHED"
          - "JOB_METADATA_UPDATED"
          - "JOB_CUSTOM_FIELDS_UPDATED"
          - "PROJECT_CREATED"
          - "PROJECT_DELETED"
          - "PROJECT_UNSHARED"
          - "PROJECT_STATUS_CHANGED"
          - "PROJECT_DUE_DATE_CHANGED"
          - "SHARED_PROJECT_ASSIGNED"
          - "PROJECT_METADATA_UPDATED"
          - "PRE_TRANSLATION_FINISHED"
          - "ANALYSIS_CREATED"
          - "CONTINUOUS_JOB_UPDATED"
          - "PROJECT_TEMPLATE_CREATED"
          - "PROJECT_TEMPLATE_UPDATED"
          - "PROJECT_TEMPLATE_DELETED"
          - "RAW_MT_CONVERTER_IMPORT_FINISHED"
          - "RAW_MT_PRE_TRANSLATION_FINISHED"
          - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
          - "TERM_BASE_TERM_CREATED"
          - "TERM_BASE_TERM_UPDATED"
          - "TERM_BASE_TERM_DELETED"
          - "TERM_BASE_CONCEPT_CREATED"
          - "TERM_BASE_CONCEPT_UPDATED"
          - "TERM_BASE_CONCEPT_DELETED"
          - "TERM_BASE_IMPORTED"
      secretToken:
        type: "string"
        minLength: 0
        maxLength: 255
      secretTokenType:
        type: "string"
        description: "Default: `X_MEMSOURCE_TOKEN`"
        enum:
        - "X_MEMSOURCE_TOKEN"
        - "AUTHORIZATION"
      hidden:
        type: "boolean"
        description: "Default: `false`"
      status:
        type: "string"
        description: "Default: `ENABLED`"
        enum:
        - "ENABLED"
        - "DISABLED"
  CreateWorkflowStepDto:
    type: "object"
    required:
    - "abbr"
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the lqa workflow step"
        minLength: 1
        maxLength: 255
      order:
        type: "integer"
        format: "int32"
        description: "Order value"
      lqaEnabled:
        type: "boolean"
        description: "Default: false"
      abbr:
        type: "string"
        description: "Abbreviation"
        minLength: 1
        maxLength: 3
  CsvSettingsDto:
    type: "object"
    properties:
      delimiter:
        type: "string"
        description: "Default: ,"
      delimiterType:
        type: "string"
        description: "Default: COMMA"
        enum:
        - "TAB"
        - "COMMA"
        - "SEMICOLON"
        - "OTHER"
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
      importColumns:
        type: "string"
      contextNoteColumns:
        type: "string"
      contextKeyColumn:
        type: "string"
      maxLenColumn:
        type: "string"
      importRows:
        type: "string"
  CustomFieldDeprecateDto:
    type: "object"
    properties:
      deprecated:
        type: "boolean"
  CustomFieldDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "MULTI_SELECT"
        - "SINGLE_SELECT"
        - "STRING"
        - "NUMBER"
        - "URL"
        - "DATE"
      allowedEntities:
        type: "array"
        items:
          type: "string"
          enum:
          - "PROJECT"
          - "JOB"
      options:
        $ref: "#/definitions/CustomFieldOptionsTruncatedDto"
      createdAt:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      lastModified:
        type: "string"
        format: "date-time"
      lastModifiedBy:
        $ref: "#/definitions/UserReference"
      requiredFrom:
        type: "string"
        format: "date-time"
      required:
        type: "boolean"
      description:
        type: "string"
  CustomFieldInstanceApiDto:
    type: "object"
    properties:
      customField:
        $ref: "#/definitions/UidReference"
      selectedOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      value:
        type: "string"
        minLength: 0
        maxLength: 4096
  CustomFieldInstanceApiV3Dto:
    type: "object"
    properties:
      customField:
        $ref: "#/definitions/UidReference"
      selectedOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      value:
        type: "string"
        minLength: 0
        maxLength: 4096
  CustomFieldInstanceDto:
    type: "object"
    properties:
      uid:
        type: "string"
      customField:
        $ref: "#/definitions/CustomFieldDto"
      selectedOptions:
        type: "array"
        items:
          $ref: "#/definitions/CustomFieldOptionDto"
      value:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UidReference"
      updatedAt:
        type: "string"
        format: "date-time"
      updatedBy:
        $ref: "#/definitions/UidReference"
  CustomFieldInstancesDto:
    type: "object"
    properties:
      customFieldInstances:
        type: "array"
        items:
          $ref: "#/definitions/CustomFieldInstanceDto"
  CustomFieldOptionDto:
    type: "object"
    properties:
      uid:
        type: "string"
      value:
        type: "string"
      deprecated:
        type: "boolean"
      used:
        type: "boolean"
  CustomFieldOptionsTruncatedDto:
    type: "object"
    properties:
      truncatedOptions:
        type: "array"
        description: "Truncated list of options with size 5.\n    To get all options\
          \ use endpoint for getting options of the specific field"
        items:
          $ref: "#/definitions/CustomFieldOptionDto"
      remainingCount:
        type: "integer"
        format: "int32"
  CustomFileTypeDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      filenamePattern:
        type: "string"
      type:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      fileImportSettings:
        $ref: "#/definitions/FileImportSettingsDto"
      supportsContinuousJob:
        type: "boolean"
  CustomQAWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        message:
          type: "string"
        subType:
          type: "string"
        srcPosition:
          $ref: "#/definitions/Position"
        tgtPosition:
          $ref: "#/definitions/Position"
  DataDto:
    type: "object"
    properties:
      available:
        type: "boolean"
      all:
        $ref: "#/definitions/CountsDto_2"
      repetitions:
        $ref: "#/definitions/CountsDto_2"
      transMemoryMatches:
        $ref: "#/definitions/MatchCounts101Dto_2"
      machineTranslationMatches:
        $ref: "#/definitions/MatchCountsDto_2"
      nonTranslatablesMatches:
        $ref: "#/definitions/MatchCountsNTDto"
  DataDtoV1:
    type: "object"
    properties:
      available:
        type: "boolean"
      all:
        $ref: "#/definitions/CountsDto"
      repetitions:
        $ref: "#/definitions/CountsDto"
      transMemoryMatches:
        $ref: "#/definitions/MatchCounts101Dto"
      machineTranslationMatches:
        $ref: "#/definitions/MatchCountsDto"
      nonTranslatablesMatches:
        $ref: "#/definitions/MatchCountsNTDtoV1"
      internalFuzzyMatches:
        $ref: "#/definitions/MatchCountsDto"
  DataDto_2:
    type: "object"
    properties:
      available:
        type: "boolean"
      estimate:
        type: "boolean"
      all:
        $ref: "#/definitions/CountsDto_3"
      repetitions:
        $ref: "#/definitions/CountsDto_3"
      transMemoryMatches:
        $ref: "#/definitions/MatchCounts101Dto_3"
      machineTranslationMatches:
        $ref: "#/definitions/MatchCountsDto_3"
      nonTranslatablesMatches:
        $ref: "#/definitions/MatchCountsNTDto_2"
      internalFuzzyMatches:
        $ref: "#/definitions/MatchCountsDto_3"
  DeleteCustomFileTypeDto:
    type: "object"
    required:
    - "customFileTypes"
    properties:
      customFileTypes:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
  DeleteServicesDto:
    type: "object"
    required:
    - "services"
    properties:
      services:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
  DeleteVendorsDto:
    type: "object"
    required:
    - "vendors"
    properties:
      vendors:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
  DesignWeightsDto:
    type: "object"
    properties:
      design:
        $ref: "#/definitions/ToggleableWeightDto"
      length:
        $ref: "#/definitions/ToggleableWeightDto"
      localFormatting:
        $ref: "#/definitions/ToggleableWeightDto"
      markup:
        $ref: "#/definitions/ToggleableWeightDto"
      missingText:
        $ref: "#/definitions/ToggleableWeightDto"
      truncation:
        $ref: "#/definitions/ToggleableWeightDto"
  DictionaryItemDto:
    type: "object"
    required:
    - "lang"
    - "word"
    properties:
      lang:
        type: "string"
      word:
        type: "string"
  DiscountSchemeCreateDto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      rates:
        $ref: "#/definitions/DiscountSettingsDto"
      workflowStepNetSchemes:
        type: "array"
        items:
          $ref: "#/definitions/NetRateSchemeWorkflowStepCreate"
  DiscountSchemeReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
  DiscountSchemeReference_3:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference_2"
  DiscountSettingsDto:
    type: "object"
    properties:
      repetition:
        type: "number"
        format: "double"
      tm101:
        type: "number"
        format: "double"
      tm100:
        type: "number"
        format: "double"
      tm95:
        type: "number"
        format: "double"
      tm85:
        type: "number"
        format: "double"
      tm75:
        type: "number"
        format: "double"
      tm50:
        type: "number"
        format: "double"
      tm0:
        type: "number"
        format: "double"
      mt100:
        type: "number"
        format: "double"
      mt95:
        type: "number"
        format: "double"
      mt85:
        type: "number"
        format: "double"
      mt75:
        type: "number"
        format: "double"
      mt50:
        type: "number"
        format: "double"
      mt0:
        type: "number"
        format: "double"
      nt100:
        type: "number"
        format: "double"
      nt99:
        type: "number"
        format: "double"
      nt85:
        type: "number"
        format: "double"
      nt75:
        type: "number"
        format: "double"
      nt50:
        type: "number"
        format: "double"
      nt0:
        type: "number"
        format: "double"
      if100:
        type: "number"
        format: "double"
      if95:
        type: "number"
        format: "double"
      if85:
        type: "number"
        format: "double"
      if75:
        type: "number"
        format: "double"
      if50:
        type: "number"
        format: "double"
      if0:
        type: "number"
        format: "double"
  DitaSettingsDto:
    type: "object"
    properties:
      includeTags:
        type: "string"
      excludeTags:
        type: "string"
      inlineTags:
        type: "string"
      inlineTagsNonTranslatable:
        type: "string"
      tagRegexp:
        type: "string"
  DocBookSettingsDto:
    type: "object"
    properties:
      includeTags:
        type: "string"
      excludeTags:
        type: "string"
      inlineTags:
        type: "string"
      inlineTagsNonTranslatable:
        type: "string"
      tagRegexp:
        type: "string"
  DocSettingsDto:
    type: "object"
    properties:
      comments:
        type: "boolean"
        description: "Default: false"
      index:
        type: "boolean"
        description: "Default: true"
      other:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
      hyperlinkTarget:
        type: "boolean"
        description: "Default: false"
      joinSimilarRuns:
        type: "boolean"
        description: "Default: false"
      targetFont:
        type: "string"
      properties:
        type: "boolean"
        description: "Default: false"
      hidden:
        type: "boolean"
        description: "Default: false"
      headerFooter:
        type: "boolean"
        description: "Default: true"
  DomainDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
  DomainEditDto:
    type: "object"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
  DomainReference:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  DomainReference_3:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
  DomainReference_4:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  DownloadTargetFileDto:
    type: "object"
    properties:
      callbackUrl:
        type: "string"
  DueDateSchemeListEntryDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
  EditAnalyseSettingsDto:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "PreAnalyse"
        - "PostAnalyse"
        - "PreAnalyseTarget"
        - "Compare"
      includeFuzzyRepetitions:
        type: "boolean"
        description: "Default: false"
      separateFuzzyRepetitions:
        type: "boolean"
        description: "Default: false"
      includeNonTranslatables:
        type: "boolean"
        description: "Default: false"
      includeMachineTranslationMatches:
        type: "boolean"
        description: "Default: false"
      includeConfirmedSegments:
        type: "boolean"
        description: "Default: false"
      includeNotConfirmedSegments:
        type: "boolean"
        description: "Default: false"
      includeNumbers:
        type: "boolean"
        description: "Default: false"
      includeLockedSegments:
        type: "boolean"
        description: "Default: false"
      transMemoryPostEditing:
        type: "boolean"
        description: "Default: false"
      nonTranslatablePostEditing:
        type: "boolean"
        description: "Default: false"
      machineTranslatePostEditing:
        type: "boolean"
        description: "Default: false"
      countSourceUnits:
        type: "boolean"
        description: "Default: false"
      includeTransMemory:
        type: "boolean"
        description: "Default: false"
      namingPattern:
        type: "string"
        minLength: 0
        maxLength: 255
      analyzeByLanguage:
        type: "boolean"
        description: "Mutually exclusive with analyzeByProvider. Default: false"
      analyzeByProvider:
        type: "boolean"
        description: "Mutually exclusive with analyzeByLanguage. Default: true"
      allowAutomaticPostAnalysis:
        type: "boolean"
        description: "Default: false"
  EditAnalyseV2Dto:
    type: "object"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      provider:
        $ref: "#/definitions/ProviderReference"
      netRateScheme:
        $ref: "#/definitions/UidReference"
  EditLqaConversationDto:
    type: "object"
    required:
    - "lqa"
    properties:
      lqaDescription:
        type: "string"
      lqa:
        type: "array"
        items:
          $ref: "#/definitions/LQAReference"
        maxItems: 1
        minItems: 0
      status:
        type: "string"
        enum:
        - "resolved"
        - "unresolved"
      correlation:
        $ref: "#/definitions/ReferenceCorrelation"
  EditPlainConversationDto:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
        - "resolved"
        - "unresolved"
      correlation:
        $ref: "#/definitions/ReferenceCorrelation"
  EditProjectMTSettPerLangDto:
    type: "object"
    required:
    - "targetLang"
    properties:
      targetLang:
        type: "string"
      machineTranslateSettings:
        $ref: "#/definitions/IdReference"
  EditProjectMTSettPerLangListDto:
    type: "object"
    properties:
      mtSettingsPerLangList:
        type: "array"
        items:
          $ref: "#/definitions/EditProjectMTSettPerLangDto"
  EditProjectMTSettingsDto:
    type: "object"
    properties:
      machineTranslateSettings:
        $ref: "#/definitions/IdReference"
  EditProjectSecuritySettingsDtoV2:
    type: "object"
    properties:
      downloadEnabled:
        type: "boolean"
        description: "Default: `false`"
      webEditorEnabledForLinguists:
        type: "boolean"
        description: "Default: `false`"
      showUserDataToLinguists:
        type: "boolean"
        description: "Default: `false`"
      emailNotifications:
        type: "boolean"
        description: "Default: `false`"
      strictWorkflowFinish:
        type: "boolean"
        description: "Default: `false`"
      useVendors:
        type: "boolean"
        description: "Default: `false`"
      linguistsMayEditLockedSegments:
        type: "boolean"
        description: "Default: `false`"
      usersMaySetAutoPropagation:
        type: "boolean"
        description: "Default: `true`"
      allowLoadingExternalContentInEditors:
        type: "boolean"
        description: "Default: `true`"
      allowLoadingIframes:
        type: "boolean"
        description: "Default: `false`"
      linguistsMayEditSource:
        type: "boolean"
        description: "Default: `true`"
      linguistsMayEditTagContent:
        type: "boolean"
        description: "Default: `true`"
      linguistsMayDownloadLqaReport:
        type: "boolean"
        description: "Default: `true`"
      usernamesDisplayedInLqaReport:
        type: "boolean"
        description: "Default: `true`"
      userMaySetInstantQA:
        type: "boolean"
        description: "Default: `true`"
      triggerWebhooks:
        type: "boolean"
        description: "Default: `true`"
      notifyJobOwnerStatusChanged:
        type: "boolean"
        description: "Default: `false`"
      vendors:
        $ref: "#/definitions/VendorSecuritySettingsDto"
      allowedDomains:
        type: "array"
        items:
          type: "string"
  EditProjectV2Dto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      status:
        type: "string"
        enum:
        - "NEW"
        - "ASSIGNED"
        - "COMPLETED"
        - "ACCEPTED_BY_VENDOR"
        - "DECLINED_BY_VENDOR"
        - "COMPLETED_BY_VENDOR"
        - "CANCELLED"
      client:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      owner:
        description: "Owner must be Admin or PM"
        $ref: "#/definitions/IdReference"
      purchaseOrder:
        type: "string"
        minLength: 0
        maxLength: 255
      dateDue:
        type: "string"
        format: "date-time"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      fileHandover:
        type: "boolean"
        description: "Default: false"
      propagateTranslationsToLowerWfDuringUpdateSource:
        type: "boolean"
        description: "Default: false"
      lqaProfiles:
        type: "array"
        description: "Lqa profiles that will be added to workflow steps"
        items:
          $ref: "#/definitions/LqaProfilesForWsV2Dto"
      archived:
        type: "boolean"
        description: "Default: false"
      customFields:
        type: "array"
        description: "Custom fields for project"
        items:
          $ref: "#/definitions/CustomFieldInstanceApiDto"
  EditProjectV3Dto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      status:
        type: "string"
        enum:
        - "NEW"
        - "ASSIGNED"
        - "COMPLETED"
        - "ACCEPTED_BY_VENDOR"
        - "DECLINED_BY_VENDOR"
        - "COMPLETED_BY_VENDOR"
        - "CANCELLED"
      client:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      costCenter:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      owner:
        description: "Owner must be Admin or PM"
        $ref: "#/definitions/IdReference"
      purchaseOrder:
        type: "string"
        minLength: 0
        maxLength: 255
      dateDue:
        type: "string"
        format: "date-time"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      fileHandover:
        type: "boolean"
        description: "Default: false"
      propagateTranslationsToLowerWfDuringUpdateSource:
        type: "boolean"
        description: "Default: false"
      lqaProfiles:
        type: "array"
        description: "Lqa profiles that will be added to workflow steps"
        items:
          $ref: "#/definitions/LqaProfilesForWsV3Dto"
      archived:
        type: "boolean"
        description: "Default: false"
      customFields:
        type: "array"
        description: "Custom fields for project"
        items:
          $ref: "#/definitions/CustomFieldInstanceApiV3Dto"
  EditQASettingsDtoV2:
    type: "object"
    properties:
      checks:
        type: "array"
        example: "\n        {\n            \"ignorable\": false,\n            \"enabled\"\
          : true,\n            \"type\": \"VOID\",\n            \"instant\": false,\n\
          \            \"name\": \"emptyTarget\"\n        },\n        {\n        \
          \    \"ignorable\": false,\n            \"enabled\": true,\n           \
          \ \"value\": 12,\n            \"type\": \"NUMBER\",\n            \"name\"\
          : \"targetLength\"\n        },\n        {\n            \"ignorable\": false,\n\
          \            \"enabled\": true,\n            \"value\": \"ASAP, irony\"\
          ,\n            \"type\": \"STRING\",\n            \"instant\": true,\n \
          \           \"name\": \"forbiddenStrings\"\n        },\n        {\n    \
          \        \"enabled\": true,\n            \"profile\": \"jiris\",\n     \
          \       \"ignorable\": true,\n            \"type\": \"MORAVIA\",\n     \
          \       \"name\": \"moravia\"\n        },\n        {\n            \"rules\"\
          : [\n                {\n                    \"description\": \"Description\"\
          ,\n                    \"sourceRegexp\": \".+\",\n                    \"\
          targetRegexp\": \".+\",\n                    \"ignorable\": true\n     \
          \           },\n                {\n                    \"description\":\
          \ \"Description\",\n                    \"sourceRegexp\": \"i+\",\n    \
          \                \"targetRegexp\": \"e+\",\n                    \"ignorable\"\
          : false\n                }\n            ],\n            \"type\": \"REGEX\"\
          ,\n            \"name\": \"regexp\"\n        },\n        {\n           \
          \ \"enabled\": true,\n            \"ignorable\": true,\n            \"type\"\
          : \"VOID\",\n            \"name\": \"customQa\"\n        }\n    "
        description: "checks"
        items:
          type: "object"
          additionalProperties:
            type: "object"
  EditSegmentationRuleDto:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      primary:
        type: "boolean"
        description: "Default: false"
    description: "segmentation rule object for editing"
  EditWorkflowStepDto:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the lqa workflow step"
        minLength: 1
        maxLength: 255
      order:
        type: "integer"
        format: "int32"
        description: "Order value"
      lqaEnabled:
        type: "boolean"
        description: "Default: false"
      abbr:
        type: "string"
        description: "Abbreviation"
        minLength: 1
        maxLength: 3
  EditionDto:
    type: "object"
    properties:
      name:
        type: "string"
  Email:
    type: "object"
    properties:
      value:
        type: "string"
      type:
        type: "string"
      primary:
        type: "boolean"
        description: "Default: false"
  EmailQuotesRequestDto:
    type: "object"
    required:
    - "body"
    - "quotes"
    - "subject"
    properties:
      quotes:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      subject:
        type: "string"
      body:
        type: "string"
      cc:
        type: "string"
      bcc:
        type: "string"
  EmailQuotesResponseDto:
    type: "object"
    properties:
      recipients:
        type: "array"
        items:
          type: "string"
  EmptyPairTagsWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  EmptyTagContentWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  EmptyTranslationWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  EnabledCheckContextDtoV2:
    type: "object"
    properties:
      moraviaProfileId:
        type: "string"
      customQaDisplayName:
        type: "string"
      provider:
        type: "string"
  EnabledCheckContextDtoV4:
    type: "object"
    properties:
      moraviaProfileId:
        type: "string"
      customQaDisplayName:
        type: "string"
      provider:
        type: "string"
  EnabledCheckDtoV2:
    type: "object"
    properties:
      checkerType:
        type: "string"
      context:
        $ref: "#/definitions/EnabledCheckContextDtoV2"
  EnabledCheckDtoV4:
    type: "object"
    properties:
      checkerType:
        type: "string"
      context:
        $ref: "#/definitions/EnabledCheckContextDtoV4"
  EnabledQualityChecksDto:
    type: "object"
    properties:
      enabledChecks:
        type: "array"
        items:
          type: "string"
          enum:
          - "EmptyTranslation"
          - "TrailingPunctuation"
          - "Formatting"
          - "JoinTags"
          - "MissingNumbersV3"
          - "MultipleSpacesV3"
          - "NonConformingTerm"
          - "NotConfirmed"
          - "TranslationLength"
          - "AbsoluteLength"
          - "RelativeLength"
          - "UnresolvedComment"
          - "EmptyPairTags"
          - "InconsistentTranslationTargetSource"
          - "InconsistentTranslationSourceTarget"
          - "ForbiddenString"
          - "SpellCheck"
          - "RepeatedWord"
          - "InconsistentTagContent"
          - "EmptyTagContent"
          - "Malformed"
          - "ForbiddenTerm"
          - "NewerAtLowerLevel"
          - "LeadingAndTrailingSpaces"
          - "LeadingSpaces"
          - "TrailingSpaces"
          - "TargetSourceIdentical"
          - "SourceOrTargetRegexp"
          - "UnmodifiedFuzzyTranslation"
          - "UnmodifiedFuzzyTranslationTM"
          - "UnmodifiedFuzzyTranslationMTNT"
          - "Moravia"
          - "ExtraNumbersV3"
          - "UnresolvedConversation"
          - "NestedTags"
          - "FuzzyInconsistencyTargetSource"
          - "FuzzyInconsistencySourceTarget"
          - "CustomQA"
          - "MissingNonTranslatableAnnotation"
  ErrorCategoriesDto:
    type: "object"
    properties:
      accuracy:
        $ref: "#/definitions/AccuracyWeightsDto"
      fluency:
        $ref: "#/definitions/FluencyWeightsDto"
      terminology:
        $ref: "#/definitions/TerminologyWeightsDto"
      style:
        $ref: "#/definitions/StyleWeightsDto"
      localeConvention:
        $ref: "#/definitions/LocaleConventionWeightsDto"
      verity:
        $ref: "#/definitions/VerityWeightsDto"
      design:
        $ref: "#/definitions/DesignWeightsDto"
      other:
        $ref: "#/definitions/OtherWeightsDto"
    description: "Error categories and their importance weight. If not provided, defaults\
      \ will be created."
  ErrorDetailDto:
    type: "object"
    properties:
      code:
        type: "string"
        description: "Code, e.g. NOT_FOUND."
      args:
        type: "object"
        description: "Related arguments, e.g. number => \"hello world\""
        additionalProperties:
          type: "object"
      message:
        type: "string"
        description: "Optional human-readable message."
  ErrorDetailDtoV2:
    type: "object"
    properties:
      code:
        type: "string"
        description: "Code, e.g. NOT_FOUND."
      args:
        type: "object"
        description: "Related arguments, e.g. number => \"hello world\""
        additionalProperties:
          type: "object"
      message:
        type: "string"
        description: "Optional human-readable message."
  ErrorDetailDtoV3:
    type: "object"
    properties:
      code:
        type: "string"
        description: "Code, e.g. NOT_FOUND."
      args:
        type: "object"
        description: "Related arguments, e.g. number => \"hello world\""
        additionalProperties:
          type: "object"
      message:
        type: "string"
        description: "Optional human-readable message."
  ErrorDto:
    type: "object"
    properties:
      code:
        type: "string"
      message:
        type: "string"
  ErrorsReference:
    type: "object"
    properties:
      creationTask:
        $ref: "#/definitions/BackgroundTaskReference"
      lastTask:
        $ref: "#/definitions/BackgroundTaskReference"
  ExportByQueryDto:
    type: "object"
    required:
    - "exportTargetLangs"
    - "queries"
    - "queryLangs"
    properties:
      exportTargetLangs:
        type: "array"
        items:
          type: "string"
      queries:
        type: "array"
        items:
          type: "string"
      queryLangs:
        type: "array"
        items:
          type: "string"
      createdAtMin:
        type: "string"
        format: "date-time"
      createdAtMax:
        type: "string"
        format: "date-time"
      modifiedAtMin:
        type: "string"
        format: "date-time"
      modifiedAtMax:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/IdReference"
      modifiedBy:
        $ref: "#/definitions/IdReference"
      filename:
        type: "string"
      project:
        $ref: "#/definitions/UidReference"
      callbackUrl:
        type: "string"
  ExportTMDto:
    type: "object"
    properties:
      exportTargetLangs:
        type: "array"
        items:
          type: "string"
      callbackUrl:
        type: "string"
  ExtraNumbersV3WarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        number:
          type: "string"
        positions:
          type: "array"
          items:
            $ref: "#/definitions/Position"
  ExtraNumbersWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        extraNumbers:
          type: "array"
          items:
            type: "string"
  FeaturesDto:
    type: "object"
    properties:
      icuEnabled:
        type: "boolean"
      rejectJobs:
        type: "boolean"
      qaHighlightsEnabled:
        type: "boolean"
      lqaBulkCommentsCreation:
        type: "boolean"
      mtForTMAbove100Enabled:
        type: "boolean"
      mqmQualityEstimationEnabled:
        type: "boolean"
      tweI18nEnabled:
        type: "boolean"
      platformSettingsEnabled:
        type: "boolean"
      ignoreTagMetadataEnabled:
        type: "boolean"
      filteringByRegexEnabled:
        type: "boolean"
      filteringByCustomMetadataEnabled:
        type: "boolean"
      autoLqaCopilotEnabled:
        type: "boolean"
      mtuOptimizationEnabled:
        type: "boolean"
  FileDto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      encodedName:
        type: "string"
      contentType:
        type: "string"
      note:
        type: "string"
      size:
        type: "integer"
        format: "int64"
      directory:
        type: "boolean"
      lastModified:
        type: "string"
        format: "date-time"
      dueDate:
        type: "string"
        format: "date-time"
      selected:
        type: "boolean"
      error:
        $ref: "#/definitions/ErrorDto"
  FileHandoverDto:
    type: "object"
    properties:
      fileId:
        type: "string"
        description: "ID of the uploaded file"
      filename:
        type: "string"
        description: "Filename of the uploaded file"
  FileImportSettingsCreateDto:
    type: "object"
    properties:
      inputCharset:
        type: "string"
      outputCharset:
        type: "string"
      zipCharset:
        type: "string"
      fileFormat:
        type: "string"
        description: "default: auto-detect"
        enum:
        - "auto-detect"
        - "doc"
        - "ppt"
        - "xls"
        - "xlf"
        - "xlf2"
        - "sdlxlif"
        - "ttx"
        - "html"
        - "xml"
        - "mif"
        - "tmx"
        - "idml"
        - "dita"
        - "json"
        - "po"
        - "ts"
        - "icml"
        - "yaml"
        - "properties"
        - "csv"
        - "android_string"
        - "desktop_entry"
        - "mac_strings"
        - "pdf"
        - "windows_rc"
        - "xml_properties"
        - "joomla_ini"
        - "magento_csv"
        - "dtd"
        - "mozilla_properties"
        - "plist"
        - "plain_text"
        - "srt"
        - "sub"
        - "sbv"
        - "wiki"
        - "resx"
        - "resjson"
        - "chrome_json"
        - "epub"
        - "svg"
        - "docbook"
        - "wpxliff"
        - "multiling_xml"
        - "multiling_xls"
        - "mqxliff"
        - "php"
        - "psd"
        - "tag"
        - "md"
        - "vtt"
      autodetectMultilingualFiles:
        type: "boolean"
        description: "Try to use multilingual variants for auto-detected CSV and Excel\
          \ files. Default: true"
      targetLength:
        type: "boolean"
        description: "Default: false"
      targetLengthMax:
        type: "integer"
        format: "int32"
        description: "default: 1000"
      targetLengthPercent:
        type: "boolean"
        description: "Default: false"
      targetLengthPercentValue:
        type: "number"
        format: "double"
        description: "default: 130"
      segmentationRuleId:
        type: "integer"
        format: "int64"
      targetSegmentationRuleId:
        type: "integer"
        format: "int64"
      android:
        $ref: "#/definitions/AndroidSettingsDto"
      csv:
        $ref: "#/definitions/CsvSettingsDto"
      dita:
        $ref: "#/definitions/DitaSettingsDto"
      docBook:
        $ref: "#/definitions/DocBookSettingsDto"
      doc:
        $ref: "#/definitions/DocSettingsDto"
      html:
        $ref: "#/definitions/HtmlSettingsDto"
      idml:
        $ref: "#/definitions/IdmlSettingsDto"
      json:
        $ref: "#/definitions/JsonSettingsDto"
      mac:
        $ref: "#/definitions/MacSettingsDto"
      md:
        $ref: "#/definitions/MdSettingsDto"
      mif:
        $ref: "#/definitions/MifSettingsDto"
      multilingualXls:
        $ref: "#/definitions/MultilingualXlsSettingsDto"
      multilingualCsv:
        $ref: "#/definitions/MultilingualCsvSettingsDto"
      multilingualXml:
        $ref: "#/definitions/MultilingualXmlSettingsDto"
      pdf:
        $ref: "#/definitions/PdfSettingsDto"
      php:
        $ref: "#/definitions/PhpSettingsDto"
      po:
        $ref: "#/definitions/PoSettingsDto"
      ppt:
        $ref: "#/definitions/PptSettingsDto"
      properties:
        $ref: "#/definitions/PropertiesSettingsDto"
      psd:
        $ref: "#/definitions/PsdSettingsDto"
      quarkTag:
        $ref: "#/definitions/QuarkTagSettingsDto"
      resx:
        $ref: "#/definitions/ResxSettingsDto"
      sdlXlf:
        $ref: "#/definitions/SdlXlfSettingsDto"
      tmMatch:
        $ref: "#/definitions/TMMatchSettingsDto"
      ttx:
        $ref: "#/definitions/TtxSettingsDto"
      txt:
        $ref: "#/definitions/TxtSettingsDto"
      xlf2:
        $ref: "#/definitions/Xlf2SettingsDto"
      xlf:
        $ref: "#/definitions/XlfSettingsDto"
      xls:
        $ref: "#/definitions/XlsSettingsDto"
      xml:
        $ref: "#/definitions/XmlSettingsDto"
      yaml:
        $ref: "#/definitions/YamlSettingsDto"
      asciidoc:
        $ref: "#/definitions/AsciidocSettingsDto"
  FileImportSettingsDto:
    type: "object"
    properties:
      inputCharset:
        type: "string"
      outputCharset:
        type: "string"
      zipCharset:
        type: "string"
      fileFormat:
        type: "string"
      autodetectMultilingualFiles:
        type: "boolean"
      targetLength:
        type: "boolean"
      targetLengthMax:
        type: "integer"
        format: "int32"
      targetLengthPercent:
        type: "boolean"
      targetLengthPercentValue:
        type: "number"
        format: "double"
      android:
        $ref: "#/definitions/AndroidSettingsDto"
      idml:
        $ref: "#/definitions/IdmlSettingsDto"
      xls:
        $ref: "#/definitions/XlsSettingsDto"
      multilingualXml:
        $ref: "#/definitions/MultilingualXmlSettingsDto"
      php:
        $ref: "#/definitions/PhpSettingsDto"
      resx:
        $ref: "#/definitions/ResxSettingsDto"
      json:
        $ref: "#/definitions/JsonSettingsDto"
      html:
        $ref: "#/definitions/HtmlSettingsDto"
      multilingualXls:
        $ref: "#/definitions/MultilingualXlsSettingsDto"
      multilingualCsv:
        $ref: "#/definitions/MultilingualCsvSettingsDto"
      csv:
        $ref: "#/definitions/CsvSettingsDto"
      txt:
        $ref: "#/definitions/TxtSettingsDto"
      xlf2:
        $ref: "#/definitions/Xlf2SettingsDto"
      quarkTag:
        $ref: "#/definitions/QuarkTagSettingsDto"
      pdf:
        $ref: "#/definitions/PdfSettingsDto"
      tmMatch:
        $ref: "#/definitions/TMMatchSettingsDto"
      xml:
        $ref: "#/definitions/XmlSettingsDto"
      mif:
        $ref: "#/definitions/MifSettingsDto"
      properties:
        $ref: "#/definitions/PropertiesSettingsDto"
      doc:
        $ref: "#/definitions/DocSettingsDto"
      xlf:
        $ref: "#/definitions/XlfSettingsDto"
      sdlXlf:
        $ref: "#/definitions/SdlXlfSettingsDto"
      ttx:
        $ref: "#/definitions/TtxSettingsDto"
      ppt:
        $ref: "#/definitions/PptSettingsDto"
      yaml:
        $ref: "#/definitions/YamlSettingsDto"
      dita:
        $ref: "#/definitions/DitaSettingsDto"
      docBook:
        $ref: "#/definitions/DocBookSettingsDto"
      po:
        $ref: "#/definitions/PoSettingsDto"
      mac:
        $ref: "#/definitions/MacSettingsDto"
      md:
        $ref: "#/definitions/MdSettingsDto"
      psd:
        $ref: "#/definitions/PsdSettingsDto"
      asciidoc:
        $ref: "#/definitions/AsciidocSettingsDto"
      segRule:
        $ref: "#/definitions/SegRuleReference"
      targetSegRule:
        $ref: "#/definitions/SegRuleReference"
  FileListDto:
    type: "object"
    properties:
      files:
        type: "array"
        items:
          $ref: "#/definitions/FileDto"
      currentFolder:
        type: "string"
      encodedCurrentFolder:
        type: "string"
      rootFolder:
        type: "boolean"
      lastChangedFiles:
        type: "array"
        items:
          $ref: "#/definitions/FileDto"
  FileNamingSettingsDto:
    type: "object"
    properties:
      renameCompleted:
        type: "boolean"
      completedFilePattern:
        type: "string"
        minLength: 0
        maxLength: 255
      targetFolderPath:
        type: "string"
        minLength: 0
        maxLength: 255
  FinancialSettingsDto:
    type: "object"
    properties:
      netRateScheme:
        $ref: "#/definitions/NetRateSchemeReference"
      priceList:
        $ref: "#/definitions/PriceListReference"
  FindConversationsDto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      since:
        type: "string"
      includeDeleted:
        type: "boolean"
        description: "Default: false"
  FindConversationsForProjectDto:
    type: "object"
    required:
    - "jobPartUidRef"
    properties:
      jobPartUidRef:
        description: "This JobPart defines project and is used for contextual information\
          \ - i.e. jobRoles"
        $ref: "#/definitions/UidReference"
      since:
        type: "string"
        example: "2024-07-21T10:15:27.819Z"
        description: "Filtered by createdAt date time in ISO 8601 UTC format"
      includeDeleted:
        type: "boolean"
        description: "Include conversations flagged for deletion. Default: false"
      status:
        type: "string"
        description: "Filter current status for values \"resolved\" or \"unresolved\""
      text:
        type: "string"
        description: "Case insensitive search in the lqa description and conversation\
          \ comments"
      mentionedUid:
        type: "string"
        description: "Search a single user uid in mentions"
      pageRequest:
        description: "Pagination information. Allowed sort values are: relevance,\
          \ createdAt, modifiedAt"
        $ref: "#/definitions/PageRequest"
  FinishAssessmentDto:
    type: "object"
    properties:
      overallFeedback:
        type: "string"
        description: "Overall feedback from the LQA reviewer.\n        If the assessment\
          \ has already been finished before, null value means keep the previous feedback."
    description: "Data for finishing LQA Assessment"
  FinishAssessmentItemDto:
    type: "object"
    required:
    - "jobPartUid"
    properties:
      jobPartUid:
        type: "string"
        description: "UID of the corresponding job part"
      overallFeedback:
        type: "string"
        description: "Overall feedback from the LQA reviewer.\n        If the assessment\
          \ has already been finished before, null value means keep the previous feedback."
    description: "Data for finishing single LQA assessment"
  FinishAssessmentsDto:
    type: "object"
    required:
    - "items"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/FinishAssessmentItemDto"
        maxItems: 100
        minItems: 1
    description: "Data for finishing multiple LQA assessments"
  FluencyWeightsDto:
    type: "object"
    properties:
      fluency:
        $ref: "#/definitions/ToggleableWeightDto"
      punctuation:
        $ref: "#/definitions/ToggleableWeightDto"
      spelling:
        $ref: "#/definitions/ToggleableWeightDto"
      grammar:
        $ref: "#/definitions/ToggleableWeightDto"
      grammaticalRegister:
        $ref: "#/definitions/ToggleableWeightDto"
      inconsistency:
        $ref: "#/definitions/ToggleableWeightDto"
      crossReference:
        $ref: "#/definitions/ToggleableWeightDto"
      characterEncoding:
        $ref: "#/definitions/ToggleableWeightDto"
  ForbiddenStringWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        forbiddenString:
          type: "string"
        positions:
          type: "array"
          items:
            $ref: "#/definitions/Position"
  ForbiddenTermWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        term:
          type: "string"
        positions:
          type: "array"
          items:
            $ref: "#/definitions/Position"
        sourceTerms:
          type: "array"
          items:
            $ref: "#/definitions/Term"
  FormattingWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  FuzzyInconsistencyWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        segmentIds:
          type: "array"
          items:
            type: "string"
  GUEST:
    allOf:
    - $ref: "#/definitions/AbstractUserCreateDto"
    - type: "object"
      required:
      - "client"
      properties:
        client:
          $ref: "#/definitions/UidReference"
        enableMT:
          type: "boolean"
          description: "Enable MT. Default: true"
        projectViewOther:
          type: "boolean"
          description: "View projects created by other users. Default: true"
        projectViewOtherLinguist:
          type: "boolean"
          description: "Show provider names. Default: true"
        projectViewOtherEditor:
          type: "boolean"
          description: "Edit jobs in Phrase CAT editor. Default: true"
        transMemoryViewOther:
          type: "boolean"
          description: "View TMs created by other users. Default: true"
        transMemoryEditOther:
          type: "boolean"
          description: "Modify TMs created by other users. Default: true"
        transMemoryExportOther:
          type: "boolean"
          description: "Export TMs created by other users. Default: true"
        transMemoryImportOther:
          type: "boolean"
          description: "Import into TMs created by other users. Default: true"
        termBaseViewOther:
          type: "boolean"
          description: "View TBs created by other users. Default: true"
        termBaseEditOther:
          type: "boolean"
          description: "Modify TBs created by other users. Default: true"
        termBaseExportOther:
          type: "boolean"
          description: "Export TBs created by other users. Default: true"
        termBaseImportOther:
          type: "boolean"
          description: "Import into TBs created by other users. Default: true"
        termBaseApproveOther:
          type: "boolean"
          description: "Approve terms in TBs created by other users. Default: true"
  GUEST_EDIT:
    allOf:
    - $ref: "#/definitions/AbstractUserEditDto"
    - type: "object"
      required:
      - "client"
      properties:
        client:
          $ref: "#/definitions/UidReference"
        enableMT:
          type: "boolean"
          description: "Enable MT. Default: true"
        projectViewOther:
          type: "boolean"
          description: "View projects created by other users. Default: true"
        projectViewOtherLinguist:
          type: "boolean"
          description: "Show provider names. Default: true"
        projectViewOtherEditor:
          type: "boolean"
          description: "Edit jobs in Phrase CAT editor. Default: true"
        transMemoryViewOther:
          type: "boolean"
          description: "View TMs created by other users. Default: true"
        transMemoryEditOther:
          type: "boolean"
          description: "Modify TMs created by other users. Default: true"
        transMemoryExportOther:
          type: "boolean"
          description: "Export TMs created by other users. Default: true"
        transMemoryImportOther:
          type: "boolean"
          description: "Import into TMs created by other users. Default: true"
        termBaseViewOther:
          type: "boolean"
          description: "View TBs created by other users. Default: true"
        termBaseEditOther:
          type: "boolean"
          description: "Modify TBs created by other users. Default: true"
        termBaseExportOther:
          type: "boolean"
          description: "Export TBs created by other users. Default: true"
        termBaseImportOther:
          type: "boolean"
          description: "Import into TBs created by other users. Default: true"
        termBaseApproveOther:
          type: "boolean"
          description: "Approve terms in TBs created by other users. Default: true"
  GUEST_RESPONSE:
    allOf:
    - $ref: "#/definitions/UserDetailsDtoV3"
    - type: "object"
      required:
      - "client"
      properties:
        client:
          $ref: "#/definitions/ClientReference_4"
        enableMT:
          type: "boolean"
        projectViewOther:
          type: "boolean"
        projectViewOtherLinguist:
          type: "boolean"
        projectViewOtherEditor:
          type: "boolean"
        transMemoryViewOther:
          type: "boolean"
        transMemoryEditOther:
          type: "boolean"
        transMemoryExportOther:
          type: "boolean"
        transMemoryImportOther:
          type: "boolean"
        termBaseViewOther:
          type: "boolean"
        termBaseEditOther:
          type: "boolean"
        termBaseExportOther:
          type: "boolean"
        termBaseImportOther:
          type: "boolean"
        termBaseApproveOther:
          type: "boolean"
  GetBilingualFileDto:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 1000
        minItems: 1
  GetFileRequestParamsDto:
    type: "object"
    properties:
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      callbackUrl:
        type: "string"
        example: "{\"callbackUrl\": \"https://www.yourdomain.com/callback_endpoint\"\
          }"
  GlossaryActivationDto:
    type: "object"
    properties:
      active:
        type: "boolean"
  GlossaryDto:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      internalId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      langs:
        type: "array"
        items:
          type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
      owner:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      profileCount:
        type: "integer"
        format: "int32"
      active:
        type: "boolean"
      profiles:
        type: "array"
        items:
          $ref: "#/definitions/MemsourceTranslateProfileSimpleDto"
  GlossaryEditDto:
    type: "object"
    required:
    - "langs"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      langs:
        type: "array"
        items:
          type: "string"
        maxItems: 2147483647
        minItems: 1
      owner:
        description: "Owner of the TM must be Admin or PM"
        $ref: "#/definitions/IdReference"
  GlossarySimpleDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
  HtmlSettingsDto:
    type: "object"
    properties:
      breakTagCreatesSegment:
        type: "boolean"
        description: "Default: true"
      unknownTagCreatesTag:
        type: "boolean"
        description: "Default: true"
      preserveWhitespace:
        type: "boolean"
        description: "Default: false"
      importComments:
        type: "boolean"
        description: "Default: true"
      excludeElements:
        type: "string"
        description: "Example: \"script,blockquote\""
      tagRegexp:
        type: "string"
      charEntitiesToTags:
        type: "string"
      translateMetaTagRegexp:
        type: "string"
      importDefaultMetaTags:
        type: "boolean"
        description: "Default: true"
      translatableAttributes:
        type: "string"
      importDefaultAttributes:
        type: "boolean"
        description: "Default: true"
      nonTranslatableInlineElements:
        type: "string"
        description: "Example: \"code\""
      translatableInlineElements:
        type: "string"
        description: "Example: \"span\""
      updateLang:
        type: "boolean"
        description: "Default: false"
      escapeDisabled:
        type: "boolean"
        description: "Default: `false`"
  HumanTranslateJobsDto:
    type: "object"
    required:
    - "humanTranslateSettings"
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      humanTranslateSettings:
        $ref: "#/definitions/IdReference"
      comment:
        type: "string"
      glossaryId:
        type: "string"
      usePreferredTranslators:
        type: "boolean"
      level:
        type: "string"
        enum:
        - "STANDARD"
        - "PRO"
      callbackUrl:
        type: "string"
  IdReference:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
  IdmUserReference:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      userName:
        type: "string"
      email:
        type: "string"
      role:
        type: "string"
        enum:
        - "SYS_ADMIN"
        - "SYS_ADMIN_READ"
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      id:
        type: "string"
      uid:
        type: "string"
      suiteIdentifier:
        type: "string"
  IdmlSettingsDto:
    type: "object"
    properties:
      extractNotes:
        type: "boolean"
        description: "Default: false"
      simplifyCodes:
        type: "boolean"
        description: "Default: true"
      extractMasterSpreads:
        type: "boolean"
        description: "Default: true"
      extractLockedLayers:
        type: "boolean"
        description: "Default: true"
      extractInvisibleLayers:
        type: "boolean"
        description: "Default: false"
      extractHiddenConditionalText:
        type: "boolean"
        description: "Default: false"
      extractHyperlinks:
        type: "boolean"
        description: "Default: false"
      keepKerning:
        type: "boolean"
        description: "Default: false"
      keepTracking:
        type: "boolean"
        description: "Default: false"
      targetFont:
        type: "string"
      replaceFont:
        type: "boolean"
        description: "Default: true"
      removeXmlElements:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
      extractCrossReferenceFormats:
        type: "boolean"
        description: "Default: true"
      extractVariables:
        type: "boolean"
        description: "Default: true"
  ImportGlossaryResponseDto:
    type: "object"
    properties:
      langs:
        type: "array"
        items:
          type: "string"
      createdTermsCount:
        type: "integer"
        format: "int64"
      updatedTermsCount:
        type: "integer"
        format: "int64"
  ImportSettingsCreateDto:
    type: "object"
    required:
    - "fileImportSettings"
    - "name"
    properties:
      name:
        type: "string"
      fileImportSettings:
        $ref: "#/definitions/FileImportSettingsCreateDto"
  ImportSettingsDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      fileImportSettings:
        $ref: "#/definitions/FileImportSettingsDto"
  ImportSettingsEditDto:
    type: "object"
    required:
    - "fileImportSettings"
    - "name"
    - "uid"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      fileImportSettings:
        $ref: "#/definitions/FileImportSettingsCreateDto"
  ImportSettingsReference:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
  ImportStatusDto:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
        - "RUNNING"
        - "ERROR"
        - "OK"
      errorMessage:
        type: "string"
  ImportStatusDtoV2:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
        - "RUNNING"
        - "ERROR"
        - "OK"
      errorMessage:
        type: "string"
  ImportTermBaseResponseDto:
    type: "object"
    properties:
      langs:
        type: "array"
        items:
          type: "string"
      createdTermsCount:
        type: "integer"
        format: "int64"
      updatedTermsCount:
        type: "integer"
        format: "int64"
  InconsistentTagContentWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  InconsistentTranslationWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        segmentId:
          type: "string"
  InputStream:
    type: "object"
  InputStreamLength:
    type: "object"
    properties:
      stream:
        $ref: "#/definitions/InputStream"
      length:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      characterEncoding:
        type: "string"
      extension:
        type: "string"
      cleanupTask:
        $ref: "#/definitions/CleanupTask"
  IssueCountsDto:
    type: "object"
    required:
    - "critical"
    - "criticalRepeated"
    - "major"
    - "majorRepeated"
    - "minor"
    - "minorRepeated"
    - "neutral"
    - "neutralRepeated"
    properties:
      critical:
        type: "integer"
        format: "int32"
      criticalRepeated:
        type: "integer"
        format: "int32"
      major:
        type: "integer"
        format: "int32"
      majorRepeated:
        type: "integer"
        format: "int32"
      minor:
        type: "integer"
        format: "int32"
      minorRepeated:
        type: "integer"
        format: "int32"
      neutral:
        type: "integer"
        format: "int32"
      neutralRepeated:
        type: "integer"
        format: "int32"
  JobCreateRemoteFileDto:
    type: "object"
    required:
    - "connectorToken"
    - "remoteFileName"
    properties:
      connectorToken:
        type: "string"
      remoteFolder:
        type: "string"
      remoteFileName:
        type: "string"
      remoteFileNameRegex:
        type: "boolean"
      continuous:
        type: "boolean"
  JobCreateRequestDto:
    type: "object"
    required:
    - "targetLangs"
    properties:
      targetLangs:
        type: "array"
        items:
          type: "string"
      due:
        type: "string"
        format: "date-time"
        description: "only use for projects without workflows; otherwise specify in\
          \ the workflowSettings object. Use ISO 8601 date format."
      workflowSettings:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepConfiguration"
      assignments:
        type: "array"
        description: "only use for projects without workflows; otherwise specify in\
          \ the workflowSettings object"
        items:
          $ref: "#/definitions/ProvidersPerLanguage"
      importSettings:
        $ref: "#/definitions/UidReference"
      useProjectFileImportSettings:
        type: "boolean"
        description: "Default: false"
      preTranslate:
        type: "boolean"
      semanticMarkup:
        type: "boolean"
      notifyProvider:
        description: "use to notify assigned providers, notificationIntervalInMinutes\
          \ 0 or empty value means immediate notification to all providers"
        $ref: "#/definitions/NotifyProviderDto"
      callbackUrl:
        type: "string"
      path:
        type: "string"
        minLength: 0
        maxLength: 255
      remoteFile:
        $ref: "#/definitions/JobCreateRemoteFileDto"
      jobPreviewPackageFileUidRef:
        description: "Customer preview package for the import file"
        $ref: "#/definitions/UidReference"
      xmlAssistantProfile:
        $ref: "#/definitions/UidReference"
  JobExportActionDto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 1000
        minItems: 1
  JobExportResponseDto:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
  JobListDto:
    type: "object"
    properties:
      unsupportedFiles:
        type: "array"
        items:
          type: "string"
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/JobPartReference"
      asyncRequest:
        $ref: "#/definitions/AsyncRequestReference"
  JobMachineTranslationSettingsV3Dto:
    type: "object"
    properties:
      useMachineTranslation:
        type: "boolean"
        description: "Pre-translate from machine translation. Default: true"
      machineTranslationBehavior:
        type: "string"
        description: "Machine translation behavior. Default: APPLY_MT_ABOVE_THRESHOLD"
        enum:
        - "APPLY_MT_ABOVE_THRESHOLD"
        - "COMPARE_AND_BEST_MATCH"
      lock100PercentMatches:
        type: "boolean"
        description: "Lock section: 100% machine translation suggestions. Default:\
          \ false"
      confirmMatches:
        type: "boolean"
        description: "Set segment status to confirmed for:\n                machine\
          \ translation suggestions above `confirmMatchesThreshold`. Default: false"
      confirmMatchesThreshold:
        type: "number"
        format: "double"
        description: "Machine translation suggestions percent. Default: `1.0`"
        minimum: 0
        maximum: 1
        exclusiveMinimum: false
        exclusiveMaximum: false
      useAltTransOnly:
        type: "boolean"
        description: "Do not put machine translations to target and use alt-trans\
          \ fields (alt-trans in mxlf).\nDefault: false"
      mtSuggestOnlyTmBelow:
        type: "boolean"
        description: "Suggest MT only for segments with a TM match below. Default:\
          \ true"
      mtSuggestOnlyTmBelowThreshold:
        type: "number"
        format: "double"
        description: "Suggest MT only for segments with a TM match below threshold.\
          \ Default: 1.0"
        minimum: 0
        maximum: 1.01
        exclusiveMinimum: false
        exclusiveMaximum: false
    description: "Machine translation related settings"
  JobNonTranslatableSettingsV3Dto:
    type: "object"
    properties:
      preTranslateNonTranslatables:
        type: "boolean"
        description: "Pre-translate non-translatables. Default: true"
      confirm100PercentMatches:
        type: "boolean"
        description: "Set segment status to confirmed for: 100% non-translatables.\
          \ Default: false"
      lock100PercentMatches:
        type: "boolean"
        description: "Lock section: 100% non-translatables. Default: false"
    description: "Non-translatables related settings"
  JobPartDeleteReferences:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
  JobPartExtendedDto:
    type: "object"
    properties:
      uid:
        type: "string"
      innerId:
        type: "string"
        description: "InnerId is a sequential number of a job in a project. Jobs created\
          \ from the same file share the same innerId across workflow steps."
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      workflowLevel:
        type: "integer"
        format: "int32"
      workflowStep:
        $ref: "#/definitions/ProjectWorkflowStepReference"
      filename:
        type: "string"
      dateDue:
        type: "string"
        format: "date-time"
      wordsCount:
        type: "integer"
        format: "int32"
      beginIndex:
        type: "integer"
        format: "int32"
      endIndex:
        type: "integer"
        format: "int32"
      isParentJobSplit:
        type: "boolean"
      updateSourceDate:
        type: "string"
        format: "date-time"
      updateTargetDate:
        type: "string"
        format: "date-time"
      dateCreated:
        type: "string"
        format: "date-time"
      jobReference:
        $ref: "#/definitions/JobReference"
      project:
        $ref: "#/definitions/ProjectReference"
      lastWorkflowLevel:
        type: "integer"
        format: "int32"
      workUnit:
        $ref: "#/definitions/ObjectReference"
      importStatus:
        $ref: "#/definitions/ImportStatusDto"
      imported:
        type: "boolean"
      continuous:
        type: "boolean"
      continuousJobInfo:
        $ref: "#/definitions/ContinuousJobInfoDto"
      originalFileDirectory:
        type: "string"
      serverTaskId:
        type: "string"
  JobPartPatchBatchDto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      dateDue:
        type: "string"
        format: "date-time"
      clearDateDue:
        type: "boolean"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
      customFields:
        $ref: "#/definitions/UpdateCustomFieldInstancesDto"
  JobPartPatchResultDto:
    type: "object"
    properties:
      updated:
        type: "integer"
        format: "int32"
        description: "Number of successfully updated job parts"
      errors:
        type: "array"
        description: "Errors and their counts encountered during the update"
        items:
          $ref: "#/definitions/ErrorDetailDtoV3"
  JobPartPatchSingleDto:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      dateDue:
        type: "string"
        format: "date-time"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
  JobPartReadyDeleteTranslationDto:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      deleteSettings:
        $ref: "#/definitions/TranslationSegmentsReferenceV2"
      forAllJobs:
        type: "boolean"
        description: "Set true if you want to delete translations for all jobs from\
          \ project from specific workflow step.\n               Default: false"
      workflowLevel:
        type: "integer"
        format: "int32"
        description: "Specifies workflow level for all jobs"
      filter:
        description: "Specifies filtering for all jobs"
        $ref: "#/definitions/JobPartReadyDeleteTranslationFilterDto"
  JobPartReadyDeleteTranslationFilterDto:
    type: "object"
    properties:
      filename:
        type: "string"
      statuses:
        type: "array"
        items:
          type: "string"
      targetLang:
        type: "string"
      provider:
        $ref: "#/definitions/ProviderReference"
      owner:
        $ref: "#/definitions/UidReference"
      dateDue:
        type: "string"
        format: "date-time"
      dueInHours:
        type: "integer"
        format: "int32"
      overdue:
        type: "boolean"
  JobPartReadyReferences:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
  JobPartReadyReferences_2:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
  JobPartReference:
    type: "object"
    properties:
      uid:
        type: "string"
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
      targetLang:
        type: "string"
      workflowLevel:
        type: "integer"
        format: "int32"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
      filename:
        type: "string"
      dateDue:
        type: "string"
        format: "date-time"
      dateCreated:
        type: "string"
        format: "date-time"
      updateSourceDate:
        type: "string"
        format: "date-time"
      imported:
        type: "boolean"
      jobAssignedEmailTemplate:
        $ref: "#/definitions/ObjectReference"
      notificationIntervalInMinutes:
        type: "integer"
        format: "int32"
      continuous:
        type: "boolean"
      sourceFileUid:
        type: "string"
  JobPartReferenceV2:
    type: "object"
    properties:
      uid:
        type: "string"
      innerId:
        type: "string"
        description: "InnerId is a sequential number of a job in a project.\n    \
          \        Jobs created from the same file share the same innerId across workflow\
          \ steps"
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
      targetLang:
        type: "string"
      workflowStep:
        $ref: "#/definitions/ProjectWorkflowStepReference"
      filename:
        type: "string"
      originalFileDirectory:
        type: "string"
      dateDue:
        type: "string"
        format: "date-time"
      dateCreated:
        type: "string"
        format: "date-time"
      importStatus:
        $ref: "#/definitions/ImportStatusDtoV2"
      continuous:
        type: "boolean"
      sourceFileUid:
        type: "string"
      split:
        type: "boolean"
      serverTaskId:
        type: "string"
      owner:
        $ref: "#/definitions/UserReference"
      remoteFile:
        $ref: "#/definitions/JobRemoteFileReference"
      imported:
        type: "boolean"
        description: "Default: false"
  JobPartReferences:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
  JobPartSegmentsDtoV3:
    type: "object"
    required:
    - "job"
    - "segments"
    properties:
      job:
        $ref: "#/definitions/UidReference"
      segments:
        type: "array"
        items:
          type: "string"
  JobPartStatusChangeDto:
    type: "object"
    properties:
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      changedDate:
        type: "string"
        format: "date-time"
      changedBy:
        $ref: "#/definitions/UserReference"
  JobPartStatusChangesDto:
    type: "object"
    properties:
      statusChanges:
        type: "array"
        items:
          $ref: "#/definitions/JobPartStatusChangeDto"
  JobPartUpdateBatchDto:
    type: "object"
    required:
    - "status"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      dateDue:
        type: "string"
        format: "date-time"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
  JobPartUpdateSingleDto:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      dateDue:
        type: "string"
        format: "date-time"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
  JobPartUpdateSourceDto:
    type: "object"
    properties:
      uid:
        type: "string"
      status:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      targetLang:
        type: "string"
      filename:
        type: "string"
      workflowLevel:
        type: "integer"
        format: "int32"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
  JobPartsDto:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/JobPartReference"
  JobPreviewPackageDto:
    type: "object"
    properties:
      uid:
        type: "string"
      fileUid:
        type: "string"
      fileName:
        type: "string"
      organizationRef:
        $ref: "#/definitions/OrganizationReference_2"
      projectUidRef:
        $ref: "#/definitions/UidReference"
      taskId:
        type: "string"
      jobUidRef:
        $ref: "#/definitions/UidReference"
      createdByRef:
        $ref: "#/definitions/UserReference_2"
      dateCreated:
        type: "string"
        format: "date-time"
    description: "Job preview package"
  JobReference:
    type: "object"
    properties:
      uid:
        type: "string"
      jobUid:
        type: "string"
      filename:
        type: "string"
      sourceLocale:
        type: "string"
      targetLocale:
        type: "string"
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      wordCount:
        type: "integer"
        format: "int32"
      progress:
        type: "integer"
        format: "int32"
      level:
        type: "integer"
        format: "int32"
      dueDate:
        type: "string"
        format: "date-time"
      createdDate:
        type: "string"
        format: "date-time"
      jobCreatedDate:
        type: "string"
        format: "date-time"
      lastModifiedDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
      project:
        $ref: "#/definitions/ProjectReference_2"
      createdBy:
        $ref: "#/definitions/UserReference_4"
      owner:
        $ref: "#/definitions/UserReference_4"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference_2"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference_2"
      continuous:
        type: "boolean"
      lqaScore:
        type: "boolean"
      settings:
        $ref: "#/definitions/SettingsReference"
      warnings:
        type: "array"
        items:
          type: "string"
      errors:
        $ref: "#/definitions/ErrorsReference"
      jobMetadata:
        type: "array"
        items:
          $ref: "#/definitions/MetadataReference"
  JobRemoteFileReference:
    type: "object"
    properties:
      humanReadableFolder:
        type: "string"
      humanReadableFileName:
        type: "string"
      encodedFolder:
        type: "string"
      encodedFileName:
        type: "string"
  JobRoleDto:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        enum:
        - "PROJECT_OWNER"
        - "JOB_OWNER"
        - "PROVIDER"
        - "GUEST"
      workflowStep:
        description: "not null only for `PROVIDER` type and project with defined workflow\
          \ steps"
        $ref: "#/definitions/ProjectWorkflowStepDtoV2"
      organizationType:
        type: "string"
        description: "not null only for shared projects"
        enum:
        - "VENDOR"
        - "BUYER"
  JobSegmentDto:
    type: "object"
    properties:
      id:
        type: "string"
      source:
        type: "string"
      translation:
        type: "string"
      createdAt:
        type: "integer"
        format: "int64"
      modifiedAt:
        type: "integer"
        format: "int64"
      createdBy:
        $ref: "#/definitions/UserReference"
      modifiedBy:
        $ref: "#/definitions/UserReference"
      workflowLevel:
        type: "integer"
        format: "int32"
      workflowStep:
        $ref: "#/definitions/WorkflowStepDto"
  JobStatusChangeActionDto:
    type: "object"
    properties:
      requestedStatus:
        type: "string"
        enum:
        - "NEW"
        - "ACCEPTED"
        - "DECLINED"
        - "REJECTED"
        - "DELIVERED"
        - "EMAILED"
        - "COMPLETED"
        - "CANCELLED"
      notifyOwner:
        type: "boolean"
        description: "Default: false; Both project owner and job owner are notified;\n\
          \                    the parameter is subordinated to notification settings\
          \ in the project"
      propagateStatus:
        type: "boolean"
        description: "Default: false;\n        Controls both job status and email\
          \ notifications to previous/next provider"
  JobTranslationMemorySettingsV3Dto:
    type: "object"
    properties:
      useTranslationMemory:
        type: "boolean"
        description: "Pre-translate from translation memory. Default: true"
      translationMemoryThreshold:
        type: "number"
        format: "double"
        description: "Pre-translation threshold percent. Default: 0.7"
        minimum: 0
        maximum: 1.01
        exclusiveMinimum: false
        exclusiveMaximum: false
      confirm100PercentMatches:
        type: "boolean"
        description: "Set segment status to confirmed for: 100% translation memory\
          \ matches. Default: false"
      confirm101PercentMatches:
        type: "boolean"
        description: "Set segment status to confirmed for: 101% translation memory\
          \ matches. Default: false"
      lock100PercentMatches:
        type: "boolean"
        description: "Lock section: 100% translation memory matches. Default: false"
      lock101PercentMatches:
        type: "boolean"
        description: "Lock section: 101% translation memory matches. Default: false"
    description: "Translation memory related settings"
  JobUpdateSourceResponseDto:
    type: "object"
    properties:
      asyncRequest:
        $ref: "#/definitions/AsyncRequestReference"
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/JobPartUpdateSourceDto"
  JobWidgetReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
  JoinTagsWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        sourceTagsCount:
          type: "integer"
          format: "int32"
        translationTagsCount:
          type: "integer"
          format: "int32"
  JsonSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
      htmlSubFilter:
        type: "boolean"
        description: "Default: true"
      icuSubFilter:
        type: "boolean"
        description: "Default: false"
      excludeKeyRegexp:
        type: "string"
      includeKeyRegexp:
        type: "string"
      contextNotePath:
        type: "string"
      maxLenPath:
        type: "string"
      contextKeyPath:
        type: "string"
  LINGUIST:
    allOf:
    - $ref: "#/definitions/AbstractUserCreateDto"
    - type: "object"
      properties:
        editAllTermsInTB:
          type: "boolean"
          description: "Edit all terms in TB. Default: false"
        editTranslationsInTM:
          type: "boolean"
          description: "Edit translations in TM. Default: false"
        enableMT:
          type: "boolean"
          description: "Enable MT. Default: true"
        mayRejectJobs:
          type: "boolean"
          description: "Reject jobs. Default: false"
        mayCompleteUnconfirmedJobs:
          type: "boolean"
          description: "Complete unconfirmed jobs. Default: false"
        sourceLocales:
          type: "array"
          items:
            type: "string"
        targetLocales:
          type: "array"
          items:
            type: "string"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        clients:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        domains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        subDomains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        netRateScheme:
          description: "Net rate scheme"
          $ref: "#/definitions/UidReference"
        translationPriceList:
          description: "Price list"
          $ref: "#/definitions/UidReference"
  LINGUIST_EDIT:
    allOf:
    - $ref: "#/definitions/AbstractUserEditDto"
    - type: "object"
      properties:
        editAllTermsInTB:
          type: "boolean"
          description: "Edit all terms in TB. Default: false"
        editTranslationsInTM:
          type: "boolean"
          description: "Edit translations in TM. Default: false"
        enableMT:
          type: "boolean"
          description: "Enable MT. Default: true"
        mayRejectJobs:
          type: "boolean"
          description: "Reject jobs. Default: false"
        mayCompleteUnconfirmedJobs:
          type: "boolean"
          description: "Complete unconfirmed jobs. Default: false"
        sourceLocales:
          type: "array"
          items:
            type: "string"
        targetLocales:
          type: "array"
          items:
            type: "string"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        clients:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        domains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        subDomains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        netRateScheme:
          description: "Net rate scheme"
          $ref: "#/definitions/UidReference"
        translationPriceList:
          description: "Price list"
          $ref: "#/definitions/UidReference"
  LINGUIST_RESPONSE:
    allOf:
    - $ref: "#/definitions/UserDetailsDtoV3"
    - type: "object"
      properties:
        editAllTermsInTB:
          type: "boolean"
        editTranslationsInTM:
          type: "boolean"
        enableMT:
          type: "boolean"
        mayRejectJobs:
          type: "boolean"
        mayCompleteUnconfirmedJobs:
          type: "boolean"
        sourceLocales:
          type: "array"
          items:
            type: "string"
        targetLocales:
          type: "array"
          items:
            type: "string"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/WorkflowStepReferenceV3"
        clients:
          type: "array"
          items:
            $ref: "#/definitions/ClientReference_4"
        domains:
          type: "array"
          items:
            $ref: "#/definitions/DomainReference_4"
        subDomains:
          type: "array"
          items:
            $ref: "#/definitions/SubDomainReference_4"
        netRateScheme:
          $ref: "#/definitions/DiscountSchemeReference_3"
        translationPriceList:
          $ref: "#/definitions/PriceListReference"
  LQA:
    allOf:
    - $ref: "#/definitions/CommonConversationDto"
    - type: "object"
      properties:
        references:
          $ref: "#/definitions/LQAReferences"
        lqaDescription:
          type: "string"
  LQAConversationDto:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        description: "LQA"
      dateCreated:
        type: "string"
        format: "date-time"
      dateModified:
        type: "string"
        format: "date-time"
      dateEdited:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/MentionableUserDto"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/CommentDto"
      status:
        $ref: "#/definitions/StatusDto"
      deleted:
        type: "boolean"
      references:
        $ref: "#/definitions/LQAReferences"
      lqaDescription:
        type: "string"
  LQAConversationsListDto:
    type: "object"
    properties:
      conversations:
        type: "array"
        items:
          $ref: "#/definitions/LQAConversationDto"
  LQAReference:
    type: "object"
    required:
    - "errorCategoryId"
    - "severityId"
    properties:
      errorCategoryId:
        type: "integer"
        format: "int32"
        minimum: 1
      severityId:
        type: "integer"
        format: "int32"
        minimum: 1
      user:
        description: "Originator User ID field."
        $ref: "#/definitions/IdReference"
      originator:
        description: "Originator of the segment. Field UID takes precedence over 'user'\
          \ IdReference."
        $ref: "#/definitions/MentionableUserDto"
      repeated:
        type: "string"
        description: "Default: `NOT_REPEATED`"
        enum:
        - "REPEATED"
        - "NOT_REPEATED"
      origin:
        type: "string"
        enum:
        - "HUMAN"
  LQAReferences:
    type: "object"
    required:
    - "lqa"
    - "segmentId"
    - "transGroupId"
    properties:
      taskId:
        type: "string"
        readOnly: true
      jobPartUid:
        type: "string"
        readOnly: true
      transGroupId:
        type: "integer"
        format: "int32"
        minimum: 0
      segmentId:
        type: "string"
      conversationTitle:
        type: "string"
      conversationTitleOffset:
        type: "integer"
        format: "int32"
        minimum: 0
      commentedText:
        type: "string"
      correlation:
        $ref: "#/definitions/ReferenceCorrelation"
      lqa:
        type: "array"
        items:
          $ref: "#/definitions/LQAReference"
        maxItems: 1
        minItems: 1
  LanguageDto_2:
    type: "object"
    properties:
      code:
        type: "string"
      name:
        type: "string"
      rfc:
        type: "string"
      android:
        type: "string"
      androidBcp:
        type: "string"
  LanguageListDto:
    type: "object"
    required:
    - "languages"
    properties:
      languages:
        type: "array"
        items:
          $ref: "#/definitions/LanguageDto_2"
    description: "envelope for list of languages"
  LanguageMetadata:
    type: "object"
    properties:
      termsCount:
        type: "integer"
        format: "int64"
  LanguageMetadata1:
    type: "object"
    properties:
      segmentsCount:
        type: "integer"
        format: "int64"
  LastLoginDto:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/UserReference"
      lastLoginDate:
        type: "string"
        format: "date-time"
  LeadingAndTrailingSpacesWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        srcPosition:
          $ref: "#/definitions/Position"
        srcWhitespaces:
          type: "string"
        tgtPosition:
          $ref: "#/definitions/Position"
        tgtWhitespaces:
          type: "string"
        suggestion:
          $ref: "#/definitions/Suggestion"
  Linguist:
    allOf:
    - $ref: "#/definitions/AbstractProjectDto"
    - type: "object"
      properties: {}
  Linguist (v2):
    allOf:
    - $ref: "#/definitions/AbstractProjectDtoV2"
    - type: "object"
      properties: {}
  LocaleConventionWeightsDto:
    type: "object"
    properties:
      localeConvention:
        $ref: "#/definitions/ToggleableWeightDto"
      addressFormat:
        $ref: "#/definitions/ToggleableWeightDto"
      dateFormat:
        $ref: "#/definitions/ToggleableWeightDto"
      currencyFormat:
        $ref: "#/definitions/ToggleableWeightDto"
      measurementFormat:
        $ref: "#/definitions/ToggleableWeightDto"
      shortcutKey:
        $ref: "#/definitions/ToggleableWeightDto"
      telephoneFormat:
        $ref: "#/definitions/ToggleableWeightDto"
  LoginDto:
    type: "object"
    required:
    - "password"
    - "userName"
    properties:
      userName:
        type: "string"
      password:
        type: "string"
      code:
        type: "string"
        description: "Required only for 2-factor authentication"
  LoginOtherDto:
    type: "object"
    required:
    - "userName"
    properties:
      userName:
        type: "string"
  LoginOtherV3Dto:
    type: "object"
    required:
    - "userName"
    properties:
      userUid:
        type: "string"
        description: "When not filled, default user of identity will be logged in"
      userName:
        type: "string"
  LoginResponseDto:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/UserReference"
      token:
        type: "string"
      expires:
        type: "string"
        format: "date-time"
      lastInvalidateAllSessionsPerformed:
        type: "string"
        format: "date-time"
  LoginResponseV3Dto:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/UserReference"
      token:
        type: "string"
      expires:
        type: "string"
        format: "date-time"
      lastInvalidateAllSessionsPerformed:
        type: "string"
        format: "date-time"
  LoginToSessionDto:
    type: "object"
    required:
    - "password"
    - "userName"
    properties:
      userName:
        type: "string"
      password:
        type: "string"
      rememberMe:
        type: "boolean"
  LoginToSessionResponseDto:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/UserReference"
      cookie:
        type: "string"
      csrfToken:
        type: "string"
  LoginToSessionResponseV3Dto:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/UserReference"
      cookie:
        type: "string"
      csrfToken:
        type: "string"
  LoginToSessionV3Dto:
    type: "object"
    required:
    - "password"
    - "userName"
    properties:
      userUid:
        type: "string"
        description: "When not filled, default user of identity will be logged in"
      userName:
        type: "string"
      password:
        type: "string"
      rememberMe:
        type: "boolean"
      twoFactorCode:
        type: "integer"
        format: "int32"
      captchaCode:
        type: "string"
  LoginUserDto:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/IdmUserReference"
      csrfToken:
        type: "string"
      organization:
        $ref: "#/definitions/OrganizationReference"
      edition:
        $ref: "#/definitions/EditionDto"
      features:
        $ref: "#/definitions/FeaturesDto"
  LoginV3Dto:
    type: "object"
    required:
    - "password"
    - "userName"
    properties:
      userUid:
        type: "string"
        description: "When not filled, default user of identity will be logged in"
      userName:
        type: "string"
      password:
        type: "string"
      code:
        type: "string"
        description: "Required only for 2-factor authentication"
  LoginWithAppleDto:
    type: "object"
    required:
    - "codeOrRefreshToken"
    properties:
      codeOrRefreshToken:
        type: "string"
  LoginWithGoogleDto:
    type: "object"
    required:
    - "idToken"
    properties:
      idToken:
        type: "string"
  LqaErrorCategoryDto:
    type: "object"
    properties:
      errorCategoryId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      enabled:
        type: "boolean"
      errorCategories:
        type: "array"
        items:
          $ref: "#/definitions/LqaErrorCategoryDto"
  LqaProfileAssessmentDto:
    type: "object"
    required:
    - "dateCreated"
    - "errorCategories"
    - "isDefault"
    - "name"
    - "organization"
    - "passFailThreshold"
    - "penaltyPoints"
    - "uid"
    properties:
      uid:
        type: "string"
        example: "string"
        description: "UID of the profile"
      name:
        type: "string"
        description: "Name of the profile"
      errorCategories:
        $ref: "#/definitions/ErrorCategoriesDto"
      penaltyPoints:
        $ref: "#/definitions/PenaltyPointsDto"
      passFailThreshold:
        $ref: "#/definitions/PassFailThresholdDto"
      isDefault:
        type: "boolean"
        description: "If profile is set as default for organization"
      dateCreated:
        type: "string"
        format: "date-time"
      organization:
        $ref: "#/definitions/UidReference"
  LqaProfileDetailDto:
    type: "object"
    required:
    - "createdBy"
    - "dateCreated"
    - "errorCategories"
    - "isDefault"
    - "name"
    - "organization"
    - "passFailThreshold"
    - "penaltyPoints"
    - "uid"
    properties:
      uid:
        type: "string"
        example: "string"
        description: "UID of the profile"
      name:
        type: "string"
        description: "Name of the profile"
      errorCategories:
        $ref: "#/definitions/ErrorCategoriesDto"
      penaltyPoints:
        $ref: "#/definitions/PenaltyPointsDto"
      passFailThreshold:
        $ref: "#/definitions/PassFailThresholdDto"
      isDefault:
        type: "boolean"
        description: "If profile is set as default for organization"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      organization:
        $ref: "#/definitions/UidReference"
  LqaProfileReferenceDto:
    type: "object"
    required:
    - "createdBy"
    - "dateCreated"
    - "isDefault"
    - "name"
    - "organization"
    - "uid"
    properties:
      uid:
        type: "string"
        example: "string"
        description: "UID of the profile"
      name:
        type: "string"
        description: "Name of the profile"
      isDefault:
        type: "boolean"
        description: "If profile is set as default for organization"
      createdBy:
        description: "User who created the profile"
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
        description: "When profile was created"
      organization:
        $ref: "#/definitions/UidReference"
  LqaProfilesForWsV2Dto:
    type: "object"
    properties:
      workflowStep:
        $ref: "#/definitions/IdReference"
      lqaProfile:
        $ref: "#/definitions/UidReference"
  LqaProfilesForWsV3Dto:
    type: "object"
    properties:
      workflowStep:
        $ref: "#/definitions/IdReference"
      lqaProfile:
        $ref: "#/definitions/UidReference"
  LqaReportEmailRequestDto:
    type: "object"
    required:
    - "jobParts"
    - "recipientUsers"
    properties:
      jobParts:
        type: "array"
        description: "JobParts for which the LQA reports should be sent"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 0
      recipientUsers:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 0
      ccAddress:
        type: "string"
      bccAddress:
        type: "string"
      message:
        type: "string"
        description: "Must not be empty if `organizationEmailTemplate` is not null."
      subject:
        type: "string"
        minLength: 1
        maxLength: 2147483647
      organizationEmailTemplate:
        $ref: "#/definitions/UidReference"
  LqaReportLinkDto:
    type: "object"
    properties:
      url:
        type: "string"
        description: "Link of the report"
      expires:
        type: "string"
        format: "date-time"
        description: "When link expires"
      size:
        type: "integer"
        format: "int64"
        description: "Size of the linked file in bytes"
    description: "Sharable link of LQA report"
  LqaReportRecipientDto:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "USER"
        - "ORGANIZATION"
      userUid:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      organizationName:
        type: "string"
      email:
        type: "string"
  LqaSettingsDto:
    type: "object"
    properties:
      enabled:
        type: "boolean"
      severities:
        type: "array"
        items:
          $ref: "#/definitions/LqaSeverityDto"
      categories:
        type: "array"
        items:
          $ref: "#/definitions/LqaErrorCategoryDto"
  LqaSeverityDto:
    type: "object"
    properties:
      severityId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      weight:
        type: "integer"
        format: "int32"
  MORAVIA:
    allOf:
    - $ref: "#/definitions/QACheckDtoV2"
    - type: "object"
      properties:
        enabled:
          type: "boolean"
        profile:
          type: "string"
        ignorable:
          type: "boolean"
        instant:
          type: "boolean"
  MTSettingsPerLanguageDto:
    type: "object"
    required:
    - "targetLang"
    properties:
      targetLang:
        type: "string"
        description: "mtSettings is set for whole project if targetLang == null"
      machineTranslateSettings:
        $ref: "#/definitions/MachineTranslateSettingsDto"
  MTSettingsPerLanguageListDto:
    type: "object"
    properties:
      mtSettingsPerLangList:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/MTSettingsPerLanguageDto"
  MTSettingsPerLanguageReference:
    type: "object"
    required:
    - "targetLang"
    properties:
      targetLang:
        type: "string"
        description: "mtSettings is set for whole project if targetLang == null"
      machineTranslateSettings:
        $ref: "#/definitions/MachineTranslateSettingsReference"
  MacSettingsDto:
    type: "object"
    properties:
      htmlSubfilter:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
      icuSubFilter:
        type: "boolean"
        description: "Default: `false`"
  MachineTranslateResponse:
    type: "object"
    properties:
      translations:
        type: "array"
        items:
          type: "string"
  MachineTranslateSettingsDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      baseName:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      category:
        type: "string"
      default_:
        type: "boolean"
      includeTags:
        type: "boolean"
      mtQualityEstimation:
        type: "boolean"
      enabled:
        type: "boolean"
      args:
        type: "object"
        additionalProperties:
          type: "string"
      langs:
        $ref: "#/definitions/MachineTranslateSettingsLangsDto"
  MachineTranslateSettingsLangsDto:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Id"
      sourceLang:
        type: "string"
        description: "Source language for CUSTOMIZABLE engine"
      targetLangs:
        type: "array"
        description: "List of target languages for the CUSTOMIZABLE engine"
        items:
          type: "string"
  MachineTranslateSettingsPbmDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      baseName:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      default_:
        type: "boolean"
      includeTags:
        type: "boolean"
      mtQualityEstimation:
        type: "boolean"
      args:
        type: "object"
        additionalProperties:
          type: "string"
      payForMtPossible:
        type: "boolean"
      payForMtActive:
        type: "boolean"
      charCount:
        type: "integer"
        format: "int32"
      sharingSettings:
        type: "integer"
        format: "int32"
      langs:
        $ref: "#/definitions/MachineTranslateSettingsLangsDto"
  MachineTranslateSettingsReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
  MachineTranslateSettingsSimpleDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      baseName:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      category:
        type: "string"
      enabled:
        type: "boolean"
      glossarySupported:
        type: "boolean"
  MachineTranslateStatusDto:
    type: "object"
    properties:
      uid:
        type: "string"
      ok:
        type: "boolean"
      error:
        type: "string"
  MachineTranslationSettingsDto_5:
    type: "object"
    properties:
      useMachineTranslation:
        type: "boolean"
        description: "Pre-translate from machine translation. Default: false"
      machineTranslationBehavior:
        type: "string"
        description: "Machine translation behavior. Default: APPLY_MT_ABOVE_THRESHOLD"
        enum:
        - "APPLY_MT_ABOVE_THRESHOLD"
        - "COMPARE_AND_BEST_MATCH"
      lock100PercentMatches:
        type: "boolean"
        description: "Lock section: 100% machine translation suggestions. Default:\
          \ false"
      confirmMatches:
        type: "boolean"
        description: "Set segment status to confirmed for:\n                machine\
          \ translation suggestions above `confirmMatchesThreshold`. Default: false"
      confirmMatchesThreshold:
        type: "number"
        format: "double"
        description: "Machine translation suggestions percent. Default: `1.0`"
        minimum: 0
        maximum: 1
        exclusiveMinimum: false
        exclusiveMaximum: false
      useAltTransOnly:
        type: "boolean"
        description: "Do not put machine translations to target and use alt-trans\
          \ fields (alt-trans in mxlf).\nDefault: false"
      mtQeMatchesInEditors:
        type: "boolean"
        description: "Display quality-estimated machine translation suggestions in\
          \ the CAT Editor. Default: false"
      mtForTMAbove100:
        type: "boolean"
        description: "Use machine translation for segments with a TM match of 100%\
          \ or more. Default: false"
      mtSuggestOnlyTmBelow:
        type: "boolean"
        description: "Suggest MT only for segments with a TM match below. Default:\
          \ true"
      mtSuggestOnlyTmBelowThreshold:
        type: "number"
        format: "double"
        description: "Suggest MT only for segments with a TM match below threshold.\
          \ Default: 1.0"
        minimum: 0
        maximum: 1.01
        exclusiveMinimum: false
        exclusiveMaximum: false
    description: "Machine translation related settings"
  MalformedWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        message:
          type: "string"
  Match:
    type: "object"
    properties:
      beginIndex:
        type: "integer"
        format: "int32"
      text:
        type: "string"
  MatchCounts101Dto:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto"
      match95:
        $ref: "#/definitions/CountsDto"
      match85:
        $ref: "#/definitions/CountsDto"
      match75:
        $ref: "#/definitions/CountsDto"
      match50:
        $ref: "#/definitions/CountsDto"
      match0:
        $ref: "#/definitions/CountsDto"
      match101:
        $ref: "#/definitions/CountsDto"
  MatchCounts101Dto_2:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto_2"
      match95:
        $ref: "#/definitions/CountsDto_2"
      match85:
        $ref: "#/definitions/CountsDto_2"
      match75:
        $ref: "#/definitions/CountsDto_2"
      match50:
        $ref: "#/definitions/CountsDto_2"
      match0:
        $ref: "#/definitions/CountsDto_2"
      match101:
        $ref: "#/definitions/CountsDto_2"
  MatchCounts101Dto_3:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto_3"
      match95:
        $ref: "#/definitions/CountsDto_3"
      match85:
        $ref: "#/definitions/CountsDto_3"
      match75:
        $ref: "#/definitions/CountsDto_3"
      match50:
        $ref: "#/definitions/CountsDto_3"
      match0:
        $ref: "#/definitions/CountsDto_3"
      match101:
        $ref: "#/definitions/CountsDto_3"
  MatchCountsDto:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto"
      match95:
        $ref: "#/definitions/CountsDto"
      match85:
        $ref: "#/definitions/CountsDto"
      match75:
        $ref: "#/definitions/CountsDto"
      match50:
        $ref: "#/definitions/CountsDto"
      match0:
        $ref: "#/definitions/CountsDto"
  MatchCountsDto_2:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto_2"
      match95:
        $ref: "#/definitions/CountsDto_2"
      match85:
        $ref: "#/definitions/CountsDto_2"
      match75:
        $ref: "#/definitions/CountsDto_2"
      match50:
        $ref: "#/definitions/CountsDto_2"
      match0:
        $ref: "#/definitions/CountsDto_2"
  MatchCountsDto_3:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto_3"
      match95:
        $ref: "#/definitions/CountsDto_3"
      match85:
        $ref: "#/definitions/CountsDto_3"
      match75:
        $ref: "#/definitions/CountsDto_3"
      match50:
        $ref: "#/definitions/CountsDto_3"
      match0:
        $ref: "#/definitions/CountsDto_3"
  MatchCountsNTDto:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto_2"
      match99:
        $ref: "#/definitions/CountsDto_2"
  MatchCountsNTDtoV1:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto"
      match99:
        $ref: "#/definitions/CountsDto"
  MatchCountsNTDto_2:
    type: "object"
    properties:
      match100:
        $ref: "#/definitions/CountsDto_3"
      match95:
        $ref: "#/definitions/CountsDto_3"
      match85:
        $ref: "#/definitions/CountsDto_3"
      match75:
        $ref: "#/definitions/CountsDto_3"
      match50:
        $ref: "#/definitions/CountsDto_3"
      match0:
        $ref: "#/definitions/CountsDto_3"
  MdSettingsDto:
    type: "object"
    properties:
      hardLineBreaksSegments:
        type: "boolean"
        description: "Default: true"
      preserveWhiteSpaces:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
      customElements:
        type: "string"
      ignoredBlockPrefixes:
        type: "string"
      flavor:
        type: "string"
        description: "Default: PLAIN"
        enum:
        - "PLAIN"
        - "PHP"
        - "GITHUB"
      processJekyllFrontMatter:
        type: "boolean"
        description: "Default: false"
      extractCodeBlocks:
        type: "boolean"
        description: "Default: true"
      notEscapedCharacters:
        type: "string"
      excludeCodeElements:
        type: "boolean"
        description: "Default: false"
  MemTransMachineTranslateSettingsDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      baseName:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      category:
        type: "string"
      default_:
        type: "boolean"
      includeTags:
        type: "boolean"
      mtQualityEstimation:
        type: "boolean"
      enabled:
        type: "boolean"
      glossarySupported:
        type: "boolean"
      args:
        type: "object"
        additionalProperties:
          type: "string"
      langs:
        $ref: "#/definitions/MachineTranslateSettingsLangsDto"
      charCount:
        type: "integer"
        format: "int32"
        description: "Unknown value is represented by value: -1"
  MemsourceTranslateProfileDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      locked:
        type: "boolean"
      memsourceTranslate:
        $ref: "#/definitions/MemTransMachineTranslateSettingsDto"
      projects:
        type: "array"
        items:
          $ref: "#/definitions/ProjectReference"
      projectsCount:
        type: "integer"
        format: "int32"
      projectTemplatesCount:
        type: "integer"
        format: "int32"
      engines:
        type: "array"
        items:
          $ref: "#/definitions/MachineTranslateSettingsSimpleDto"
      glossaries:
        type: "array"
        items:
          $ref: "#/definitions/GlossarySimpleDto"
  MemsourceTranslateProfileSimpleDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      memsourceTranslate:
        $ref: "#/definitions/MemTransMachineTranslateSettingsDto"
      locked:
        type: "boolean"
  MentionDto:
    type: "object"
    required:
    - "mentionType"
    properties:
      mentionType:
        type: "string"
        enum:
        - "USER"
        - "GROUP"
      mentionGroupType:
        type: "string"
        enum:
        - "JOB"
        - "OWNERS"
        - "PROVIDERS"
        - "GUESTS"
        - "WORKFLOW_STEP"
      uidReference:
        $ref: "#/definitions/UidReference"
      userReferences:
        type: "array"
        items:
          $ref: "#/definitions/MentionableUserDto"
      mentionableGroup:
        $ref: "#/definitions/MentionableGroupDto"
      tag:
        type: "string"
  MentionableGroupDto:
    type: "object"
    properties:
      groupType:
        type: "string"
        enum:
        - "JOB"
        - "OWNERS"
        - "PROVIDERS"
        - "GUESTS"
        - "WORKFLOW_STEP"
      groupName:
        type: "string"
      groupReference:
        $ref: "#/definitions/UidReference"
  MentionableUserDto:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      userName:
        type: "string"
      email:
        type: "string"
      role:
        type: "string"
        enum:
        - "SYS_ADMIN"
        - "SYS_ADMIN_READ"
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      id:
        type: "string"
      uid:
        type: "string"
      unavailable:
        type: "boolean"
      jobRoles:
        type: "array"
        items:
          $ref: "#/definitions/JobRoleDto"
  MetadataField:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "CLIENT"
        - "DOMAIN"
        - "SUBDOMAIN"
        - "FILENAME"
  MetadataOptionReference:
    type: "object"
    properties:
      uid:
        type: "string"
      value:
        type: "string"
  MetadataPrioritySettingsDto:
    type: "object"
    required:
    - "prioritizedFields"
    properties:
      prioritizedFields:
        type: "array"
        items:
          $ref: "#/definitions/MetadataField"
  MetadataReference:
    type: "object"
    properties:
      uid:
        type: "string"
      fieldName:
        type: "string"
      value:
        type: "string"
      options:
        type: "array"
        items:
          $ref: "#/definitions/MetadataOptionReference"
  MetadataResponse:
    type: "object"
    properties:
      languages:
        type: "array"
        items:
          type: "string"
      termsCount:
        type: "integer"
        format: "int64"
      metadataByLanguage:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/LanguageMetadata"
  MetadataResponse_2:
    type: "object"
    properties:
      segmentsCount:
        type: "integer"
        format: "int64"
      deduplicatedSegmentsCount:
        type: "integer"
        format: "int64"
      metadataByLanguage:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/LanguageMetadata1"
  MetadataTbDto:
    type: "object"
    properties:
      termsCount:
        type: "integer"
        format: "int64"
      metadataByLanguage:
        type: "object"
        additionalProperties:
          type: "integer"
          format: "int64"
  MifSettingsDto:
    type: "object"
    properties:
      extractBodyPages:
        type: "boolean"
        description: "Default: true"
      extractReferencePages:
        type: "boolean"
        description: "Default: false"
      extractMasterPages:
        type: "boolean"
        description: "Default: true"
      extractHiddenPages:
        type: "boolean"
        description: "Default: false"
      extractVariables:
        type: "boolean"
        description: "Default: false"
      extractIndexMarkers:
        type: "boolean"
        description: "Default: true"
      extractLinks:
        type: "boolean"
        description: "Default: false"
      extractXRefDef:
        type: "boolean"
        description: "Default: false"
      extractPgfNumFormat:
        type: "boolean"
        description: "Default: true"
      extractCustomReferencePages:
        type: "boolean"
        description: "Default: true"
      extractDefaultReferencePages:
        type: "boolean"
        description: "Default: false"
      extractUsedVariables:
        type: "boolean"
        description: "Default: true"
      extractHiddenCondText:
        type: "boolean"
        description: "Default: false"
      extractUsedXRefDef:
        type: "boolean"
        description: "Default: true"
      extractUsedPgfNumFormat:
        type: "boolean"
        description: "Default: true"
      tagRegexp:
        type: "string"
  MissingNonTranslatableAnnotationWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        text:
          type: "string"
        beginIndexes:
          type: "array"
          items:
            type: "integer"
            format: "int32"
  MissingNumbersV3WarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        number:
          type: "string"
        positions:
          type: "array"
          items:
            $ref: "#/definitions/Position"
  MissingNumbersWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        missingNumbers:
          type: "array"
          items:
            type: "string"
  MisspelledWord:
    type: "object"
    properties:
      word:
        type: "string"
      offset:
        type: "integer"
        format: "int32"
  MisspelledWordDto:
    type: "object"
    properties:
      word:
        type: "string"
      offset:
        type: "integer"
        format: "int32"
  MoraviaWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        message:
          type: "string"
        subType:
          type: "string"
  MultilingualCsvSettingsDto:
    type: "object"
    properties:
      sourceColumns:
        type: "string"
      targetColumns:
        type: "string"
      contextNoteColumns:
        type: "string"
      contextKeyColumns:
        type: "string"
      tagRegexp:
        type: "string"
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
      segmentation:
        type: "boolean"
        description: "Default: true"
      delimiter:
        type: "string"
        description: "Default: ,"
        minLength: 0
        maxLength: 255
      delimiterType:
        type: "string"
        description: "Default: COMMA"
        minLength: 0
        maxLength: 255
        enum:
        - "TAB"
        - "COMMA"
        - "SEMICOLON"
        - "OTHER"
      importRows:
        type: "string"
      maxLenColumns:
        type: "string"
      allTargetColumns:
        type: "object"
        description: "Format: \"language\":\"column\"; example: {\"en\": \"A\", \"\
          sk\": \"B\"}"
        additionalProperties:
          type: "string"
      nonEmptySegmentAction:
        type: "string"
        enum:
        - "NONE"
        - "CONFIRM"
        - "LOCK"
        - "CONFIRM_LOCK"
      saveConfirmedSegmentsToTm:
        type: "boolean"
  MultilingualXlsSettingsDto:
    type: "object"
    properties:
      sourceColumn:
        type: "string"
      targetColumns:
        type: "object"
        description: "Format: \"language\":\"column\"; example: {\"en\": \"A\", \"\
          sk\": \"B\"}"
        additionalProperties:
          type: "string"
      contextNoteColumn:
        type: "string"
      contextKeyColumn:
        type: "string"
      tagRegexp:
        type: "string"
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
      segmentation:
        type: "boolean"
        description: "Default: true"
      importRows:
        type: "string"
      maxLenColumn:
        type: "string"
      nonEmptySegmentAction:
        type: "string"
        enum:
        - "NONE"
        - "CONFIRM"
        - "LOCK"
        - "CONFIRM_LOCK"
      saveConfirmedSegmentsToTm:
        type: "boolean"
  MultilingualXmlSettingsDto:
    type: "object"
    properties:
      translatableElementsXPath:
        type: "string"
      sourceElementsXPath:
        type: "string"
      targetElementsXPaths:
        type: "object"
        description: "'Format: \"language\":\"xpath\";\n            example = '{\"\
          en\": \"tuv[@lang='en']/seg\", \"sk\": \"tuv[@lang='sk']/seg\"}"
        additionalProperties:
          type: "string"
      inlineElementsNonTranslatableXPath:
        type: "string"
      tagRegexp:
        type: "string"
      segmentation:
        type: "boolean"
        description: "Default: `true`"
      htmlSubFilter:
        type: "boolean"
        description: "Default: `false`"
      contextKeyXPath:
        type: "string"
      contextNoteXPath:
        type: "string"
      maxLenXPath:
        type: "string"
      preserveWhitespace:
        type: "boolean"
        description: "Default: `false`"
      preserveCharEntities:
        type: "string"
      xslUrl:
        type: "string"
      xslFile:
        type: "string"
        description: "UID of uploaded XSL file, overrides xslUrl"
      nonEmptySegmentAction:
        type: "string"
        enum:
        - "NONE"
        - "CONFIRM"
        - "LOCK"
        - "CONFIRM_LOCK"
      saveConfirmedSegmentsToTm:
        type: "boolean"
      icuSubFilter:
        type: "boolean"
        description: "Default: `false`"
  MultipartFile:
    type: "object"
    properties:
      name:
        type: "string"
      bytes:
        type: "array"
        items:
          type: "string"
          format: "byte"
      empty:
        type: "boolean"
      size:
        type: "integer"
        format: "int64"
      inputStream:
        $ref: "#/definitions/InputStream"
      contentType:
        type: "string"
      originalFilename:
        type: "string"
  MultipleSpacesV3WarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        spaces:
          type: "string"
        positions:
          type: "array"
          items:
            $ref: "#/definitions/Position"
  MultipleSpacesWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  NUMBER:
    allOf:
    - $ref: "#/definitions/QACheckDtoV2"
    - type: "object"
      properties:
        ignorable:
          type: "boolean"
        enabled:
          type: "boolean"
        value:
          $ref: "#/definitions/Number"
        instant:
          type: "boolean"
  Name:
    type: "object"
    required:
    - "familyName"
    - "givenName"
    properties:
      givenName:
        type: "string"
      familyName:
        type: "string"
  NameDto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  NestedTagsWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        misplacedTargetTag:
          type: "string"
  NetRateScheme:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      organization:
        $ref: "#/definitions/OrganizationReference"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      workflowStepNetSchemes:
        type: "array"
        items:
          $ref: "#/definitions/NetRateSchemeWorkflowStepReference"
      rates:
        $ref: "#/definitions/DiscountSettingsDto"
  NetRateSchemeEdit:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      rates:
        $ref: "#/definitions/DiscountSettingsDto"
  NetRateSchemeReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      isDefault:
        type: "boolean"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
  NetRateSchemeWorkflowStep:
    type: "object"
    properties:
      id:
        type: "string"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
      rates:
        $ref: "#/definitions/DiscountSettingsDto"
  NetRateSchemeWorkflowStepCreate:
    type: "object"
    required:
    - "workflowStep"
    properties:
      workflowStep:
        $ref: "#/definitions/IdReference"
      rates:
        $ref: "#/definitions/DiscountSettingsDto"
  NetRateSchemeWorkflowStepEdit:
    type: "object"
    properties:
      rates:
        $ref: "#/definitions/DiscountSettingsDto"
  NetRateSchemeWorkflowStepReference:
    type: "object"
    properties:
      id:
        type: "string"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
  NewerAtLowerLevelWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  NonConformingTermWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        term:
          type: "string"
        positions:
          type: "array"
          items:
            $ref: "#/definitions/Position"
        suggestedTargetTerms:
          type: "array"
          items:
            $ref: "#/definitions/Term"
  NonTranslatableSettingsDto_5:
    type: "object"
    properties:
      preTranslateNonTranslatables:
        type: "boolean"
        description: "Pre-translate non-translatables. Default: false"
      confirm100PercentMatches:
        type: "boolean"
        description: "Set segment status to confirmed for: 100% non-translatables.\
          \ Default: false"
      lock100PercentMatches:
        type: "boolean"
        description: "Lock section: 100% non-translatables. Default: false"
      nonTranslatablesInEditors:
        type: "boolean"
        description: "If non-translatables are enabled in Editors."
    description: "Non-translatables related settings"
  NotConfirmedWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  NotificationDto:
    type: "object"
    properties:
      uid:
        type: "string"
      seen:
        type: "boolean"
      dateCreated:
        type: "string"
        format: "date-time"
      dateSeen:
        type: "string"
        format: "date-time"
      projectUid:
        type: "string"
      jobPartUid:
        type: "string"
      commentUid:
        type: "string"
      messageBody:
        type: "string"
      messageTitle:
        type: "string"
  NotifyJobPartsRequestDto:
    type: "object"
    required:
    - "emailTemplate"
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      emailTemplate:
        $ref: "#/definitions/IdReference"
      cc:
        type: "array"
        items:
          type: "string"
      bcc:
        type: "array"
        items:
          type: "string"
  NotifyProviderDto:
    type: "object"
    required:
    - "organizationEmailTemplate"
    properties:
      organizationEmailTemplate:
        $ref: "#/definitions/IdReference"
      notificationIntervalInMinutes:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 1440
  Number:
    type: "object"
  ObjectReference:
    type: "object"
  Order:
    type: "object"
    properties:
      direction:
        type: "string"
        enum:
        - "ASC"
        - "DESC"
      property:
        type: "string"
  OrganizationEmailTemplateDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      type:
        type: "string"
        enum:
        - "JobAssigned"
        - "JobStatusChanged"
        - "NextWorkflowStep"
        - "JobRejected"
        - "LoginInfo"
        - "ProjectTransferredToBuyer"
        - "SharedProjectAssigned"
        - "SharedProjectStatusChanged"
        - "AutomatedProjectCreated"
        - "AutomatedProjectSourceUpdated"
        - "AutomatedProjectStatusChanged"
        - "JobWidgetProjectQuotePrepared"
        - "JobWidgetProjectQuotePreparationFailure"
        - "JobWidgetProjectCreated"
        - "JobWidgetProjectCompleted"
        - "CmsQuoteReady"
        - "CmsWorkCompleted"
        - "CmsJobRejected"
        - "QUOTE_UPDATED"
        - "QUOTE_STATUS_CHANGED"
        - "LQA_SHARE_REPORT"
      name:
        type: "string"
      subject:
        type: "string"
      body:
        type: "string"
      ccAddress:
        type: "string"
      bccAddress:
        type: "string"
  OrganizationReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
  OrganizationReference_2:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
  OtherWeightsDto:
    type: "object"
    properties:
      other:
        $ref: "#/definitions/ToggleableWeightDto"
  PORTAL_MEMBER:
    allOf:
    - $ref: "#/definitions/AbstractUserCreateDto"
    - type: "object"
      properties: {}
  PORTAL_MEMBER_EDIT:
    allOf:
    - $ref: "#/definitions/AbstractUserEditDto"
    - type: "object"
      properties: {}
  PORTAL_MEMBER_RESPONSE:
    allOf:
    - $ref: "#/definitions/UserDetailsDtoV3"
    - type: "object"
      properties: {}
  PROJECT_MANAGER:
    allOf:
    - $ref: "#/definitions/AbstractUserCreateDto"
    - type: "object"
      properties:
        sourceLocales:
          type: "array"
          items:
            type: "string"
        targetLocales:
          type: "array"
          items:
            type: "string"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        clients:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        domains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        subDomains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        projectCreate:
          type: "boolean"
          description: "Enable project creation. Default: true"
        projectViewOther:
          type: "boolean"
          description: "View projects created by other users. Default: true"
        projectEditOther:
          type: "boolean"
          description: "Modify projects created by other users. Default: true"
        projectDeleteOther:
          type: "boolean"
          description: "Delete projects created by other users. Default: true"
        projectClients:
          type: "array"
          description: "Access projects of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        projectBusinessUnits:
          type: "array"
          description: "Access projects of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        projectTemplateCreate:
          type: "boolean"
          description: "Enable project templates creation. Default: true"
        projectTemplateViewOther:
          type: "boolean"
          description: "View project templates created by other users. Default: true"
        projectTemplateEditOther:
          type: "boolean"
          description: "Modify project templates created by other users. Default:\
            \ true"
        projectTemplateDeleteOther:
          type: "boolean"
          description: "Delete project templates created by other users. Default:\
            \ true"
        projectTemplateClients:
          type: "array"
          description: "Access project templates of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        projectTemplateBusinessUnits:
          type: "array"
          description: "Access project templates of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        transMemoryCreate:
          type: "boolean"
          description: "Enable TMs creation. Default: true"
        transMemoryViewOther:
          type: "boolean"
          description: "View TMs created by other users. Default: true"
        transMemoryEditOther:
          type: "boolean"
          description: "Modify TMs created by other users. Default: true"
        transMemoryDeleteOther:
          type: "boolean"
          description: "Delete TMs created by other users. Default: true"
        transMemoryExportOther:
          type: "boolean"
          description: "Export TMs created by other users. Default: true"
        transMemoryImportOther:
          type: "boolean"
          description: "Import into TMs created by other users. Default: true"
        transMemoryClients:
          type: "array"
          description: "Access TMs of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        transMemoryBusinessUnits:
          type: "array"
          description: "Access TMs of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        termBaseCreate:
          type: "boolean"
          description: "Enable TBs creation. Default: true"
        termBaseViewOther:
          type: "boolean"
          description: "View TBs created by other users. Default: true"
        termBaseEditOther:
          type: "boolean"
          description: "Modify TBs created by other users. Default: true"
        termBaseDeleteOther:
          type: "boolean"
          description: "Delete TBs created by other users. Default: true"
        termBaseExportOther:
          type: "boolean"
          description: "Export TBs created by other users. Default: true"
        termBaseImportOther:
          type: "boolean"
          description: "Import into TBs created by other users. Default: true"
        termBaseApproveOther:
          type: "boolean"
          description: "Approve terms in TBs created by other users. Default: true"
        termBaseClients:
          type: "array"
          description: "Access TBs of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        termBaseBusinessUnits:
          type: "array"
          description: "Access TBs of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        userCreate:
          type: "boolean"
          description: "Enable users creation. Default: true"
        userViewOther:
          type: "boolean"
          description: "View users created by other users. Default: true"
        userEditOther:
          type: "boolean"
          description: "Modify users created by other users. Default: true"
        userDeleteOther:
          type: "boolean"
          description: "Delete users created by other users. Default: true"
        clientDomainSubDomainCreate:
          type: "boolean"
          description: "Enable clients, domains, subdomains creation. Default: true"
        clientDomainSubDomainViewOther:
          type: "boolean"
          description: "View clients, domains, subdomains created by other users.\
            \ Default: true"
        clientDomainSubDomainEditOther:
          type: "boolean"
          description: "Modify clients, domains, subdomains created by other users.\
            \ Default: true"
        clientDomainSubDomainDeleteOther:
          type: "boolean"
          description: "Delete clients, domains, subdomains created by other users.\
            \ Default: true"
        vendorCreate:
          type: "boolean"
          description: "Enable Vendors creation. Default: true"
        vendorViewOther:
          type: "boolean"
          description: "View Vendors created by other users. Default: true"
        vendorEditOther:
          type: "boolean"
          description: "Modify Vendors created by other users. Default: true"
        vendorDeleteOther:
          type: "boolean"
          description: "Delete Vendors created by other users. Default: true"
        dashboardSetting:
          type: "string"
          description: "Home page dashboards. Default: OWN_DATA"
          enum:
          - "ALL_DATA"
          - "OWN_DATA"
          - "NO_DASHBOARD"
        setupServer:
          type: "boolean"
          description: "Modify setup's server settings. Default: true"
  PROJECT_MANAGER_EDIT:
    allOf:
    - $ref: "#/definitions/AbstractUserEditDto"
    - type: "object"
      properties:
        sourceLocales:
          type: "array"
          items:
            type: "string"
        targetLocales:
          type: "array"
          items:
            type: "string"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        clients:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        domains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        subDomains:
          type: "array"
          items:
            $ref: "#/definitions/UidReference"
        projectCreate:
          type: "boolean"
          description: "Enable project creation. Default: true"
        projectViewOther:
          type: "boolean"
          description: "View projects created by other users. Default: true"
        projectEditOther:
          type: "boolean"
          description: "Modify projects created by other users. Default: true"
        projectDeleteOther:
          type: "boolean"
          description: "Delete projects created by other users. Default: true"
        projectClients:
          type: "array"
          description: "Access projects of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        projectBusinessUnits:
          type: "array"
          description: "Access projects of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        projectTemplateCreate:
          type: "boolean"
          description: "Enable project templates creation. Default: true"
        projectTemplateViewOther:
          type: "boolean"
          description: "View project templates created by other users. Default: true"
        projectTemplateEditOther:
          type: "boolean"
          description: "Modify project templates created by other users. Default:\
            \ true"
        projectTemplateDeleteOther:
          type: "boolean"
          description: "Delete project templates created by other users. Default:\
            \ true"
        projectTemplateClients:
          type: "array"
          description: "Access project templates of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        projectTemplateBusinessUnits:
          type: "array"
          description: "Access project templates of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        transMemoryCreate:
          type: "boolean"
          description: "Enable TMs creation. Default: true"
        transMemoryViewOther:
          type: "boolean"
          description: "View TMs created by other users. Default: true"
        transMemoryEditOther:
          type: "boolean"
          description: "Modify TMs created by other users. Default: true"
        transMemoryDeleteOther:
          type: "boolean"
          description: "Delete TMs created by other users. Default: true"
        transMemoryExportOther:
          type: "boolean"
          description: "Export TMs created by other users. Default: true"
        transMemoryImportOther:
          type: "boolean"
          description: "Import into TMs created by other users. Default: true"
        transMemoryClients:
          type: "array"
          description: "Access TMs of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        transMemoryBusinessUnits:
          type: "array"
          description: "Access TMs of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        termBaseCreate:
          type: "boolean"
          description: "Enable TBs creation. Default: true"
        termBaseViewOther:
          type: "boolean"
          description: "View TBs created by other users. Default: true"
        termBaseEditOther:
          type: "boolean"
          description: "Modify TBs created by other users. Default: true"
        termBaseDeleteOther:
          type: "boolean"
          description: "Delete TBs created by other users. Default: true"
        termBaseExportOther:
          type: "boolean"
          description: "Export TBs created by other users. Default: true"
        termBaseImportOther:
          type: "boolean"
          description: "Import into TBs created by other users. Default: true"
        termBaseApproveOther:
          type: "boolean"
          description: "Approve terms in TBs created by other users. Default: true"
        termBaseClients:
          type: "array"
          description: "Access TBs of a selected clients only"
          items:
            $ref: "#/definitions/UidReference"
        termBaseBusinessUnits:
          type: "array"
          description: "Access TBs of selected business units only"
          items:
            $ref: "#/definitions/UidReference"
        userCreate:
          type: "boolean"
          description: "Enable users creation. Default: true"
        userViewOther:
          type: "boolean"
          description: "View users created by other users. Default: true"
        userEditOther:
          type: "boolean"
          description: "Modify users created by other users. Default: true"
        userDeleteOther:
          type: "boolean"
          description: "Delete users created by other users. Default: true"
        clientDomainSubDomainCreate:
          type: "boolean"
          description: "Enable clients, domains, subdomains creation. Default: true"
        clientDomainSubDomainViewOther:
          type: "boolean"
          description: "View clients, domains, subdomains created by other users.\
            \ Default: true"
        clientDomainSubDomainEditOther:
          type: "boolean"
          description: "Modify clients, domains, subdomains created by other users.\
            \ Default: true"
        clientDomainSubDomainDeleteOther:
          type: "boolean"
          description: "Delete clients, domains, subdomains created by other users.\
            \ Default: true"
        vendorCreate:
          type: "boolean"
          description: "Enable Vendors creation. Default: true"
        vendorViewOther:
          type: "boolean"
          description: "View Vendors created by other users. Default: true"
        vendorEditOther:
          type: "boolean"
          description: "Modify Vendors created by other users. Default: true"
        vendorDeleteOther:
          type: "boolean"
          description: "Delete Vendors created by other users. Default: true"
        dashboardSetting:
          type: "string"
          description: "Home page dashboards. Default: OWN_DATA"
          enum:
          - "ALL_DATA"
          - "OWN_DATA"
          - "NO_DASHBOARD"
        setupServer:
          type: "boolean"
          description: "Modify setup's server settings. Default: true"
  PROJECT_MANAGER_RESPONSE:
    allOf:
    - $ref: "#/definitions/UserDetailsDtoV3"
    - type: "object"
      properties:
        sourceLocales:
          type: "array"
          items:
            type: "string"
        targetLocales:
          type: "array"
          items:
            type: "string"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/WorkflowStepReferenceV3"
        clients:
          type: "array"
          items:
            $ref: "#/definitions/ClientReference_4"
        domains:
          type: "array"
          items:
            $ref: "#/definitions/DomainReference_4"
        subDomains:
          type: "array"
          items:
            $ref: "#/definitions/SubDomainReference_4"
        projectCreate:
          type: "boolean"
        projectViewOther:
          type: "boolean"
        projectEditOther:
          type: "boolean"
        projectDeleteOther:
          type: "boolean"
        projectClients:
          type: "array"
          items:
            $ref: "#/definitions/ClientReference_4"
        projectBusinessUnits:
          type: "array"
          items:
            $ref: "#/definitions/BusinessUnitReference_3"
        projectTemplateCreate:
          type: "boolean"
        projectTemplateViewOther:
          type: "boolean"
        projectTemplateEditOther:
          type: "boolean"
        projectTemplateDeleteOther:
          type: "boolean"
        projectTemplateClients:
          type: "array"
          items:
            $ref: "#/definitions/ClientReference_4"
        projectTemplateBusinessUnits:
          type: "array"
          items:
            $ref: "#/definitions/BusinessUnitReference_3"
        transMemoryCreate:
          type: "boolean"
        transMemoryViewOther:
          type: "boolean"
        transMemoryEditOther:
          type: "boolean"
        transMemoryDeleteOther:
          type: "boolean"
        transMemoryExportOther:
          type: "boolean"
        transMemoryImportOther:
          type: "boolean"
        transMemoryClients:
          type: "array"
          items:
            $ref: "#/definitions/ClientReference_4"
        transMemoryBusinessUnits:
          type: "array"
          items:
            $ref: "#/definitions/BusinessUnitReference_3"
        termBaseCreate:
          type: "boolean"
        termBaseViewOther:
          type: "boolean"
        termBaseEditOther:
          type: "boolean"
        termBaseDeleteOther:
          type: "boolean"
        termBaseExportOther:
          type: "boolean"
        termBaseImportOther:
          type: "boolean"
        termBaseApproveOther:
          type: "boolean"
        termBaseClients:
          type: "array"
          items:
            $ref: "#/definitions/ClientReference_4"
        termBaseBusinessUnits:
          type: "array"
          items:
            $ref: "#/definitions/BusinessUnitReference_3"
        userCreate:
          type: "boolean"
        userViewOther:
          type: "boolean"
        userEditOther:
          type: "boolean"
        userDeleteOther:
          type: "boolean"
        clientDomainSubDomainCreate:
          type: "boolean"
        clientDomainSubDomainViewOther:
          type: "boolean"
        clientDomainSubDomainEditOther:
          type: "boolean"
        clientDomainSubDomainDeleteOther:
          type: "boolean"
        vendorCreate:
          type: "boolean"
        vendorViewOther:
          type: "boolean"
        vendorEditOther:
          type: "boolean"
        vendorDeleteOther:
          type: "boolean"
        dashboardSetting:
          type: "string"
        setupServer:
          type: "boolean"
  PageDtoAbstractProjectDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/AbstractProjectDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoAdditionalWorkflowStepDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/AdditionalWorkflowStepDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoAnalyseJobDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/AnalyseJobDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoAnalyseReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/AnalyseReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoAssignedJobDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/AssignedJobDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoAsyncRequestDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/AsyncRequestDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoBusinessUnitDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/BusinessUnitDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoBuyerDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/BuyerDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoClientDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ClientDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoCommonConversationDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/CommonConversationDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoCostCenterDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/CostCenterDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoCustomFieldDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/CustomFieldDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoCustomFieldInstanceDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/CustomFieldInstanceDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoCustomFieldOptionDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/CustomFieldOptionDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoCustomFileTypeDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/CustomFileTypeDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoDomainDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/DomainDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoGlossaryDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/GlossaryDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoImportSettingsReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ImportSettingsReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoJobPartReferenceV2:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/JobPartReferenceV2"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoLastLoginDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/LastLoginDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoLqaProfileReferenceDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/LqaProfileReferenceDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoLqaReportRecipientDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/LqaReportRecipientDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoMachineTranslateSettingsPbmDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/MachineTranslateSettingsPbmDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoMemsourceTranslateProfileDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/MemsourceTranslateProfileDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoNetRateSchemeReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/NetRateSchemeReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoNetRateSchemeWorkflowStepReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/NetRateSchemeWorkflowStepReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoOrganizationEmailTemplateDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/OrganizationEmailTemplateDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoProjectReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ProjectReference_2"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoProjectTemplateReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoProviderReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoQuoteDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/QuoteDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoSegmentationRuleDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/SegmentationRuleDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoServiceListEntryDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ServiceListEntryDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoString:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          type: "string"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoSubDomainDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/SubDomainDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoTermBaseDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/TermBaseDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoTransMemoryDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/TransMemoryDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoTranslationPriceListDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/TranslationPriceListDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoTranslationPriceSetDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/TranslationPriceSetDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoUploadedFileDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/UploadedFileDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoUserDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/UserDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoUserReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/UserReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoVendorDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/VendorDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoWebHookDtoV2:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/WebHookDtoV2"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoWebhookCallDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/WebhookCallDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoWorkflowStepDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepDto"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoWorkflowStepReference:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepReference"
      sort:
        $ref: "#/definitions/Sort"
  PageDtoXmlAssistantProfileListDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/XmlAssistantProfileListDto"
      sort:
        $ref: "#/definitions/Sort"
  PageRequest:
    type: "object"
    properties:
      pageNumber:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      sort:
        $ref: "#/definitions/Sort"
  PageWithResponseTsDtoNotificationDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/NotificationDto"
      sort:
        $ref: "#/definitions/Sort"
      responseTimestamp:
        type: "string"
        format: "date-time"
  PassFailThresholdDto:
    type: "object"
    required:
    - "minScorePercentage"
    properties:
      minScorePercentage:
        type: "number"
        format: "double"
        example: 99.0
        description: "Minimum allowed LQA score in percentage in line with MQM scoring\
          \ (1 - penalties/word-count)"
  PatchProjectDto:
    type: "object"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      status:
        type: "string"
        enum:
        - "NEW"
        - "ASSIGNED"
        - "COMPLETED"
        - "ACCEPTED_BY_VENDOR"
        - "DECLINED_BY_VENDOR"
        - "COMPLETED_BY_VENDOR"
        - "CANCELLED"
      client:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      owner:
        $ref: "#/definitions/IdReference"
      purchaseOrder:
        type: "string"
        minLength: 0
        maxLength: 255
      dateDue:
        type: "string"
        format: "date-time"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      machineTranslateSettings:
        $ref: "#/definitions/UidReference"
      machineTranslateSettingsPerLangs:
        type: "array"
        items:
          $ref: "#/definitions/ProjectMTSettingsPerLangDto"
      archived:
        type: "boolean"
  PdfSettingsDto:
    type: "object"
    properties:
      filter:
        type: "string"
        description: "Default: TRANS_PDF"
        enum:
        - "TRANS_PDF"
        - "DEFAULT"
  PenaltyPointsDto:
    type: "object"
    properties:
      neutral:
        $ref: "#/definitions/SeverityDto"
      minor:
        $ref: "#/definitions/SeverityDto"
      major:
        $ref: "#/definitions/SeverityDto"
      critical:
        $ref: "#/definitions/SeverityDto"
    description: "Penalty points for each severity level. By default neutral is 0,\
      \ minor is 1, major is 5, critical is 10."
  PhpSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
  PlainConversationDto:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        description: "SEGMENT_TARGET"
      dateCreated:
        type: "string"
        format: "date-time"
      dateModified:
        type: "string"
        format: "date-time"
      dateEdited:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/MentionableUserDto"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/CommentDto"
      status:
        $ref: "#/definitions/StatusDto"
      deleted:
        type: "boolean"
      references:
        $ref: "#/definitions/PlainReferences"
  PlainConversationsListDto:
    type: "object"
    properties:
      conversations:
        type: "array"
        items:
          $ref: "#/definitions/PlainConversationDto"
  PlainReferences:
    type: "object"
    required:
    - "segmentId"
    - "transGroupId"
    properties:
      taskId:
        type: "string"
        readOnly: true
      jobPartUid:
        type: "string"
        readOnly: true
      transGroupId:
        type: "integer"
        format: "int32"
        minimum: 0
      segmentId:
        type: "string"
      conversationTitle:
        type: "string"
      conversationTitleOffset:
        type: "integer"
        format: "int32"
        minimum: 0
      commentedText:
        type: "string"
      correlation:
        $ref: "#/definitions/ReferenceCorrelation"
  PoSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
      exportMultiline:
        type: "boolean"
        description: "Default: true"
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
      segment:
        type: "boolean"
        description: "Default: false"
      markupSubFilterTranslatable:
        type: "string"
      markupSubFilterNonTranslatable:
        type: "string"
      contextKeySuffixType:
        type: "string"
        enum:
        - "MSGCTXT"
        - "MSGID"
        - "MSGCTXT_AND_MSGID"
        - "MSGCTXT_OR_MSGID"
      saveConfirmedSegments:
        type: "boolean"
      importSetSegmentConfirmedWhen:
        type: "string"
        enum:
        - "FUZZY"
        - "NONFUZZY"
      importSetSegmentLockedWhen:
        type: "string"
        enum:
        - "FUZZY"
        - "NONFUZZY"
      exportConfirmedLocked:
        type: "string"
        enum:
        - "FUZZY"
        - "NONFUZZY"
      exportConfirmedNotLocked:
        type: "string"
        enum:
        - "FUZZY"
        - "NONFUZZY"
      exportNotConfirmedLocked:
        type: "string"
        enum:
        - "FUZZY"
        - "NONFUZZY"
      exportNotConfirmedNotLocked:
        type: "string"
        enum:
        - "FUZZY"
        - "NONFUZZY"
      icuSubFilter:
        type: "boolean"
        description: "Default: `false`"
  Position:
    type: "object"
    properties:
      beginIndex:
        type: "integer"
        format: "int32"
      endIndex:
        type: "integer"
        format: "int32"
  PostAnalyse:
    allOf:
    - $ref: "#/definitions/AbstractAnalyseSettingsDto"
    - type: "object"
      properties:
        transMemoryPostEditing:
          type: "boolean"
          description: "Default: false"
        nonTranslatablePostEditing:
          type: "boolean"
          description: "Default: false"
        machineTranslatePostEditing:
          type: "boolean"
          description: "Default: false"
  PptSettingsDto:
    type: "object"
    properties:
      hiddenSlides:
        type: "boolean"
        description: "Default: false"
      other:
        type: "boolean"
        description: "Default: false"
      notes:
        type: "boolean"
        description: "Default: false"
      masterSlides:
        type: "boolean"
        description: "Default: false"
  PreAnalyse:
    allOf:
    - $ref: "#/definitions/AbstractAnalyseSettingsDto"
    - type: "object"
      properties:
        includeFuzzyRepetitions:
          type: "boolean"
          description: "Default: false"
        separateFuzzyRepetitions:
          type: "boolean"
          description: "Default: false"
        includeNonTranslatables:
          type: "boolean"
          description: "Default: false"
        includeMachineTranslationMatches:
          type: "boolean"
          description: "Default: false"
  PreAnalyseTarget, Compare:
    allOf:
    - $ref: "#/definitions/AbstractAnalyseSettingsDto"
    - type: "object"
      properties:
        transMemoryPostEditing:
          type: "boolean"
          description: "Default: false"
        nonTranslatablePostEditing:
          type: "boolean"
          description: "Default: false"
        machineTranslatePostEditing:
          type: "boolean"
          description: "Default: false"
        includeFuzzyRepetitions:
          type: "boolean"
          description: "Default: false"
        separateFuzzyRepetitions:
          type: "boolean"
          description: "Default: false"
        includeNonTranslatables:
          type: "boolean"
          description: "Default: false"
        includeMachineTranslationMatches:
          type: "boolean"
          description: "Default: false"
  PreTranslateJobSettingsV3Dto:
    type: "object"
    properties:
      autoPropagateRepetitions:
        type: "boolean"
        description: "Propagate repetitions. Default: false"
      confirmRepetitions:
        type: "boolean"
        description: "Set segment status to confirmed for: Repetitions. Default: false"
      setJobStatusCompleted:
        type: "boolean"
        description: "Pre-translate & set job to completed: Set job to completed once\
          \ pre-translated. Default: false"
      setJobStatusCompletedWhenConfirmed:
        type: "boolean"
        description: "Pre-translate & set job to completed when all segments confirmed:\n\
          Set job to completed once pre-translated and all segments are confirmed.\
          \ Default: false"
      setProjectStatusCompleted:
        type: "boolean"
        description: "Pre-translate & set job to completed: Set project to completed\
          \ once all jobs pre-translated.\n        Default: false"
      overwriteExistingTranslations:
        type: "boolean"
        description: "Overwrite existing translations in target segments. Default:\
          \ false"
      translationMemorySettings:
        $ref: "#/definitions/JobTranslationMemorySettingsV3Dto"
      machineTranslationSettings:
        $ref: "#/definitions/JobMachineTranslationSettingsV3Dto"
      nonTranslatableSettings:
        $ref: "#/definitions/JobNonTranslatableSettingsV3Dto"
    description: "Pre-translate settings"
  PreTranslateJobsV3Dto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        description: "Jobs to be pre-translated"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      segmentFilters:
        type: "array"
        items:
          type: "string"
          enum:
          - "LOCKED"
          - "NOT_LOCKED"
      useProjectPreTranslateSettings:
        type: "boolean"
        description: "If pre-translate settings from project should be used.\nIf true,\
          \ preTranslateSettings values are ignored. Default: `false`"
      callbackUrl:
        type: "string"
      preTranslateSettings:
        description: "Pre-translate settings, used if useProjectPreTranslateSettings\
          \ is false"
        $ref: "#/definitions/PreTranslateJobSettingsV3Dto"
  PreTranslateSettingsV4Dto:
    type: "object"
    properties:
      preTranslateOnJobCreation:
        type: "boolean"
        description: "Pre-translate & set job to completed: Pre-translate on job creation.\
          \ Default: false"
      setJobStatusCompleted:
        type: "boolean"
        description: "Pre-translate & set job to completed: Set job to completed once\
          \ pre-translated. Default: false"
      setJobStatusCompletedWhenConfirmed:
        type: "boolean"
        description: "Pre-translate & set job to completed when all segments confirmed:\n\
          Set job to completed once pre-translated and all segments are confirmed.\
          \ Default: false"
      setProjectStatusCompleted:
        type: "boolean"
        description: "Pre-translate & set job to completed: Set project to completed\
          \ once all jobs pre-translated.\n        Default: false"
      overwriteExistingTranslations:
        type: "boolean"
        description: "Overwrite existing translations in target segments. Default:\
          \ false"
      translationMemorySettings:
        $ref: "#/definitions/TranslationMemorySettingsDto_5"
      machineTranslationSettings:
        $ref: "#/definitions/MachineTranslationSettingsDto_5"
      nonTranslatableSettings:
        $ref: "#/definitions/NonTranslatableSettingsDto_5"
      repetitionsSettings:
        $ref: "#/definitions/RepetitionsSettingsDto_4"
    description: "Pre-translate settings"
  PreviewUrlDto:
    type: "object"
    properties:
      type:
        type: "string"
        enum:
        - "ORIGINAL"
        - "PDF"
      url:
        type: "string"
  PreviewUrlsDto:
    type: "object"
    properties:
      previews:
        type: "array"
        items:
          $ref: "#/definitions/PreviewUrlDto"
  PreviousWorkflowDto:
    type: "object"
    properties:
      completed:
        type: "boolean"
      counts:
        $ref: "#/definitions/SegmentsCountsDto"
  PriceListForImport:
    type: "object"
    properties:
      rows:
        type: "array"
        items:
          $ref: "#/definitions/PriceRow"
      importedPriceRows:
        type: "array"
        items:
          $ref: "#/definitions/PriceRow"
  PriceListReference:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      uid:
        type: "string"
  PriceRow:
    type: "object"
    properties:
      rowNum:
        type: "integer"
        format: "int32"
      price:
        $ref: "#/definitions/PriceSet"
      errors:
        type: "array"
        items:
          type: "string"
  PriceSet:
    type: "object"
    properties:
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      prices:
        type: "object"
        additionalProperties:
          type: "number"
          format: "double"
      minimumPrice:
        type: "number"
        format: "double"
  ProgressDto:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int32"
      finishedCount:
        type: "integer"
        format: "int32"
      overdueCount:
        type: "integer"
        format: "int32"
  ProgressDtoV2:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int32"
      finishedCount:
        type: "integer"
        format: "int32"
      overdueCount:
        type: "integer"
        format: "int32"
  ProgressReference:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      finishedCount:
        type: "integer"
        format: "int64"
      overdueCount:
        type: "integer"
        format: "int64"
      finishedRatio:
        type: "number"
        format: "double"
      overdueRatio:
        type: "number"
        format: "double"
  ProjectJobPartsDto:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/JobPartReference"
      project:
        $ref: "#/definitions/ProjectReference"
  ProjectMTSettingsPerLangDto:
    type: "object"
    required:
    - "targetLang"
    properties:
      targetLang:
        type: "string"
      machineTranslateSettings:
        $ref: "#/definitions/UidReference"
  ProjectReference:
    type: "object"
    properties:
      name:
        type: "string"
      uid:
        type: "string"
  ProjectReferenceFilesRequestDto:
    type: "object"
    required:
    - "referenceFiles"
    properties:
      referenceFiles:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
  ProjectReference_2:
    type: "object"
    properties:
      uid:
        type: "string"
      innerId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      businessUnit:
        $ref: "#/definitions/BusinessUnitReference_2"
      domain:
        $ref: "#/definitions/DomainReference_3"
      subDomain:
        $ref: "#/definitions/SubDomainReference_3"
      client:
        $ref: "#/definitions/ClientReference_3"
      costCenter:
        $ref: "#/definitions/CostCenterReference_2"
      dueDate:
        type: "string"
        format: "date-time"
      createdDate:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference_4"
      owner:
        $ref: "#/definitions/UserReference_4"
      vendor:
        $ref: "#/definitions/VendorUserReference"
      purchaseOrder:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
      progress:
        $ref: "#/definitions/ProgressReference"
      metadata:
        type: "array"
        items:
          $ref: "#/definitions/MetadataReference"
      note:
        type: "string"
      deleted:
        type: "boolean"
      archived:
        type: "boolean"
  ProjectSecuritySettingsDtoV2:
    type: "object"
    properties:
      downloadEnabled:
        type: "boolean"
      webEditorEnabledForLinguists:
        type: "boolean"
      showUserDataToLinguists:
        type: "boolean"
      emailNotifications:
        type: "boolean"
      strictWorkflowFinish:
        type: "boolean"
      useVendors:
        type: "boolean"
      linguistsMayEditLockedSegments:
        type: "boolean"
      usersMaySetAutoPropagation:
        type: "boolean"
      allowLoadingExternalContentInEditors:
        type: "boolean"
      allowLoadingIframes:
        type: "boolean"
      linguistsMayEditSource:
        type: "boolean"
      linguistsMayEditTagContent:
        type: "boolean"
      linguistsMayDownloadLqaReport:
        type: "boolean"
      usernamesDisplayedInLqaReport:
        type: "boolean"
      userMaySetInstantQA:
        type: "boolean"
      triggerWebhooks:
        type: "boolean"
      notifyJobOwnerStatusChanged:
        type: "boolean"
      vendors:
        $ref: "#/definitions/VendorSecuritySettingsDto"
      allowedDomains:
        type: "array"
        items:
          type: "string"
  ProjectTemplate:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      templateName:
        type: "string"
      name:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      note:
        type: "string"
      useDynamicTitle:
        type: "boolean"
      dynamicTitle:
        type: "string"
      owner:
        $ref: "#/definitions/UserReference"
      client:
        $ref: "#/definitions/ClientReference"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      vendor:
        $ref: "#/definitions/VendorReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      modifiedBy:
        $ref: "#/definitions/UserReference"
      dateModified:
        type: "string"
        format: "date-time"
        example: "{ \"epochSeconds\": 1624619701, \"nano\": 0 }"
        description: "Deprecated - use dateTimeModified field instead"
      dateTimeModified:
        type: "string"
        format: "date-time"
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepDto"
      workflowSettings:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepSettingsDto"
      projectWorkflowSettings:
        $ref: "#/definitions/ProjectWorkflowSettingsDto"
      businessUnit:
        $ref: "#/definitions/BusinessUnitReference"
      notifyProviders:
        $ref: "#/definitions/ProjectTemplateNotifyProviderDto"
      assignedTo:
        type: "array"
        items:
          $ref: "#/definitions/AssignmentPerTargetLangDto"
      importSettings:
        description: "Deprecated - always null"
        $ref: "#/definitions/UidReference"
  ProjectTemplateCreateActionDto:
    type: "object"
    required:
    - "name"
    - "project"
    properties:
      project:
        $ref: "#/definitions/UidReference"
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      importSettings:
        $ref: "#/definitions/UidReference"
      useDynamicTitle:
        type: "boolean"
      dynamicTitle:
        type: "string"
        minLength: 0
        maxLength: 255
  ProjectTemplateDto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      templateName:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      workflowSettings:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateWorkflowSettingsDto"
  ProjectTemplateEditDto:
    type: "object"
    required:
    - "templateName"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      templateName:
        type: "string"
        minLength: 0
        maxLength: 255
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      useDynamicTitle:
        type: "boolean"
      dynamicTitle:
        type: "string"
        minLength: 0
        maxLength: 255
      notifyProvider:
        description: "use to notify assigned providers,\n        notificationIntervalInMinutes\
          \ 0 or empty value means immediate notification to all providers"
        $ref: "#/definitions/NotifyProviderDto"
      workFlowSettings:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepSettingsEditDto"
      projectWorkflowSettings:
        $ref: "#/definitions/ProjectWorkflowSettingsDto"
      client:
        $ref: "#/definitions/IdReference"
      costCenter:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      vendor:
        $ref: "#/definitions/IdReference"
      importSettings:
        $ref: "#/definitions/UidReference"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      fileHandover:
        type: "boolean"
        description: "Default: false"
      assignedTo:
        type: "array"
        description: "only use for projects without workflows; otherwise specify in\
          \ the workflowSettings object"
        items:
          $ref: "#/definitions/ProjectTemplateWorkflowSettingsAssignedToDto"
  ProjectTemplateEditV2Dto:
    type: "object"
    required:
    - "templateName"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      templateName:
        type: "string"
        minLength: 0
        maxLength: 255
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      useDynamicTitle:
        type: "boolean"
      dynamicTitle:
        type: "string"
        minLength: 0
        maxLength: 255
      notifyProvider:
        description: "use to notify assigned providers,\n        notificationIntervalInMinutes\
          \ 0 or empty value means immediate notification to all providers"
        $ref: "#/definitions/NotifyProviderDto"
      workFlowSettings:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepSettingsEditV2Dto"
      projectWorkflowSettings:
        $ref: "#/definitions/ProjectWorkflowSettingsV2Dto"
      client:
        $ref: "#/definitions/IdReference"
      costCenter:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      vendor:
        $ref: "#/definitions/IdReference"
      importSettings:
        $ref: "#/definitions/UidReference"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      owner:
        description: "Owner must be Admin or PM"
        $ref: "#/definitions/IdReference"
      fileHandover:
        type: "boolean"
        description: "Default: false"
      assignedTo:
        type: "array"
        description: "only use for projects without workflows; otherwise specify in\
          \ the workflowSettings object"
        items:
          $ref: "#/definitions/ProjectTemplateWorkflowSettingsAssignedToDto"
  ProjectTemplateNotifyProviderDto:
    type: "object"
    required:
    - "organizationEmailTemplate"
    properties:
      organizationEmailTemplate:
        $ref: "#/definitions/ObjectReference"
      notificationIntervalInMinutes:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 1440
  ProjectTemplateReference:
    type: "object"
    properties:
      templateName:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      id:
        type: "string"
      uid:
        type: "string"
      owner:
        $ref: "#/definitions/UserReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      costCenter:
        $ref: "#/definitions/CostCenterReference"
      businessUnit:
        $ref: "#/definitions/BusinessUnitReference"
      projectWorkflowSettings:
        $ref: "#/definitions/ProjectWorkflowSettingsReference"
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepReference"
      note:
        type: "string"
      client:
        $ref: "#/definitions/ClientReference"
  ProjectTemplateTermBaseDto:
    type: "object"
    properties:
      targetLocale:
        type: "string"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
      readMode:
        type: "boolean"
      writeMode:
        type: "boolean"
      termBase:
        $ref: "#/definitions/TermBaseDto"
      qualityAssurance:
        type: "boolean"
  ProjectTemplateTermBaseListDto:
    type: "object"
    properties:
      termBases:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateTermBaseDto"
  ProjectTemplateTransMemoryDtoV3:
    type: "object"
    properties:
      targetLocale:
        type: "string"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReferenceV3"
      readMode:
        type: "boolean"
      writeMode:
        type: "boolean"
      transMemory:
        $ref: "#/definitions/TransMemoryDtoV3"
      penalty:
        type: "number"
        format: "double"
      applyPenaltyTo101Only:
        type: "boolean"
      order:
        type: "integer"
        format: "int32"
  ProjectTemplateTransMemoryListDtoV3:
    type: "object"
    properties:
      transMemories:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateTransMemoryDtoV3"
  ProjectTemplateTransMemoryListV2Dto:
    type: "object"
    properties:
      transMemories:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateTransMemoryV2Dto"
  ProjectTemplateTransMemoryV2Dto:
    type: "object"
    properties:
      targetLocale:
        type: "string"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReferenceV2"
      readMode:
        type: "boolean"
      writeMode:
        type: "boolean"
      transMemory:
        $ref: "#/definitions/TransMemoryDtoV2"
      penalty:
        type: "number"
        format: "double"
      applyPenaltyTo101Only:
        type: "boolean"
      order:
        type: "integer"
        format: "int32"
  ProjectTemplateWorkflowSettingsAssignedToDto:
    type: "object"
    properties:
      targetLang:
        type: "string"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
  ProjectTemplateWorkflowSettingsDto:
    type: "object"
    properties:
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
      assignedTo:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateWorkflowSettingsAssignedToDto"
  ProjectTermBaseDto:
    type: "object"
    properties:
      targetLocale:
        type: "string"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
      readMode:
        type: "boolean"
      writeMode:
        type: "boolean"
      termBase:
        $ref: "#/definitions/TermBaseDto"
      qualityAssurance:
        type: "boolean"
  ProjectTermBaseListDto:
    type: "object"
    properties:
      termBases:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTermBaseDto"
  ProjectTermBaseReference:
    type: "object"
    properties:
      id:
        type: "string"
      termBase:
        $ref: "#/definitions/ObjectReference"
      name:
        type: "string"
      writeMode:
        type: "boolean"
      targetLang:
        type: "string"
      readMode:
        type: "boolean"
      workflowStep:
        $ref: "#/definitions/ObjectReference"
  ProjectTransMemoryDtoV3:
    type: "object"
    properties:
      transMemory:
        $ref: "#/definitions/TransMemoryDtoV3"
      penalty:
        type: "number"
        format: "double"
      applyPenaltyTo101Only:
        type: "boolean"
      targetLocale:
        type: "string"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReferenceV3"
      readMode:
        type: "boolean"
      writeMode:
        type: "boolean"
      order:
        type: "integer"
        format: "int32"
  ProjectTransMemoryListDtoV3:
    type: "object"
    properties:
      transMemories:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTransMemoryDtoV3"
  ProjectTranslationMemoryReference:
    type: "object"
    properties:
      id:
        type: "string"
      transMem:
        $ref: "#/definitions/ObjectReference"
      name:
        type: "string"
      workflowStep:
        $ref: "#/definitions/ObjectReference"
      targetLang:
        type: "string"
      penalty:
        type: "number"
        format: "double"
      readMode:
        type: "boolean"
  ProjectWorkflowSettingsDto:
    type: "object"
    properties:
      completeUnassigned:
        type: "boolean"
      propagateTranslationsToLowerWfDuringUpdateSource:
        type: "boolean"
  ProjectWorkflowSettingsReference:
    type: "object"
    properties:
      propagateTranslationsToLowerWfDuringUpdateSource:
        type: "boolean"
  ProjectWorkflowSettingsV2Dto:
    type: "object"
    properties:
      completeUnassigned:
        type: "boolean"
      propagateTranslationsToLowerWfDuringUpdateSource:
        type: "boolean"
  ProjectWorkflowStepDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      abbreviation:
        type: "string"
      name:
        type: "string"
      workflowLevel:
        type: "integer"
        format: "int32"
      workflowStep:
        $ref: "#/definitions/ObjectReference"
      lqaProfileUid:
        type: "string"
  ProjectWorkflowStepDtoV2:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      abbreviation:
        type: "string"
      name:
        type: "string"
      workflowLevel:
        type: "integer"
        format: "int32"
      workflowStep:
        $ref: "#/definitions/WorkflowStepReferenceV2"
  ProjectWorkflowStepListDtoV2:
    type: "object"
    properties:
      projectWorkflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/ProjectWorkflowStepDtoV2"
  ProjectWorkflowStepReference:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      order:
        type: "integer"
        format: "int32"
      workflowLevel:
        type: "integer"
        format: "int32"
  PropertiesSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
  ProviderListDtoV2:
    type: "object"
    properties:
      providers:
        $ref: "#/definitions/Providers_2"
  ProviderReference:
    type: "object"
    required:
    - "type"
    discriminator: "type"
    properties:
      type:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
        readOnly: true
  ProviderReference_2:
    type: "object"
    properties:
      uid:
        type: "string"
      names:
        type: "array"
        items:
          type: "string"
      type:
        type: "string"
      anonymized:
        type: "boolean"
      deleted:
        type: "boolean"
      active:
        type: "boolean"
  ProvidersPerLanguage:
    type: "object"
    properties:
      targetLang:
        type: "string"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
      assignedUsers:
        type: "array"
        items:
          $ref: "#/definitions/User"
  Providers_2:
    type: "object"
    properties:
      all:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
      relevant:
        type: "array"
        items:
          $ref: "#/definitions/ProviderReference"
  PsdSettingsDto:
    type: "object"
    properties:
      extractHiddenLayers:
        type: "boolean"
        description: "Default: true"
      extractLockedLayers:
        type: "boolean"
        description: "Default: true"
      tagRegexp:
        type: "string"
  PseudoTranslateActionDto:
    type: "object"
    properties:
      replacement:
        type: "string"
        minLength: 1
        maxLength: 10
      prefix:
        type: "string"
      suffix:
        type: "string"
      length:
        type: "number"
        format: "double"
      keyHashPrefixLen:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 18
      substitution:
        type: "array"
        items:
          $ref: "#/definitions/SubstituteDto"
        maxItems: 100
        minItems: 1
  PseudoTranslateActionDtoV2:
    type: "object"
    properties:
      replacement:
        type: "string"
      prefix:
        type: "string"
      suffix:
        type: "string"
      length:
        type: "number"
        format: "double"
      keyHashPrefixLen:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 18
      substitution:
        type: "array"
        items:
          $ref: "#/definitions/SubstituteDtoV2"
        maxItems: 2147483647
        minItems: 0
  PseudoTranslateWrapperDto:
    type: "object"
    required:
    - "jobParts"
    - "pseudoTranslate"
    properties:
      jobParts:
        $ref: "#/definitions/JobPartReadyReferences_2"
      pseudoTranslate:
        $ref: "#/definitions/PseudoTranslateActionDtoV2"
  QACheckDtoV2:
    type: "object"
    required:
    - "name"
    - "type"
    discriminator: "type"
    properties:
      type:
        type: "string"
        enum:
        - "VOID"
        - "NUMBER"
        - "STRING"
        - "REGEX"
        - "MORAVIA"
      name:
        type: "string"
        enum:
        - "emptyTarget"
        - "inconsistentTranslation"
        - "joinMarksInconsistency"
        - "missingNumber"
        - "segmentNotConfirmed"
        - "nonConformingTerms"
        - "multipleSpaces"
        - "endPunctuation"
        - "targetLength"
        - "absoluteTargetLength"
        - "relativeTargetLength"
        - "inconsistentFormatting"
        - "unresolvedComment"
        - "emptyPairTags"
        - "strictJobStatus"
        - "forbiddenStringsEnabled"
        - "excludeLockedSegments"
        - "ignoreNotApprovedTerms"
        - "spellCheck"
        - "repeatedWords"
        - "inconsistentTagContent"
        - "emptyTagContent"
        - "malformed"
        - "forbiddenTerms"
        - "targetLengthPercent"
        - "targetLengthPerSegment"
        - "newerAtLowerLevel"
        - "leadingAndTrailingSpaces"
        - "targetSourceIdentical"
        - "ignoreInAllWorkflowSteps"
        - "regexp"
        - "unmodifiedFuzzyTranslation"
        - "unmodifiedFuzzyTranslationTM"
        - "unmodifiedFuzzyTranslationMTNT"
        - "moravia"
        - "extraNumbers"
        - "nestedTags"
  QASettingsDtoV2:
    type: "object"
    properties:
      checks:
        type: "array"
        items:
          $ref: "#/definitions/QACheckDtoV2"
  QualityAssuranceBatchRunDtoV3:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 500
        minItems: 1
      settings:
        $ref: "#/definitions/QualityAssuranceRunDtoV3"
      maxQaWarningsCount:
        type: "integer"
        format: "int32"
        description: "Maximum number of QA warnings in result, default: 100. For efficiency\
          \ reasons QA\nwarnings are processed with minimum segments chunk size 10,\
          \ therefore slightly more warnings are returned."
        minimum: 1
        maximum: 1000
  QualityAssuranceChecksDtoV2:
    type: "object"
    properties:
      forbiddenStrings:
        type: "array"
        items:
          type: "string"
      enabledChecks:
        type: "array"
        example: "\n   [\n      {\n         \"checkerType\":\"EmptyTranslation\",\n\
          \         \"ignorable\":false\n      },\n      {\n         \"checkerType\"\
          :\"TrailingPunctuation\",\n         \"ignorable\":false\n      },\n    \
          \  {\n         \"checkerType\":\"Formatting\",\n         \"ignorable\":false\n\
          \      },\n      {\n         \"checkerType\":\"JoinTags\",\n         \"\
          ignorable\":false\n      },\n      {\n         \"checkerType\":\"MissingNumbers\"\
          ,\n         \"ignorable\":false\n      },\n      {\n         \"checkerType\"\
          :\"MultipleSpaces\",\n         \"ignorable\":false\n      },\n      {\n\
          \         \"checkerType\":\"NonConformingTerm\",\n         \"ignorable\"\
          :false\n      },\n      {\n         \"checkerType\":\"NotConfirmed\",\n\
          \         \"ignorable\":false\n      },\n      {\n         \"checkerType\"\
          :\"TranslationLength\",\n         \"ignorable\":false\n      },\n      {\n\
          \         \"checkerType\": \"AbsoluteLength\",\n         \"ignorable\":\
          \ false\n      },\n      {\n         \"checkerType\": \"RelativeLength\"\
          ,\n         \"ignorable\": false\n      },\n      {\n         \"checkerType\"\
          :\"EmptyPairTags\",\n         \"ignorable\":false\n      },\n      {\n \
          \        \"checkerType\":\"InconsistentTranslationTargetSource\",\n    \
          \     \"ignorable\":true\n      },\n      {\n         \"checkerType\":\"\
          InconsistentTranslationSourceTarget\",\n         \"ignorable\":true\n  \
          \    },\n      {\n         \"checkerType\":\"ForbiddenString\",\n      \
          \   \"ignorable\":false\n      },\n      {\n         \"checkerType\":\"\
          SpellCheck\",\n         \"ignorable\":false\n      },\n      {\n       \
          \  \"checkerType\":\"RepeatedWords\",\n         \"ignorable\":false\n  \
          \    },\n      {\n         \"checkerType\":\"InconsistentTagContent\",\n\
          \         \"ignorable\":false\n      },\n      {\n         \"checkerType\"\
          :\"EmptyTagContent\",\n         \"ignorable\":false\n      },\n      {\n\
          \         \"checkerType\":\"Malformed\",\n         \"ignorable\":false\n\
          \      },\n      {\n         \"checkerType\":\"ForbiddenTerm\",\n      \
          \   \"ignorable\":false\n      },\n      {\n         \"checkerType\":\"\
          NewerAtLowerLevel\",\n         \"ignorable\":false\n      },\n      {\n\
          \         \"checkerType\":\"LeadingAndTrailingSpaces\",\n         \"ignorable\"\
          :false\n      },\n      {\n         \"checkerType\":\"TargetSourceIdentical\"\
          ,\n         \"ignorable\":false\n      },\n      {\n         \"checkerType\"\
          :\"SourceOrTargetRegexp\"\n      },\n      {\n         \"checkerType\":\"\
          UnmodifiedFuzzyTranslationTM\",\n         \"ignorable\":true\n      },\n\
          \      {\n         \"checkerType\":\"UnmodifiedFuzzyTranslationMTNT\",\n\
          \         \"ignorable\":true\n      },\n      {\n         \"checkerType\"\
          :\"Moravia\",\n         \"ignorable\":false,\n         \"context\": {\"\
          moraviaProfileId\": \"MoraviaProfileIdValue\"}\n      },\n      {\n    \
          \     \"checkerType\":\"ExtraNumbers\",\n         \"ignorable\":true\n \
          \     },\n      {\n         \"checkerType\":\"UnresolvedConversation\",\n\
          \         \"ignorable\":false\n      },\n      {\n         \"checkerType\"\
          :\"NestedTags\",\n         \"ignorable\":false\n      },\n      {\n    \
          \     \"checkerType\":\"FuzzyInconsistency\",\n         \"ignorable\":true\n\
          \      }\n   ]\n"
        description: "enabledChecks"
        items:
          $ref: "#/definitions/EnabledCheckDtoV2"
      excludeLockedSegments:
        type: "boolean"
      userCanSetInstantQA:
        type: "boolean"
      strictJobStatus:
        type: "boolean"
      regexpRules:
        type: "array"
        items:
          $ref: "#/definitions/RegexpCheckRuleDtoV2"
  QualityAssuranceChecksDtoV4:
    type: "object"
    properties:
      forbiddenStrings:
        type: "array"
        items:
          type: "string"
      enabledChecks:
        type: "array"
        items:
          $ref: "#/definitions/EnabledCheckDtoV4"
      excludeLockedSegments:
        type: "boolean"
      userCanSetInstantQA:
        type: "boolean"
      strictJobStatus:
        type: "boolean"
      regexpRules:
        type: "array"
        items:
          $ref: "#/definitions/RegexpCheckRuleDtoV4"
  QualityAssuranceDto:
    type: "object"
    properties:
      segmentsCount:
        type: "integer"
        format: "int64"
      warningsCount:
        type: "integer"
        format: "int64"
      ignoredWarningsCount:
        type: "integer"
        format: "int64"
  QualityAssuranceResponseDto:
    type: "object"
    properties:
      segmentWarnings:
        type: "array"
        items:
          $ref: "#/definitions/SegmentWarningsDto"
      finished:
        type: "boolean"
  QualityAssuranceRunDtoV3:
    type: "object"
    properties:
      initialSegment:
        $ref: "#/definitions/SegmentReference"
      maxQaWarningsCount:
        type: "integer"
        format: "int32"
        description: "Maximum number of QA warnings in result, default: 100. For efficiency\
          \ reasons QA\nwarnings are processed with minimum segments chunk size 10,\
          \ therefore slightly more warnings are returned."
        minimum: 1
        maximum: 1000
      warningTypes:
        type: "array"
        items:
          type: "string"
          enum:
          - "EmptyTranslation"
          - "TrailingPunctuation"
          - "Formatting"
          - "JoinTags"
          - "MissingNumbersV3"
          - "MultipleSpacesV3"
          - "NonConformingTerm"
          - "NotConfirmed"
          - "TranslationLength"
          - "AbsoluteLength"
          - "RelativeLength"
          - "UnresolvedComment"
          - "EmptyPairTags"
          - "InconsistentTranslationTargetSource"
          - "InconsistentTranslationSourceTarget"
          - "ForbiddenString"
          - "SpellCheck"
          - "RepeatedWord"
          - "InconsistentTagContent"
          - "EmptyTagContent"
          - "Malformed"
          - "ForbiddenTerm"
          - "NewerAtLowerLevel"
          - "LeadingAndTrailingSpaces"
          - "LeadingSpaces"
          - "TrailingSpaces"
          - "TargetSourceIdentical"
          - "SourceOrTargetRegexp"
          - "UnmodifiedFuzzyTranslation"
          - "UnmodifiedFuzzyTranslationTM"
          - "UnmodifiedFuzzyTranslationMTNT"
          - "Moravia"
          - "ExtraNumbersV3"
          - "UnresolvedConversation"
          - "NestedTags"
          - "FuzzyInconsistencyTargetSource"
          - "FuzzyInconsistencySourceTarget"
          - "CustomQA"
          - "MissingNonTranslatableAnnotation"
        maxItems: 100
        minItems: 0
  QualityAssuranceSegmentsRunDtoV3:
    type: "object"
    required:
    - "jobsAndSegments"
    properties:
      jobsAndSegments:
        type: "array"
        items:
          $ref: "#/definitions/JobPartSegmentsDtoV3"
        maxItems: 100
        minItems: 1
      warningTypes:
        type: "array"
        description: "When empty only fast checks run"
        items:
          type: "string"
          enum:
          - "EmptyTranslation"
          - "TrailingPunctuation"
          - "Formatting"
          - "JoinTags"
          - "MissingNumbersV3"
          - "MultipleSpacesV3"
          - "NonConformingTerm"
          - "NotConfirmed"
          - "TranslationLength"
          - "AbsoluteLength"
          - "RelativeLength"
          - "UnresolvedComment"
          - "EmptyPairTags"
          - "InconsistentTranslationTargetSource"
          - "InconsistentTranslationSourceTarget"
          - "ForbiddenString"
          - "SpellCheck"
          - "RepeatedWord"
          - "InconsistentTagContent"
          - "EmptyTagContent"
          - "Malformed"
          - "ForbiddenTerm"
          - "NewerAtLowerLevel"
          - "LeadingAndTrailingSpaces"
          - "LeadingSpaces"
          - "TrailingSpaces"
          - "TargetSourceIdentical"
          - "SourceOrTargetRegexp"
          - "UnmodifiedFuzzyTranslation"
          - "UnmodifiedFuzzyTranslationTM"
          - "UnmodifiedFuzzyTranslationMTNT"
          - "Moravia"
          - "ExtraNumbersV3"
          - "UnresolvedConversation"
          - "NestedTags"
          - "FuzzyInconsistencyTargetSource"
          - "FuzzyInconsistencySourceTarget"
          - "CustomQA"
          - "MissingNonTranslatableAnnotation"
        maxItems: 100
        minItems: 0
      maxQaWarningsCount:
        type: "integer"
        format: "int32"
        description: "Maximum number of QA warnings in result, default: 100. For efficiency\
          \ reasons QA\nwarnings are processed with minimum segments chunk size 10,\
          \ therefore slightly more warnings are returned."
        minimum: 1
        maximum: 1000
  QuarkTagSettingsDto:
    type: "object"
    properties:
      removeKerningTrackingTags:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
  Query:
    type: "object"
    properties:
      query:
        type: "string"
      lang:
        type: "string"
  QuoteCreateV2Dto:
    type: "object"
    required:
    - "analyse"
    - "name"
    - "priceList"
    - "project"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      project:
        $ref: "#/definitions/UidReference"
      analyse:
        $ref: "#/definitions/IdReference"
      priceList:
        $ref: "#/definitions/IdReference"
      netRateScheme:
        $ref: "#/definitions/IdReference"
      provider:
        $ref: "#/definitions/ProviderReference"
      workflowSettings:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/QuoteWorkflowSettingDto"
      units:
        type: "array"
        items:
          $ref: "#/definitions/QuoteUnitsDto"
      additionalSteps:
        type: "array"
        items:
          type: "string"
  QuoteDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uid:
        type: "string"
      name:
        type: "string"
      status:
        type: "string"
        enum:
        - "APPROVED"
        - "DECLINED"
        - "DRAFT"
        - "FOR_APPROVAL"
        - "NEW"
      currency:
        type: "string"
      billingUnit:
        type: "string"
        enum:
        - "Character"
        - "Word"
        - "Page"
        - "Hour"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      totalPrice:
        type: "number"
        format: "double"
      netRateScheme:
        $ref: "#/definitions/NetRateSchemeReference"
      priceList:
        $ref: "#/definitions/PriceListReference"
      workflowStepList:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepReference"
      provider:
        $ref: "#/definitions/ProviderReference"
      customerEmail:
        type: "string"
      quoteType:
        type: "string"
        enum:
        - "BUYER"
        - "PROVIDER"
      editable:
        type: "boolean"
      outdated:
        type: "boolean"
      analyseUid:
        type: "string"
      innerId:
        type: "integer"
        format: "int32"
  QuoteUnitsDto:
    type: "object"
    required:
    - "analyseLanguagePart"
    properties:
      analyseLanguagePart:
        $ref: "#/definitions/IdReference"
      value:
        type: "number"
        format: "double"
        minimum: 0
  QuoteV2Dto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uid:
        type: "string"
      name:
        type: "string"
      status:
        type: "string"
        enum:
        - "APPROVED"
        - "DECLINED"
        - "DRAFT"
        - "FOR_APPROVAL"
        - "NEW"
      currency:
        type: "string"
      billingUnit:
        type: "string"
        enum:
        - "Character"
        - "Word"
        - "Page"
        - "Hour"
      createdBy:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      totalPrice:
        type: "number"
        format: "double"
      netRateScheme:
        $ref: "#/definitions/NetRateSchemeReference"
      priceList:
        $ref: "#/definitions/PriceListReference"
      workflowStepList:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepReference"
      provider:
        $ref: "#/definitions/ProviderReference"
      customerEmail:
        type: "string"
      quoteType:
        type: "string"
        enum:
        - "BUYER"
        - "PROVIDER"
      editable:
        type: "boolean"
      outdated:
        type: "boolean"
      additionalSteps:
        type: "array"
        items:
          $ref: "#/definitions/AdditionalWorkflowStepV2Dto"
  QuoteWorkflowSettingDto:
    type: "object"
    required:
    - "workflowStep"
    properties:
      workflowStep:
        $ref: "#/definitions/IdReference"
      units:
        type: "array"
        items:
          $ref: "#/definitions/QuoteUnitsDto"
        maxItems: 100
        minItems: 0
  REGEX:
    allOf:
    - $ref: "#/definitions/QACheckDtoV2"
    - type: "object"
      properties:
        rules:
          type: "array"
          items:
            $ref: "#/definitions/RegexpCheckRuleDtoV2"
  ReferenceCorrelation:
    type: "object"
    properties:
      uid:
        type: "string"
      role:
        type: "string"
        enum:
        - "PARENT"
  ReferenceFileAccessDto:
    type: "object"
    properties:
      canCreate:
        type: "boolean"
  ReferenceFilePageDto:
    type: "object"
    properties:
      totalElements:
        type: "integer"
        format: "int32"
      totalPages:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      pageNumber:
        type: "integer"
        format: "int32"
      numberOfElements:
        type: "integer"
        format: "int32"
      content:
        type: "array"
        items:
          $ref: "#/definitions/ReferenceFileReference"
      sort:
        $ref: "#/definitions/Sort"
      access:
        $ref: "#/definitions/ReferenceFileAccessDto"
  ReferenceFileReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      filename:
        type: "string"
      note:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
  ReferenceFilesDto:
    type: "object"
    properties:
      referenceFiles:
        type: "array"
        items:
          $ref: "#/definitions/ReferenceFileReference"
  RegexpCheckRuleDtoV2:
    type: "object"
    properties:
      description:
        type: "string"
      sourceRegexp:
        type: "string"
      targetRegexp:
        type: "string"
      id:
        type: "string"
      ignorable:
        type: "boolean"
      instant:
        type: "boolean"
  RegexpCheckRuleDtoV4:
    type: "object"
    properties:
      description:
        type: "string"
      sourceRegexp:
        type: "string"
      targetRegexp:
        type: "string"
      id:
        type: "string"
      ignorable:
        type: "boolean"
      instant:
        type: "boolean"
  RelativeTranslationLengthWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        limit:
          type: "string"
  RemoteUploadedFileDto:
    type: "object"
    properties:
      uid:
        type: "string"
        readOnly: true
      name:
        type: "string"
        readOnly: true
      size:
        type: "integer"
        format: "int64"
        readOnly: true
      type:
        type: "string"
        readOnly: true
      url:
        type: "string"
  RepeatedWordWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        word:
          type: "string"
        positions:
          type: "array"
          items:
            $ref: "#/definitions/Position"
  RepeatedWordsWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        repeatedWords:
          type: "array"
          items:
            type: "string"
  RepetitionsSettingsDto_4:
    type: "object"
    properties:
      autoPropagateRepetitions:
        type: "boolean"
        description: "Propagate repetitions. Default: false"
      confirmRepetitions:
        type: "boolean"
        description: "Set segment status to confirmed for: Repetitions. Default: false"
      autoPropagateToLockedRepetitions:
        type: "boolean"
        description: "Changes in 1st repetition propagate upon confirmation into subsequent\
          \ locked repetitions. Default: false"
      lockSubsequentRepetitions:
        type: "boolean"
        description: "If auto-propagated subsequent repetitions should be locked.\
          \ Default: false"
    description: "Repetitions related settings"
  ReplayRequestDto:
    type: "object"
    properties:
      webhookCalls:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
  ResxSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
      htmlSubFilter:
        type: "boolean"
  ReviewProviderDto:
    type: "object"
    properties:
      uid:
        type: "string"
        readOnly: true
      organizationUid:
        type: "string"
        readOnly: true
  RunAutoLqaDto:
    type: "object"
    properties:
      jobParts:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
      projectWorkflowStep:
        $ref: "#/definitions/IdReference"
  SEGMENT_TARGET:
    allOf:
    - $ref: "#/definitions/CommonConversationDto"
    - type: "object"
      properties:
        references:
          $ref: "#/definitions/PlainReferences"
  STRING:
    allOf:
    - $ref: "#/definitions/QACheckDtoV2"
    - type: "object"
      properties:
        ignorable:
          type: "boolean"
        enabled:
          type: "boolean"
        value:
          type: "string"
        instant:
          type: "boolean"
  SUBMITTER:
    allOf:
    - $ref: "#/definitions/AbstractUserCreateDto"
    - type: "object"
      properties:
        automationWidgets:
          type: "array"
          description: "If no automation widgets are assigned in request the default\
            \ automation widgets will be assigned instead"
          items:
            $ref: "#/definitions/IdReference"
        projectViewCreatedByOtherSubmitters:
          type: "boolean"
          description: "View projects created by other Submitters. Default: false"
  SUBMITTER_EDIT:
    allOf:
    - $ref: "#/definitions/AbstractUserEditDto"
    - type: "object"
      required:
      - "automationWidgets"
      properties:
        automationWidgets:
          type: "array"
          items:
            $ref: "#/definitions/IdReference"
        projectViewCreatedByOtherSubmitters:
          type: "boolean"
          description: "View projects created by other Submitters. Default: false"
  SUBMITTER_RESPONSE:
    allOf:
    - $ref: "#/definitions/UserDetailsDtoV3"
    - type: "object"
      required:
      - "automationWidgets"
      properties:
        automationWidgets:
          type: "array"
          items:
            $ref: "#/definitions/JobWidgetReference"
        projectViewCreatedByOtherSubmitters:
          type: "boolean"
  SchemaExtension:
    type: "object"
    properties:
      schema:
        type: "string"
      required:
        type: "boolean"
  ScimMeta:
    type: "object"
    properties:
      created:
        type: "string"
        format: "date-time"
      location:
        type: "string"
  ScimResourceSchema:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      attributes:
        type: "array"
        items:
          $ref: "#/definitions/Attribute"
  ScimResourceTypeSchema:
    type: "object"
    properties:
      schemas:
        type: "array"
        items:
          type: "string"
      id:
        type: "string"
      name:
        type: "string"
      endpoint:
        type: "string"
      description:
        type: "string"
      schema:
        type: "string"
      schemaExtensions:
        type: "array"
        items:
          $ref: "#/definitions/SchemaExtension"
  ScimUserCoreDto:
    type: "object"
    required:
    - "emails"
    - "name"
    - "userName"
    properties:
      schemas:
        type: "array"
        example: "[ \"urn:ietf:params:scim:schemas:core:2.0:User\" ]"
        items:
          type: "string"
      id:
        type: "string"
        readOnly: true
      userName:
        type: "string"
      name:
        $ref: "#/definitions/Name"
      active:
        type: "boolean"
        description: "Default: true"
      emails:
        type: "array"
        items:
          $ref: "#/definitions/Email"
        maxItems: 2147483647
        minItems: 1
      meta:
        $ref: "#/definitions/ScimMeta"
  ScoringResultDto:
    type: "object"
    properties:
      jobPartUid:
        type: "string"
      score:
        type: "number"
        format: "double"
      status:
        type: "string"
        enum:
        - "PASS"
        - "FAIL"
      overallFeedback:
        type: "string"
      issueCounts:
        $ref: "#/definitions/ScoringResultIssueCountsDto"
  ScoringResultIssueCountsDto:
    type: "object"
    properties:
      neutral:
        type: "integer"
        format: "int32"
      neutralRepeated:
        type: "integer"
        format: "int32"
      minor:
        type: "integer"
        format: "int32"
      minorRepeated:
        type: "integer"
        format: "int32"
      major:
        type: "integer"
        format: "int32"
      majorRepeated:
        type: "integer"
        format: "int32"
      critical:
        type: "integer"
        format: "int32"
      criticalRepeated:
        type: "integer"
        format: "int32"
  SdlXlfSettingsDto:
    type: "object"
    properties:
      icuSubFilter:
        type: "boolean"
        description: "Default: false"
      skipImportRules:
        type: "string"
        description: "Default: translate=no"
      importAsConfirmedRules:
        type: "string"
      importAsLockedRules:
        type: "string"
        description: "Default: locked=true"
      exportAttrsWhenConfirmedAndLocked:
        type: "string"
        description: "Default: locked=true"
      exportAttrsWhenConfirmedAndNotLocked:
        type: "string"
      exportAttrsWhenNotConfirmedAndLocked:
        type: "string"
        description: "Default: locked=true"
      exportAttrsWhenNotConfirmedAndNotLocked:
        type: "string"
      saveConfirmedSegments:
        type: "boolean"
        description: "Default: true"
      tagRegexp:
        type: "string"
  SearchInTextResponse2Dto:
    type: "object"
    properties:
      termBase:
        $ref: "#/definitions/TermBaseReference"
      sourceTerm:
        $ref: "#/definitions/TermV2Dto"
      concept:
        $ref: "#/definitions/ConceptDtov2"
      translationTerms:
        type: "array"
        items:
          $ref: "#/definitions/TermV2Dto"
      subTerm:
        type: "boolean"
      matches:
        type: "array"
        items:
          $ref: "#/definitions/Match"
  SearchInTextResponseList2Dto:
    type: "object"
    properties:
      searchResults:
        type: "array"
        items:
          $ref: "#/definitions/SearchInTextResponse2Dto"
  SearchJobsDto:
    type: "object"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/JobPartExtendedDto"
  SearchJobsRequestDto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        description: "Max: 50 records"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 50
        minItems: 1
  SearchRequestDto:
    type: "object"
    required:
    - "query"
    - "sourceLang"
    properties:
      query:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      previousSegment:
        type: "string"
      nextSegment:
        type: "string"
      tagMetadata:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadataDto"
      trimQuery:
        type: "boolean"
        description: "Remove leading and trailing whitespace from query. Default:\
          \ true"
      phraseQuery:
        type: "boolean"
        description: "Return both wildcard and exact search results. Default: true"
  SearchResponseListTbDto:
    type: "object"
    properties:
      searchResults:
        type: "array"
        items:
          $ref: "#/definitions/SearchResponseTbDto"
  SearchResponseListTmDto:
    type: "object"
    properties:
      searchResults:
        type: "array"
        items:
          $ref: "#/definitions/SearchTMResponseDto"
  SearchResponseListTmDtoV3:
    type: "object"
    properties:
      searchResults:
        type: "array"
        items:
          $ref: "#/definitions/SearchTMResponseDtoV3"
  SearchResponseTbDto:
    type: "object"
    properties:
      termBase:
        $ref: "#/definitions/TermBaseDto"
      conceptId:
        type: "string"
      sourceTerm:
        $ref: "#/definitions/TermDto"
      translationTerms:
        type: "array"
        items:
          $ref: "#/definitions/TermDto"
  SearchTMByJobRequestDto:
    type: "object"
    required:
    - "segment"
    properties:
      segment:
        type: "string"
      workflowLevel:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 15
      scoreThreshold:
        type: "number"
        format: "double"
        minimum: 0.0
        maximum: 1.01
        exclusiveMinimum: false
        exclusiveMaximum: false
      previousSegment:
        type: "string"
      nextSegment:
        type: "string"
      contextKey:
        type: "string"
      maxSegments:
        type: "integer"
        format: "int32"
        description: "Default: 5"
        minimum: 0
        maximum: 5
      maxSubSegments:
        type: "integer"
        format: "int32"
        description: "Default: 5"
        minimum: 0
        maximum: 5
      tagMetadata:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadataDto"
  SearchTMByJobRequestDtoV3:
    type: "object"
    required:
    - "query"
    properties:
      query:
        type: "string"
      reverse:
        type: "boolean"
        description: "Default: false"
      scoreThreshold:
        type: "number"
        format: "double"
        description: "Default: 0.0"
        minimum: 0.0
        maximum: 1.01
        exclusiveMinimum: false
        exclusiveMaximum: false
      maxResults:
        type: "integer"
        format: "int32"
        description: "Default: 15"
        minimum: 1
        maximum: 100
  SearchTMClientDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  SearchTMClientDtoV3:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  SearchTMDomainDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  SearchTMDomainDtoV3:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  SearchTMProjectDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uid:
        type: "string"
      name:
        type: "string"
  SearchTMProjectDtoV3:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uid:
        type: "string"
      name:
        type: "string"
  SearchTMRequestDto:
    type: "object"
    required:
    - "segment"
    - "targetLangs"
    properties:
      segment:
        type: "string"
      workflowLevel:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 15
      scoreThreshold:
        type: "number"
        format: "double"
        minimum: 0.0
        maximum: 1.01
        exclusiveMinimum: false
        exclusiveMaximum: false
      previousSegment:
        type: "string"
      nextSegment:
        type: "string"
      contextKey:
        type: "string"
      maxSegments:
        type: "integer"
        format: "int32"
        description: "Default: 5"
        minimum: 0
        maximum: 5
      maxSubSegments:
        type: "integer"
        format: "int32"
        description: "Default: 5"
        minimum: 0
        maximum: 5
      tagMetadata:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadataDto"
      targetLangs:
        type: "array"
        items:
          type: "string"
        maxItems: 2147483647
        minItems: 1
  SearchTMResponseDto:
    type: "object"
    properties:
      segmentId:
        type: "string"
      source:
        $ref: "#/definitions/SearchTMSegmentDto"
      translations:
        type: "array"
        items:
          $ref: "#/definitions/SearchTMSegmentDto"
      transMemory:
        $ref: "#/definitions/SearchTMTransMemoryDto"
      grossScore:
        type: "number"
        format: "double"
      score:
        type: "number"
        format: "double"
      subSegment:
        type: "boolean"
  SearchTMResponseDtoV3:
    type: "object"
    properties:
      segmentId:
        type: "string"
      source:
        $ref: "#/definitions/SearchTMSegmentDtoV3"
      translations:
        type: "array"
        items:
          $ref: "#/definitions/SearchTMSegmentDtoV3"
      transMemory:
        $ref: "#/definitions/SearchTMTransMemoryDtoV3"
      grossScore:
        type: "number"
        format: "double"
      score:
        type: "number"
        format: "double"
      subSegment:
        type: "boolean"
  SearchTMSegmentDto:
    type: "object"
    properties:
      id:
        type: "string"
      text:
        type: "string"
      lang:
        type: "string"
      rtl:
        type: "boolean"
      modifiedAt:
        type: "integer"
        format: "int64"
      createdAt:
        type: "integer"
        format: "int64"
      modifiedBy:
        $ref: "#/definitions/UserReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      filename:
        type: "string"
      project:
        $ref: "#/definitions/SearchTMProjectDto"
      client:
        $ref: "#/definitions/SearchTMClientDto"
      domain:
        $ref: "#/definitions/SearchTMDomainDto"
      subDomain:
        $ref: "#/definitions/SearchTMSubDomainDto"
      tagMetadata:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadata"
      previousSegment:
        type: "string"
      nextSegment:
        type: "string"
      key:
        type: "string"
  SearchTMSegmentDtoV3:
    type: "object"
    properties:
      id:
        type: "string"
      text:
        type: "string"
      lang:
        type: "string"
      rtl:
        type: "boolean"
      modifiedAt:
        type: "integer"
        format: "int64"
      createdAt:
        type: "integer"
        format: "int64"
      modifiedBy:
        $ref: "#/definitions/UserReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      filename:
        type: "string"
      project:
        $ref: "#/definitions/SearchTMProjectDtoV3"
      client:
        $ref: "#/definitions/SearchTMClientDtoV3"
      domain:
        $ref: "#/definitions/SearchTMDomainDtoV3"
      subDomain:
        $ref: "#/definitions/SearchTMSubDomainDtoV3"
      tagMetadata:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadata"
      previousSegment:
        type: "string"
      nextSegment:
        type: "string"
      key:
        type: "string"
      targetNote:
        type: "string"
  SearchTMSubDomainDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  SearchTMSubDomainDtoV3:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  SearchTMTransMemoryDto:
    type: "object"
    properties:
      uid:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
      reverse:
        type: "boolean"
  SearchTMTransMemoryDtoV3:
    type: "object"
    properties:
      uid:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
      reverse:
        type: "boolean"
  SearchTbByJobRequestDto:
    type: "object"
    required:
    - "query"
    properties:
      query:
        type: "string"
      count:
        type: "integer"
        format: "int32"
        description: "Default: 15"
      offset:
        type: "integer"
        format: "int32"
        description: "Default: 0"
      reverse:
        type: "boolean"
        description: "Default: false"
  SearchTbInTextByJobRequestDto:
    type: "object"
    required:
    - "text"
    properties:
      text:
        type: "string"
      reverse:
        type: "boolean"
        description: "Default: false"
      zeroLengthSeparator:
        type: "string"
  SearchTbResponseDto:
    type: "object"
    properties:
      termBase:
        $ref: "#/definitions/TermBaseReference"
      concept:
        $ref: "#/definitions/ConceptDtov2"
      sourceTerm:
        $ref: "#/definitions/TermV2Dto"
      translationTerms:
        type: "array"
        items:
          $ref: "#/definitions/TermV2Dto"
  SearchTbResponseListDto:
    type: "object"
    properties:
      searchResults:
        type: "array"
        items:
          $ref: "#/definitions/SearchTbResponseDto"
  SecuritySettingsReference:
    type: "object"
    properties:
      canEdit:
        type: "boolean"
      canEditDueDate:
        type: "boolean"
      canDelete:
        type: "boolean"
  SegRuleReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      language:
        type: "string"
      name:
        type: "string"
      filename:
        type: "string"
      primary:
        type: "boolean"
  SegmentDto:
    type: "object"
    required:
    - "sourceSegment"
    - "targetLang"
    - "targetSegment"
    properties:
      targetLang:
        type: "string"
      sourceSegment:
        type: "string"
      targetSegment:
        type: "string"
      previousSourceSegment:
        type: "string"
      nextSourceSegment:
        type: "string"
      sourceTagMetadata:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadataDto"
      targetTagMetadata:
        type: "array"
        items:
          $ref: "#/definitions/TagMetadataDto"
  SegmentListDto:
    type: "object"
    properties:
      segments:
        type: "array"
        items:
          $ref: "#/definitions/JobSegmentDto"
  SegmentReference:
    type: "object"
    properties:
      uid:
        type: "string"
  SegmentWarningDto:
    type: "object"
    discriminator: "type"
    properties:
      id:
        type: "string"
      ignored:
        type: "boolean"
      type:
        type: "string"
      repetitionGroupId:
        type: "string"
  SegmentWarningsDto:
    type: "object"
    properties:
      segmentId:
        type: "string"
      warnings:
        type: "array"
        items:
          $ref: "#/definitions/SegmentWarningDto"
      ignoredChecks:
        type: "array"
        items:
          type: "string"
  SegmentationRuleDto:
    type: "object"
    required:
    - "filename"
    - "name"
    properties:
      id:
        type: "string"
        readOnly: true
      uid:
        type: "string"
        readOnly: true
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      locale:
        type: "string"
      primary:
        type: "boolean"
        description: "Default: false"
      filename:
        type: "string"
        minLength: 0
        maxLength: 255
      dateCreated:
        type: "string"
        format: "date-time"
        readOnly: true
      createdBy:
        description: "created by user"
        $ref: "#/definitions/UserReference"
    description: "segmentation rule object"
  SegmentationRulesOwnersDto:
    type: "object"
    properties:
      owners:
        type: "array"
        items:
          $ref: "#/definitions/UserReference"
    description: "Owners of segmentation rules"
  SegmentsCountsDto:
    type: "object"
    properties:
      allConfirmed:
        type: "boolean"
      charsCount:
        type: "integer"
        format: "int64"
      completedCharsCount:
        type: "integer"
        format: "int64"
      confirmedCharsCount:
        type: "integer"
        format: "int64"
      confirmedLockedCharsCount:
        type: "integer"
        format: "int64"
      lockedCharsCount:
        type: "integer"
        format: "int64"
      segmentsCount:
        type: "integer"
        format: "int64"
      completedSegmentsCount:
        type: "integer"
        format: "int64"
      lockedSegmentsCount:
        type: "integer"
        format: "int64"
      segmentGroupsCount:
        type: "integer"
        format: "int64"
      translatedSegmentsCount:
        type: "integer"
        format: "int64"
      translatedLockedSegmentsCount:
        type: "integer"
        format: "int64"
      wordsCount:
        type: "integer"
        format: "int64"
      completedWordsCount:
        type: "integer"
        format: "int64"
      confirmedWordsCount:
        type: "integer"
        format: "int64"
      confirmedLockedWordsCount:
        type: "integer"
        format: "int64"
      lockedWordsCount:
        type: "integer"
        format: "int64"
      addedSegments:
        type: "integer"
        format: "int64"
      addedWords:
        type: "integer"
        format: "int64"
      machineTranslationPostEditedSegmentsCount:
        type: "integer"
        format: "int64"
      machineTranslationRelevantSegmentsCount:
        type: "integer"
        format: "int64"
      qualityAssurance:
        $ref: "#/definitions/QualityAssuranceDto"
      qualityAssuranceResolved:
        type: "boolean"
  SegmentsCountsResponseDto:
    type: "object"
    properties:
      jobPartUid:
        type: "string"
      counts:
        $ref: "#/definitions/SegmentsCountsDto"
      previousWorkflow:
        $ref: "#/definitions/PreviousWorkflowDto"
  SegmentsCountsResponseListDto:
    type: "object"
    properties:
      segmentsCountsResults:
        type: "array"
        items:
          $ref: "#/definitions/SegmentsCountsResponseDto"
  ServiceListEntryDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      publicName:
        type: "string"
      type:
        type: "string"
        enum:
        - "ProfessionalTranslation"
  ServiceProviderConfigDto:
    type: "object"
    properties:
      authenticationSchemes:
        type: "array"
        items:
          $ref: "#/definitions/AuthSchema"
      schemas:
        type: "array"
        items:
          type: "string"
      patch:
        $ref: "#/definitions/Supported"
      bulk:
        $ref: "#/definitions/Supported"
      filter:
        $ref: "#/definitions/Supported"
      changePassword:
        $ref: "#/definitions/Supported"
      sort:
        $ref: "#/definitions/Supported"
      etag:
        $ref: "#/definitions/Supported"
      xmlDataFormat:
        $ref: "#/definitions/Supported"
  SetContextPTTransMemoriesV2Dto:
    type: "object"
    required:
    - "transMemories"
    properties:
      transMemories:
        type: "array"
        items:
          $ref: "#/definitions/SetProjectTemplateTransMemoryV2Dto"
      targetLang:
        type: "string"
        description: "Set translation memory only for the specific project target\
          \ language"
      workflowStep:
        description: "Set translation memory only for the specific workflow step"
        $ref: "#/definitions/UidReference"
      orderEnabled:
        type: "boolean"
        description: "Default: false"
  SetContextTransMemoriesDtoV3Dto:
    type: "object"
    required:
    - "transMemories"
    properties:
      transMemories:
        type: "array"
        items:
          $ref: "#/definitions/SetProjectTransMemoryV3Dto"
      targetLang:
        type: "string"
        description: "Set translation memory only for the specific project target\
          \ language"
      workflowStep:
        description: "Set translation memory only for the specific workflow step"
        $ref: "#/definitions/UidReference"
      orderEnabled:
        type: "boolean"
        description: "Default: false"
  SetFinancialSettingsDto:
    type: "object"
    properties:
      netRateScheme:
        $ref: "#/definitions/IdReference"
      priceList:
        $ref: "#/definitions/IdReference"
  SetProjectStatusDto:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        enum:
        - "NEW"
        - "ASSIGNED"
        - "COMPLETED"
        - "ACCEPTED_BY_VENDOR"
        - "DECLINED_BY_VENDOR"
        - "COMPLETED_BY_VENDOR"
        - "CANCELLED"
  SetProjectTemplateTermBaseDto:
    type: "object"
    properties:
      readTermBases:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
      writeTermBase:
        $ref: "#/definitions/IdReference"
      qualityAssuranceTermBases:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
      targetLang:
        type: "string"
      workflowStep:
        $ref: "#/definitions/IdReference"
  SetProjectTemplateTransMemoriesV2Dto:
    type: "object"
    required:
    - "dataPerContext"
    properties:
      dataPerContext:
        type: "array"
        items:
          $ref: "#/definitions/SetContextPTTransMemoriesV2Dto"
  SetProjectTemplateTransMemoryV2Dto:
    type: "object"
    required:
    - "transMemory"
    properties:
      transMemory:
        $ref: "#/definitions/UidReference"
      readMode:
        type: "boolean"
        description: "Default: false"
      writeMode:
        type: "boolean"
        description: "Can be set only for Translation Memory with read == true.<br/>\n\
          \        Max 2 write TMs allowed per project.<br/>\n        Default: false"
      penalty:
        type: "number"
        format: "double"
        minimum: 0.0
        maximum: 100.0
        exclusiveMinimum: false
        exclusiveMaximum: false
      applyPenaltyTo101Only:
        type: "boolean"
        description: "Can be set only for penalty == 1<br/>Default: false"
      order:
        type: "integer"
        format: "int32"
  SetProjectTransMemoriesV3Dto:
    type: "object"
    required:
    - "dataPerContext"
    properties:
      dataPerContext:
        type: "array"
        items:
          $ref: "#/definitions/SetContextTransMemoriesDtoV3Dto"
  SetProjectTransMemoryV3Dto:
    type: "object"
    required:
    - "transMemory"
    properties:
      transMemory:
        $ref: "#/definitions/UidReference"
      readMode:
        type: "boolean"
        description: "Default: false"
      writeMode:
        type: "boolean"
        description: "Can be set only for Translation Memory with read == true.<br/>\n\
          \        Max 2 write TMs allowed per project.<br/>\n        Default: false"
      penalty:
        type: "number"
        format: "double"
        minimum: 0.0
        maximum: 100.0
        exclusiveMinimum: false
        exclusiveMaximum: false
      applyPenaltyTo101Only:
        type: "boolean"
        description: "Can be set only for penalty == 1<br/>Default: false"
      order:
        type: "integer"
        format: "int32"
  SetTermBaseDto:
    type: "object"
    properties:
      readTermBases:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
      writeTermBase:
        $ref: "#/definitions/IdReference"
      qualityAssuranceTermBases:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
      targetLang:
        type: "string"
  SettingsReference:
    type: "object"
    properties:
      securitySettings:
        $ref: "#/definitions/SecuritySettingsReference"
  SeverityDto:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Code of the severity category"
      value:
        type: "number"
        format: "double"
        description: "Allowed values 0.0-100,000.0"
  Sort:
    type: "object"
    properties:
      orders:
        type: "array"
        items:
          $ref: "#/definitions/Order"
  SourceTargetRegexpWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        description:
          type: "string"
  SpellCheckRequestDto:
    type: "object"
    required:
    - "lang"
    - "texts"
    properties:
      lang:
        type: "string"
      texts:
        type: "array"
        items:
          type: "string"
      referenceTexts:
        type: "array"
        items:
          type: "string"
      zeroLengthSeparator:
        type: "string"
  SpellCheckResponseDto:
    type: "object"
    properties:
      spellCheckResults:
        type: "array"
        items:
          $ref: "#/definitions/CheckResponse"
  SpellCheckWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        misspelledWords:
          type: "array"
          items:
            $ref: "#/definitions/MisspelledWordDto"
  SplitJobActionDto:
    type: "object"
    properties:
      segmentOrdinals:
        type: "array"
        items:
          type: "integer"
          format: "int64"
        maxItems: 2147483647
        minItems: 1
      partCount:
        type: "integer"
        format: "int32"
      partSize:
        type: "integer"
        format: "int32"
      wordCount:
        type: "integer"
        format: "int32"
      byDocumentPart:
        type: "boolean"
        description: "Can be used only for PowerPoint files"
  StatusDto:
    type: "object"
    properties:
      name:
        type: "string"
        enum:
        - "resolved"
        - "unresolved"
      by:
        $ref: "#/definitions/MentionableUserDto"
      date:
        type: "string"
        format: "date-time"
  StyleWeightsDto:
    type: "object"
    properties:
      style:
        $ref: "#/definitions/ToggleableWeightDto"
      awkward:
        $ref: "#/definitions/ToggleableWeightDto"
      companyStyle:
        $ref: "#/definitions/ToggleableWeightDto"
      inconsistentStyle:
        $ref: "#/definitions/ToggleableWeightDto"
      thirdPartyStyle:
        $ref: "#/definitions/ToggleableWeightDto"
      unidiomatic:
        $ref: "#/definitions/ToggleableWeightDto"
  SubDomainDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      createdBy:
        $ref: "#/definitions/UserReference"
  SubDomainEditDto:
    type: "object"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
  SubDomainReference:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  SubDomainReference_3:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
  SubDomainReference_4:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  SubstituteDto:
    type: "object"
    required:
    - "source"
    - "target"
    properties:
      source:
        type: "string"
      target:
        type: "string"
  SubstituteDtoV2:
    type: "object"
    required:
    - "source"
    - "target"
    properties:
      source:
        type: "string"
        minLength: 1
        maxLength: 1
      target:
        type: "string"
        minLength: 1
        maxLength: 1
  SuggestRequestDto:
    type: "object"
    required:
    - "lang"
    - "words"
    properties:
      lang:
        type: "string"
      words:
        type: "array"
        items:
          type: "string"
      referenceTexts:
        type: "array"
        items:
          type: "string"
  SuggestResponse:
    type: "object"
    properties:
      word:
        type: "string"
      suggestions:
        type: "array"
        items:
          $ref: "#/definitions/SuggestionDto_2"
  SuggestResponseDto:
    type: "object"
    properties:
      suggestResults:
        type: "array"
        items:
          $ref: "#/definitions/SuggestResponse"
  Suggestion:
    type: "object"
    properties:
      text:
        type: "string"
  SuggestionDto_2:
    type: "object"
    properties:
      word:
        type: "string"
      distance:
        type: "integer"
        format: "int32"
  Supported:
    type: "object"
    properties:
      supported:
        type: "boolean"
  TMMatchSettingsDto:
    type: "object"
    properties:
      contextType:
        type: "string"
        description: "Default: PREV_AND_NEXT_SEGMENT"
        enum:
        - "AUTO"
        - "PREV_AND_NEXT_SEGMENT"
        - "SEGMENT_KEY"
        - "NO_CONTEXT"
      prevOrNextSegment:
        type: "boolean"
        description: "Default: false"
      penalizeMultiContextMatch:
        type: "boolean"
        description: "Default: false"
      ignoreTagMetadata:
        type: "boolean"
        description: "Default: true"
      metadataPriority:
        $ref: "#/definitions/MetadataPrioritySettingsDto"
  TagMetadata:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
      content:
        type: "string"
      transAttributes:
        type: "string"
  TagMetadataDto:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
      content:
        type: "string"
      transAttributes:
        type: "string"
  TargetFileWarningsDto:
    type: "object"
    properties:
      warnings:
        type: "array"
        items:
          type: "string"
  TargetLanguageDto:
    type: "object"
    required:
    - "language"
    properties:
      language:
        type: "string"
  TargetSourceIdenticalWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  TaskMappingDto:
    type: "object"
    properties:
      taskId:
        type: "string"
      workflowLevel:
        type: "string"
      resourcePath:
        type: "string"
      project:
        $ref: "#/definitions/UidReference"
      job:
        $ref: "#/definitions/UidReference"
  Term:
    type: "object"
    properties:
      text:
        type: "string"
      preferred:
        type: "boolean"
  TermBaseDto:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      internalId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      langs:
        type: "array"
        items:
          type: "string"
      client:
        $ref: "#/definitions/ClientReference"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      businessUnit:
        $ref: "#/definitions/BusinessUnitReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      owner:
        $ref: "#/definitions/UserReference"
      dateCreated:
        type: "string"
        format: "date-time"
      note:
        type: "string"
      canShow:
        type: "boolean"
  TermBaseEditDto:
    type: "object"
    required:
    - "langs"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      langs:
        type: "array"
        items:
          type: "string"
        maxItems: 2147483647
        minItems: 1
      client:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      owner:
        description: "Owner of the TM must be Admin or PM"
        $ref: "#/definitions/IdReference"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
  TermBaseReference:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
  TermBaseSearchRequestDto:
    type: "object"
    required:
    - "query"
    - "sourceLang"
    - "targetLangs"
    properties:
      targetLangs:
        type: "array"
        items:
          type: "string"
      sourceLang:
        type: "string"
      query:
        type: "string"
      status:
        type: "string"
        enum:
        - "New"
        - "Approved"
  TermCreateByJobDto:
    type: "object"
    required:
    - "text"
    properties:
      text:
        type: "string"
      caseSensitive:
        type: "boolean"
        description: "Default: false"
      exactMatch:
        type: "boolean"
        description: "Default: false"
      forbidden:
        type: "boolean"
        description: "Default: false"
      preferred:
        type: "boolean"
        description: "Default: false"
      usage:
        type: "string"
      note:
        type: "string"
      shortTranslation:
        type: "string"
      termType:
        type: "string"
        enum:
        - "FULL_FORM"
        - "SHORT_FORM"
        - "ACRONYM"
        - "ABBREVIATION"
        - "PHRASE"
        - "VARIANT"
      partOfSpeech:
        type: "string"
        enum:
        - "ADJECTIVE"
        - "NOUN"
        - "VERB"
        - "ADVERB"
      gender:
        type: "string"
        enum:
        - "MASCULINE"
        - "FEMININE"
        - "NEUTRAL"
      number:
        type: "string"
        enum:
        - "SINGULAR"
        - "PLURAL"
        - "UNCOUNTABLE"
  TermCreateDto:
    type: "object"
    required:
    - "lang"
    - "text"
    properties:
      text:
        type: "string"
      lang:
        type: "string"
      caseSensitive:
        type: "boolean"
        description: "Default: false"
      exactMatch:
        type: "boolean"
        description: "Default: false"
      forbidden:
        type: "boolean"
        description: "Default: false"
      preferred:
        type: "boolean"
        description: "Default: false"
      status:
        type: "string"
        enum:
        - "New"
        - "Approved"
      conceptId:
        type: "string"
      usage:
        type: "string"
      note:
        type: "string"
      shortTranslation:
        type: "string"
      termType:
        type: "string"
        enum:
        - "FULL_FORM"
        - "SHORT_FORM"
        - "ACRONYM"
        - "ABBREVIATION"
        - "PHRASE"
        - "VARIANT"
      partOfSpeech:
        type: "string"
        enum:
        - "ADJECTIVE"
        - "NOUN"
        - "VERB"
        - "ADVERB"
      gender:
        type: "string"
        enum:
        - "MASCULINE"
        - "FEMININE"
        - "NEUTRAL"
      number:
        type: "string"
        enum:
        - "SINGULAR"
        - "PLURAL"
        - "UNCOUNTABLE"
  TermDto:
    type: "object"
    required:
    - "text"
    properties:
      id:
        type: "string"
      text:
        type: "string"
      lang:
        type: "string"
      rtl:
        type: "boolean"
      modifiedAt:
        type: "string"
        format: "date-time"
      createdAt:
        type: "string"
        format: "date-time"
      modifiedBy:
        $ref: "#/definitions/UserReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      caseSensitive:
        type: "boolean"
      exactMatch:
        type: "boolean"
      forbidden:
        type: "boolean"
      preferred:
        type: "boolean"
      status:
        type: "string"
        enum:
        - "New"
        - "Approved"
      conceptId:
        type: "string"
      usage:
        type: "string"
      note:
        type: "string"
      writable:
        type: "boolean"
      shortTranslation:
        type: "string"
      termType:
        type: "string"
      partOfSpeech:
        type: "string"
      gender:
        type: "string"
      number:
        type: "string"
      definition:
        type: "string"
      domain:
        type: "string"
      subDomains:
        type: "array"
        items:
          type: "string"
      url:
        type: "string"
      conceptNote:
        type: "string"
  TermEditDto:
    type: "object"
    required:
    - "text"
    properties:
      text:
        type: "string"
      lang:
        type: "string"
      caseSensitive:
        type: "boolean"
        description: "Default: false"
      exactMatch:
        type: "boolean"
        description: "Default: false"
      forbidden:
        type: "boolean"
        description: "Default: false"
      preferred:
        type: "boolean"
        description: "Default: false"
      status:
        type: "string"
        enum:
        - "New"
        - "Approved"
      usage:
        type: "string"
      note:
        type: "string"
      shortTranslation:
        type: "string"
      termType:
        type: "string"
        enum:
        - "FULL_FORM"
        - "SHORT_FORM"
        - "ACRONYM"
        - "ABBREVIATION"
        - "PHRASE"
        - "VARIANT"
      partOfSpeech:
        type: "string"
        enum:
        - "ADJECTIVE"
        - "NOUN"
        - "VERB"
        - "ADVERB"
      gender:
        type: "string"
        enum:
        - "MASCULINE"
        - "FEMININE"
        - "NEUTRAL"
      number:
        type: "string"
        enum:
        - "SINGULAR"
        - "PLURAL"
        - "UNCOUNTABLE"
  TermPairDto:
    type: "object"
    required:
    - "sourceTerm"
    - "targetTerm"
    properties:
      sourceTerm:
        $ref: "#/definitions/TermDto"
      targetTerm:
        $ref: "#/definitions/TermDto"
  TermV2Dto:
    type: "object"
    required:
    - "text"
    properties:
      id:
        type: "string"
      text:
        type: "string"
      lang:
        type: "string"
      rtl:
        type: "boolean"
      modifiedAt:
        type: "string"
        format: "date-time"
      createdAt:
        type: "string"
        format: "date-time"
      modifiedBy:
        $ref: "#/definitions/UserReference"
      createdBy:
        $ref: "#/definitions/UserReference"
      caseSensitive:
        type: "boolean"
      exactMatch:
        type: "boolean"
      forbidden:
        type: "boolean"
      preferred:
        type: "boolean"
      status:
        type: "string"
        enum:
        - "New"
        - "Approved"
      conceptId:
        type: "string"
      usage:
        type: "string"
      note:
        type: "string"
      writable:
        type: "boolean"
      shortTranslation:
        type: "string"
      termType:
        type: "string"
      partOfSpeech:
        type: "string"
      gender:
        type: "string"
      number:
        type: "string"
  TerminologyWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        missingTerms:
          type: "array"
          items:
            type: "string"
        forbiddenTerms:
          type: "array"
          items:
            type: "string"
  TerminologyWeightsDto:
    type: "object"
    properties:
      terminology:
        $ref: "#/definitions/ToggleableWeightDto"
      inconsistentWithTb:
        $ref: "#/definitions/ToggleableWeightDto"
      inconsistentUseOfTerminology:
        $ref: "#/definitions/ToggleableWeightDto"
  ToggleableWeightDto:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "If this error category is enabled, default false"
      weight:
        type: "number"
        format: "double"
        example: 1.0
        description: "Weight of this error category (0.1 - 99.9)"
      code:
        type: "integer"
        format: "int32"
        description: "Code of the error category"
  TrailingPunctuationWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        srcPosition:
          $ref: "#/definitions/Position"
        srcEndPunctuation:
          type: "string"
        tgtPosition:
          $ref: "#/definitions/Position"
        tgtEndPunctuation:
          type: "string"
        suggestedTgtEndPunctuation:
          type: "string"
  TrailingSpaceWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  TransMemoryCreateDto:
    type: "object"
    required:
    - "name"
    - "sourceLang"
    - "targetLangs"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      client:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
  TransMemoryDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      internalId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      client:
        $ref: "#/definitions/ClientReference"
      businessUnit:
        $ref: "#/definitions/BusinessUnitReference"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      note:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      owner:
        $ref: "#/definitions/UserReference"
  TransMemoryDtoV2:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      internalId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      client:
        $ref: "#/definitions/ClientReference"
      businessUnit:
        $ref: "#/definitions/BusinessUnitReference"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      note:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      owner:
        $ref: "#/definitions/UserReference"
      relatedProjectsCount:
        type: "integer"
        format: "int64"
      collaboratorsCount:
        type: "integer"
        format: "int32"
      canEdit:
        type: "boolean"
  TransMemoryDtoV3:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      internalId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      client:
        $ref: "#/definitions/ClientReference"
      businessUnit:
        $ref: "#/definitions/BusinessUnitReference"
      domain:
        $ref: "#/definitions/DomainReference"
      subDomain:
        $ref: "#/definitions/SubDomainReference"
      note:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
  TransMemoryEditDto:
    type: "object"
    required:
    - "name"
    - "targetLangs"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      targetLangs:
        type: "array"
        description: "New target languages to add. No languages can be removed"
        items:
          type: "string"
      client:
        $ref: "#/definitions/IdReference"
      businessUnit:
        $ref: "#/definitions/IdReference"
      domain:
        $ref: "#/definitions/IdReference"
      subDomain:
        $ref: "#/definitions/IdReference"
      owner:
        description: "Owner of the TM must be Admin or PM"
        $ref: "#/definitions/IdReference"
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
  TransMemoryReferenceDtoV2:
    type: "object"
    required:
    - "uid"
    properties:
      internalId:
        type: "integer"
        format: "int32"
      uid:
        type: "string"
      name:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
  TranslationDto:
    type: "object"
    required:
    - "lang"
    - "text"
    properties:
      lang:
        type: "string"
      text:
        type: "string"
  TranslationLengthWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  TranslationMemorySettingsDto_5:
    type: "object"
    properties:
      useTranslationMemory:
        type: "boolean"
        description: "Pre-translate from translation memory. Default: false"
      translationMemoryThreshold:
        type: "number"
        format: "double"
        description: "Pre-translation threshold percent"
        minimum: 0
        maximum: 1.01
        exclusiveMinimum: false
        exclusiveMaximum: false
      confirm100PercentMatches:
        type: "boolean"
        description: "Set segment status to confirmed for: 100% translation memory\
          \ matches. Default: false"
      confirm101PercentMatches:
        type: "boolean"
        description: "Set segment status to confirmed for: 101% translation memory\
          \ matches. Default: false"
      lock100PercentMatches:
        type: "boolean"
        description: "Lock section: 100% translation memory matches. Default: false"
      lock101PercentMatches:
        type: "boolean"
        description: "Lock section: 101% translation memory matches. Default: false"
    description: "Translation memory related settings"
  TranslationPriceDto:
    type: "object"
    properties:
      workflowStep:
        $ref: "#/definitions/WorkflowStepDto"
      price:
        type: "number"
        format: "double"
    description: "connection between language pair and workflow steps, contains price"
  TranslationPriceListCreateDto:
    type: "object"
    required:
    - "currencyCode"
    - "name"
    properties:
      name:
        type: "string"
      currencyCode:
        type: "string"
      billingUnit:
        type: "string"
        description: "Default: Word"
        enum:
        - "Word"
        - "Page"
        - "Character"
        - "Hour"
      isDefault:
        type: "boolean"
        description: "Default: false"
  TranslationPriceListDto:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
        readOnly: true
      uid:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      currencyCode:
        type: "string"
      billingUnit:
        type: "string"
        enum:
        - "Character"
        - "Word"
        - "Page"
        - "Hour"
      isDefault:
        type: "boolean"
      priceSets:
        type: "array"
        items:
          $ref: "#/definitions/TranslationPriceSetDto"
    description: "Price list with set of prices for language pairs"
  TranslationPriceSetBulkDeleteDto:
    type: "object"
    properties:
      sourceLanguages:
        type: "array"
        items:
          type: "string"
      targetLanguages:
        type: "array"
        items:
          type: "string"
  TranslationPriceSetBulkMinimumPricesDto:
    type: "object"
    properties:
      sourceLanguages:
        type: "array"
        items:
          type: "string"
      targetLanguages:
        type: "array"
        items:
          type: "string"
      minimumPrice:
        type: "number"
        format: "double"
  TranslationPriceSetBulkPricesDto:
    type: "object"
    properties:
      sourceLanguages:
        type: "array"
        items:
          type: "string"
      targetLanguages:
        type: "array"
        items:
          type: "string"
      price:
        type: "number"
        format: "double"
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/IdReference"
        maxItems: 15
        minItems: 0
  TranslationPriceSetCreateDto:
    type: "object"
    required:
    - "sourceLanguages"
    - "targetLanguages"
    properties:
      sourceLanguages:
        type: "array"
        items:
          type: "string"
        maxItems: 100
        minItems: 1
      targetLanguages:
        type: "array"
        items:
          type: "string"
        maxItems: 100
        minItems: 1
  TranslationPriceSetDto:
    type: "object"
    properties:
      sourceLang:
        type: "string"
      targetLang:
        type: "string"
      minimumPrice:
        type: "number"
        format: "double"
      prices:
        type: "array"
        items:
          $ref: "#/definitions/TranslationPriceDto"
    description: "Language pair for translation price list, owns minimalPrice"
  TranslationPriceSetListDto:
    type: "object"
    properties:
      priceSets:
        type: "array"
        items:
          $ref: "#/definitions/TranslationPriceSetDto"
  TranslationRequestDto:
    type: "object"
    required:
    - "sourceTexts"
    properties:
      sourceTexts:
        type: "array"
        items:
          type: "string"
        maxItems: 2147483647
        minItems: 1
  TranslationRequestExtendedDto:
    type: "object"
    required:
    - "from"
    - "sourceTexts"
    - "to"
    properties:
      sourceTexts:
        type: "array"
        items:
          type: "string"
        maxItems: 2147483647
        minItems: 1
      from:
        type: "string"
      to:
        type: "string"
      filename:
        type: "string"
  TranslationResourcesDto:
    type: "object"
    properties:
      machineTranslateSettings:
        $ref: "#/definitions/MachineTranslateSettingsReference"
      translationMemories:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTranslationMemoryReference"
      termBases:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTermBaseReference"
  TranslationSegmentsReferenceV2:
    type: "object"
    properties:
      confirmed:
        type: "boolean"
        description: "Remove confirmed (true), unconfirmed (false) or both segments\
          \ (null). Default: null"
      locked:
        type: "boolean"
        description: "Remove locked (true), unlocked (false) or both segments (null).\
          \ Default: false"
  TtxSettingsDto:
    type: "object"
    properties:
      saveConfirmedSegments:
        type: "boolean"
        description: "Default: true"
  TxtSettingsDto:
    type: "object"
    properties:
      tagRegexp:
        type: "string"
      translatableTextRegexp:
        type: "string"
      contextKey:
        type: "string"
      regexpCapturingGroups:
        type: "boolean"
        description: "Default: false"
  TypesDto:
    type: "object"
    properties:
      types:
        type: "array"
        items:
          type: "string"
  USER:
    allOf:
    - $ref: "#/definitions/ProviderReference"
    - type: "object"
      properties:
        userName:
          type: "string"
          readOnly: true
        firstName:
          type: "string"
          readOnly: true
        lastName:
          type: "string"
          readOnly: true
        email:
          type: "string"
          readOnly: true
        active:
          type: "boolean"
          readOnly: true
  UidReference:
    type: "object"
    required:
    - "uid"
    properties:
      uid:
        type: "string"
  UnmodifiedFuzzyTranslationMTNTWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        transOrigin:
          type: "string"
  UnmodifiedFuzzyTranslationTMWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        transOrigin:
          type: "string"
  UnmodifiedFuzzyTranslationWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties:
        transOrigin:
          type: "string"
  UnresolvedCommentWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  UnresolvedConversationWarningDto:
    allOf:
    - $ref: "#/definitions/SegmentWarningDto"
    - type: "object"
      properties: {}
  UpdateCustomFieldDto:
    type: "object"
    required:
    - "allowedEntities"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 0
        maxLength: 255
      allowedEntities:
        type: "array"
        items:
          type: "string"
          enum:
          - "PROJECT"
          - "JOB"
      required:
        type: "boolean"
      description:
        type: "string"
        minLength: 0
        maxLength: 500
      addOptions:
        type: "array"
        items:
          type: "string"
      removeOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      deprecateOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      undeprecateOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
  UpdateCustomFieldInstanceDto:
    type: "object"
    properties:
      selectedOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      value:
        type: "string"
        minLength: 0
        maxLength: 4096
  UpdateCustomFieldInstanceWithUidDto:
    type: "object"
    required:
    - "customFieldInstance"
    properties:
      customFieldInstance:
        $ref: "#/definitions/UidReference"
      customField:
        $ref: "#/definitions/UidReference"
      selectedOptions:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      value:
        type: "string"
        minLength: 0
        maxLength: 4096
  UpdateCustomFieldInstancesDto:
    type: "object"
    properties:
      addInstances:
        type: "array"
        items:
          $ref: "#/definitions/CreateCustomFieldInstanceDto"
      removeInstances:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      updateInstances:
        type: "array"
        items:
          $ref: "#/definitions/UpdateCustomFieldInstanceWithUidDto"
  UpdateCustomFileTypeDto:
    type: "object"
    properties:
      name:
        type: "string"
      filenamePattern:
        type: "string"
      type:
        type: "string"
        enum:
        - "html"
        - "json"
        - "xml"
        - "multiling_xml"
        - "txt"
      fileImportSettings:
        $ref: "#/definitions/FileImportSettingsCreateDto"
  UpdateIgnoredChecksDto:
    type: "object"
    required:
    - "segment"
    - "warningTypes"
    properties:
      segment:
        $ref: "#/definitions/SegmentReference"
      warningTypes:
        type: "array"
        items:
          type: "string"
          enum:
          - "EmptyTranslation"
          - "TrailingPunctuation"
          - "Formatting"
          - "JoinTags"
          - "MissingNumbersV3"
          - "MultipleSpacesV3"
          - "NonConformingTerm"
          - "NotConfirmed"
          - "TranslationLength"
          - "AbsoluteLength"
          - "RelativeLength"
          - "UnresolvedComment"
          - "EmptyPairTags"
          - "InconsistentTranslationTargetSource"
          - "InconsistentTranslationSourceTarget"
          - "ForbiddenString"
          - "SpellCheck"
          - "RepeatedWord"
          - "InconsistentTagContent"
          - "EmptyTagContent"
          - "Malformed"
          - "ForbiddenTerm"
          - "NewerAtLowerLevel"
          - "LeadingAndTrailingSpaces"
          - "LeadingSpaces"
          - "TrailingSpaces"
          - "TargetSourceIdentical"
          - "SourceOrTargetRegexp"
          - "UnmodifiedFuzzyTranslation"
          - "UnmodifiedFuzzyTranslationTM"
          - "UnmodifiedFuzzyTranslationMTNT"
          - "Moravia"
          - "ExtraNumbersV3"
          - "UnresolvedConversation"
          - "NestedTags"
          - "FuzzyInconsistencyTargetSource"
          - "FuzzyInconsistencySourceTarget"
          - "CustomQA"
          - "MissingNonTranslatableAnnotation"
        maxItems: 100
        minItems: 1
  UpdateIgnoredJobPartSegment:
    type: "object"
    required:
    - "jobPartUid"
    - "segments"
    properties:
      jobPartUid:
        type: "string"
      segments:
        type: "array"
        items:
          $ref: "#/definitions/UpdateIgnoredSegment_2"
        maxItems: 500
        minItems: 1
  UpdateIgnoredSegment:
    type: "object"
    required:
    - "uid"
    - "warnings"
    properties:
      uid:
        type: "string"
      warnings:
        type: "array"
        items:
          $ref: "#/definitions/UpdateIgnoredWarning"
        maxItems: 100
        minItems: 1
  UpdateIgnoredSegment_2:
    type: "object"
    required:
    - "uid"
    - "warnings"
    properties:
      uid:
        type: "string"
      warnings:
        type: "array"
        items:
          $ref: "#/definitions/UpdateIgnoredWarning_2"
        maxItems: 100
        minItems: 1
  UpdateIgnoredWarning:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
  UpdateIgnoredWarning_2:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
  UpdateIgnoredWarningsDto:
    type: "object"
    required:
    - "segments"
    properties:
      segments:
        type: "array"
        items:
          $ref: "#/definitions/UpdateIgnoredSegment"
        maxItems: 500
        minItems: 1
  UpdateIgnoredWarningsDto_2:
    type: "object"
    required:
    - "jobParts"
    properties:
      jobParts:
        type: "array"
        items:
          $ref: "#/definitions/UpdateIgnoredJobPartSegment"
        maxItems: 500
        minItems: 1
  UpdateLqaProfileDto:
    type: "object"
    required:
    - "errorCategories"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      errorCategories:
        $ref: "#/definitions/ErrorCategoriesDto"
      penaltyPoints:
        $ref: "#/definitions/PenaltyPointsDto"
      passFailThreshold:
        $ref: "#/definitions/PassFailThresholdDto"
  UploadBilingualFileRequestDto:
    type: "object"
    required:
    - "file"
    properties:
      file:
        description: "One or more bilingual files and/or ZIP archives (max 50)"
        $ref: "#/definitions/MultipartFile"
  UploadResultDto:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      folder:
        type: "string"
      encodedName:
        type: "string"
      size:
        type: "integer"
        format: "int64"
      error:
        type: "string"
      asyncTaskId:
        type: "string"
      errors:
        $ref: "#/definitions/ConnectorErrorsDto"
  UploadedFileDto:
    type: "object"
    properties:
      uid:
        type: "string"
        readOnly: true
      name:
        type: "string"
        readOnly: true
      size:
        type: "integer"
        format: "int64"
        readOnly: true
      type:
        type: "string"
        readOnly: true
  User:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
  UserDetailsDtoV3:
    type: "object"
    required:
    - "email"
    - "firstName"
    - "lastName"
    - "role"
    - "timezone"
    - "uid"
    - "userName"
    discriminator: "role"
    properties:
      uid:
        type: "string"
        minLength: 0
        maxLength: 255
      userName:
        type: "string"
        minLength: 0
        maxLength: 255
      firstName:
        type: "string"
        minLength: 0
        maxLength: 255
      lastName:
        type: "string"
        minLength: 0
        maxLength: 255
      email:
        type: "string"
        minLength: 0
        maxLength: 255
      dateCreated:
        type: "string"
        format: "date-time"
      dateDeleted:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference_2"
      role:
        type: "string"
        enum:
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      assignableRoles:
        type: "array"
        items:
          type: "string"
      timezone:
        type: "string"
        minLength: 0
        maxLength: 255
      note:
        type: "string"
        minLength: 0
        maxLength: 4096
      receiveNewsletter:
        type: "boolean"
      active:
        type: "boolean"
      pendingEmailChange:
        type: "boolean"
        description: "If user has email change pending (new email not verified)"
      twoFactorAuthEnabled:
        type: "boolean"
        description: "If user has 2FA key configured"
      credentialsReadonly:
        type: "boolean"
        description: "If user credentials are readonly due to SSO"
    description: "User with all belonging objects"
  UserDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      userName:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      dateCreated:
        type: "string"
        format: "date-time"
      dateDeleted:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      role:
        type: "string"
        enum:
        - "SYS_ADMIN"
        - "SYS_ADMIN_READ"
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      timezone:
        type: "string"
      note:
        type: "string"
      terminologist:
        type: "boolean"
      sourceLangs:
        type: "array"
        items:
          type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      active:
        type: "boolean"
      priceList:
        $ref: "#/definitions/PriceListReference"
      netRateScheme:
        $ref: "#/definitions/DiscountSchemeReference"
      anonymized:
        type: "boolean"
  UserPasswordEditDto:
    type: "object"
    required:
    - "password"
    properties:
      password:
        type: "string"
        minLength: 8
        maxLength: 255
  UserReference:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      userName:
        type: "string"
      email:
        type: "string"
      role:
        type: "string"
        enum:
        - "SYS_ADMIN"
        - "SYS_ADMIN_READ"
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      id:
        type: "string"
      uid:
        type: "string"
  UserReference_2:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      userName:
        type: "string"
      email:
        type: "string"
      role:
        type: "string"
        enum:
        - "SYS_ADMIN"
        - "SYS_ADMIN_READ"
        - "ADMIN"
        - "PROJECT_MANAGER"
        - "LINGUIST"
        - "GUEST"
        - "SUBMITTER"
        - "PORTAL_MEMBER"
      id:
        type: "string"
      uid:
        type: "string"
  UserReference_4:
    type: "object"
    properties:
      uid:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
  UserReferencesDto:
    type: "object"
    properties:
      users:
        type: "array"
        items:
          $ref: "#/definitions/UserReference"
  UserStatisticsDto:
    type: "object"
    properties:
      date:
        type: "string"
        format: "date-time"
      ipAddress:
        type: "string"
      ipCountry:
        type: "string"
      userAgent:
        type: "string"
    description: "user login statistics"
  UserStatisticsListDto:
    type: "object"
    required:
    - "userStatistics"
    properties:
      userStatistics:
        type: "array"
        items:
          $ref: "#/definitions/UserStatisticsDto"
    description: "envelope for user statistics"
  VENDOR:
    allOf:
    - $ref: "#/definitions/ProviderReference"
    - type: "object"
      properties:
        name:
          type: "string"
          readOnly: true
        defaultProjectOwnerId:
          type: "integer"
          format: "int64"
  VOID:
    allOf:
    - $ref: "#/definitions/QACheckDtoV2"
    - type: "object"
      properties:
        ignorable:
          type: "boolean"
        enabled:
          type: "boolean"
        instant:
          type: "boolean"
  Vendor:
    allOf:
    - $ref: "#/definitions/AbstractProjectDto"
    - type: "object"
      properties:
        shared:
          type: "boolean"
          description: "Default: false"
        progress:
          $ref: "#/definitions/ProgressDto"
        client:
          $ref: "#/definitions/ClientReference"
        costCenter:
          $ref: "#/definitions/CostCenterReference"
        businessUnit:
          $ref: "#/definitions/BusinessUnitReference"
        dateDue:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          enum:
          - "NEW"
          - "ASSIGNED"
          - "COMPLETED"
          - "ACCEPTED_BY_VENDOR"
          - "DECLINED_BY_VENDOR"
          - "COMPLETED_BY_VENDOR"
          - "CANCELLED"
        purchaseOrder:
          type: "string"
        isPublishedOnJobBoard:
          type: "boolean"
          description: "Default: false"
        note:
          type: "string"
        createdBy:
          $ref: "#/definitions/UserReference"
        qualityAssuranceSettings:
          $ref: "#/definitions/ObjectReference"
        workflowSteps:
          type: "array"
          items:
            $ref: "#/definitions/ProjectWorkflowStepDto"
        analyseSettings:
          $ref: "#/definitions/ObjectReference"
        accessSettings:
          $ref: "#/definitions/ObjectReference"
        financialSettings:
          $ref: "#/definitions/ObjectReference"
        projectWorkflowSettings:
          $ref: "#/definitions/ProjectWorkflowSettingsReference"
        archived:
          type: "boolean"
        dateArchived:
          type: "string"
          format: "date-time"
        archivedBy:
          $ref: "#/definitions/UserReference"
        buyerOwner:
          $ref: "#/definitions/USER"
        buyer:
          $ref: "#/definitions/BuyerReference"
  VendorDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      vendorToken:
        type: "string"
      priceList:
        $ref: "#/definitions/PriceListReference"
      netRateScheme:
        $ref: "#/definitions/DiscountSchemeReference"
      sourceLocales:
        type: "array"
        items:
          type: "string"
      targetLocales:
        type: "array"
        items:
          type: "string"
      clients:
        type: "array"
        items:
          $ref: "#/definitions/ClientReference"
      domains:
        type: "array"
        items:
          $ref: "#/definitions/DomainReference"
      subDomains:
        type: "array"
        items:
          $ref: "#/definitions/SubDomainReference"
      workflowSteps:
        type: "array"
        items:
          $ref: "#/definitions/WorkflowStepReference"
  VendorReference:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
  VendorSecuritySettingsDto:
    type: "object"
    properties:
      canChangeSharedJobDueDateEnabled:
        type: "boolean"
        description: "Default: `false`"
      canChangeSharedJobDueDate:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
      jobVendorsMayUploadReferences:
        type: "boolean"
        description: "Default: `false`"
  VendorUserReference:
    type: "object"
    properties:
      uid:
        type: "string"
      vendorUid:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      organization:
        $ref: "#/definitions/OrganizationReference_2"
  VerityWeightsDto:
    type: "object"
    properties:
      verity:
        $ref: "#/definitions/ToggleableWeightDto"
      cultureSpecificReference:
        $ref: "#/definitions/ToggleableWeightDto"
  WebEditorLinkDtoV2:
    type: "object"
    properties:
      url:
        type: "string"
      warnings:
        type: "array"
        items:
          $ref: "#/definitions/ErrorDetailDtoV2"
  WebHookDtoV2:
    type: "object"
    required:
    - "url"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
      url:
        type: "string"
      events:
        type: "array"
        items:
          type: "string"
          enum:
          - "JOB_STATUS_CHANGED"
          - "JOB_CREATED"
          - "JOB_DELETED"
          - "JOB_UNSHARED"
          - "JOB_ASSIGNED"
          - "JOB_DUE_DATE_CHANGED"
          - "JOB_UPDATED"
          - "JOB_TARGET_UPDATED"
          - "JOB_EXPORTED"
          - "JOB_UNEXPORTED"
          - "JOB_AUTO_LQA_FINISHED"
          - "JOB_METADATA_UPDATED"
          - "JOB_CUSTOM_FIELDS_UPDATED"
          - "PROJECT_CREATED"
          - "PROJECT_DELETED"
          - "PROJECT_UNSHARED"
          - "PROJECT_STATUS_CHANGED"
          - "PROJECT_DUE_DATE_CHANGED"
          - "SHARED_PROJECT_ASSIGNED"
          - "PROJECT_METADATA_UPDATED"
          - "PRE_TRANSLATION_FINISHED"
          - "ANALYSIS_CREATED"
          - "CONTINUOUS_JOB_UPDATED"
          - "PROJECT_TEMPLATE_CREATED"
          - "PROJECT_TEMPLATE_UPDATED"
          - "PROJECT_TEMPLATE_DELETED"
          - "RAW_MT_CONVERTER_IMPORT_FINISHED"
          - "RAW_MT_PRE_TRANSLATION_FINISHED"
          - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
          - "TERM_BASE_TERM_CREATED"
          - "TERM_BASE_TERM_UPDATED"
          - "TERM_BASE_TERM_DELETED"
          - "TERM_BASE_CONCEPT_CREATED"
          - "TERM_BASE_CONCEPT_UPDATED"
          - "TERM_BASE_CONCEPT_DELETED"
          - "TERM_BASE_IMPORTED"
      secretToken:
        type: "string"
        minLength: 1
        maxLength: 255
      secretTokenType:
        type: "string"
        enum:
        - "X_MEMSOURCE_TOKEN"
        - "AUTHORIZATION"
      hidden:
        type: "boolean"
        description: "Default: false"
      status:
        type: "string"
        enum:
        - "ENABLED"
        - "DISABLED"
      failedAttempts:
        type: "integer"
        format: "int32"
      created:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference"
      lastModified:
        type: "string"
        format: "date-time"
      lastModifiedBy:
        $ref: "#/definitions/UserReference"
  WebhookCallDto:
    type: "object"
    properties:
      uid:
        type: "string"
      parentUid:
        type: "string"
      eventUid:
        type: "string"
      webhookSettings:
        $ref: "#/definitions/UidReference"
      createdAt:
        type: "string"
        format: "date-time"
      url:
        type: "string"
      forced:
        type: "boolean"
      lastForcedAt:
        type: "string"
        format: "date-time"
      body:
        type: "string"
      triggerEvent:
        type: "string"
        enum:
        - "JOB_STATUS_CHANGED"
        - "JOB_CREATED"
        - "JOB_DELETED"
        - "JOB_UNSHARED"
        - "JOB_ASSIGNED"
        - "JOB_DUE_DATE_CHANGED"
        - "JOB_UPDATED"
        - "JOB_TARGET_UPDATED"
        - "JOB_EXPORTED"
        - "JOB_UNEXPORTED"
        - "JOB_AUTO_LQA_FINISHED"
        - "JOB_METADATA_UPDATED"
        - "JOB_CUSTOM_FIELDS_UPDATED"
        - "PROJECT_CREATED"
        - "PROJECT_DELETED"
        - "PROJECT_UNSHARED"
        - "PROJECT_STATUS_CHANGED"
        - "PROJECT_DUE_DATE_CHANGED"
        - "SHARED_PROJECT_ASSIGNED"
        - "PROJECT_METADATA_UPDATED"
        - "PRE_TRANSLATION_FINISHED"
        - "ANALYSIS_CREATED"
        - "CONTINUOUS_JOB_UPDATED"
        - "PROJECT_TEMPLATE_CREATED"
        - "PROJECT_TEMPLATE_UPDATED"
        - "PROJECT_TEMPLATE_DELETED"
        - "RAW_MT_CONVERTER_IMPORT_FINISHED"
        - "RAW_MT_PRE_TRANSLATION_FINISHED"
        - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
        - "TERM_BASE_TERM_CREATED"
        - "TERM_BASE_TERM_UPDATED"
        - "TERM_BASE_TERM_DELETED"
        - "TERM_BASE_CONCEPT_CREATED"
        - "TERM_BASE_CONCEPT_UPDATED"
        - "TERM_BASE_CONCEPT_DELETED"
        - "TERM_BASE_IMPORTED"
      retryAttempt:
        type: "integer"
        format: "int64"
      statusCode:
        type: "integer"
        format: "int64"
      errorMessage:
        type: "string"
  WebhookPreviewDto:
    type: "object"
    properties:
      event:
        type: "string"
        enum:
        - "JOB_STATUS_CHANGED"
        - "JOB_CREATED"
        - "JOB_DELETED"
        - "JOB_UNSHARED"
        - "JOB_ASSIGNED"
        - "JOB_DUE_DATE_CHANGED"
        - "JOB_UPDATED"
        - "JOB_TARGET_UPDATED"
        - "JOB_EXPORTED"
        - "JOB_UNEXPORTED"
        - "JOB_AUTO_LQA_FINISHED"
        - "JOB_METADATA_UPDATED"
        - "JOB_CUSTOM_FIELDS_UPDATED"
        - "PROJECT_CREATED"
        - "PROJECT_DELETED"
        - "PROJECT_UNSHARED"
        - "PROJECT_STATUS_CHANGED"
        - "PROJECT_DUE_DATE_CHANGED"
        - "SHARED_PROJECT_ASSIGNED"
        - "PROJECT_METADATA_UPDATED"
        - "PRE_TRANSLATION_FINISHED"
        - "ANALYSIS_CREATED"
        - "CONTINUOUS_JOB_UPDATED"
        - "PROJECT_TEMPLATE_CREATED"
        - "PROJECT_TEMPLATE_UPDATED"
        - "PROJECT_TEMPLATE_DELETED"
        - "RAW_MT_CONVERTER_IMPORT_FINISHED"
        - "RAW_MT_PRE_TRANSLATION_FINISHED"
        - "RAW_MT_QUALITY_ESTIMATION_FINISHED"
        - "TERM_BASE_TERM_CREATED"
        - "TERM_BASE_TERM_UPDATED"
        - "TERM_BASE_TERM_DELETED"
        - "TERM_BASE_CONCEPT_CREATED"
        - "TERM_BASE_CONCEPT_UPDATED"
        - "TERM_BASE_CONCEPT_DELETED"
        - "TERM_BASE_IMPORTED"
      preview:
        type: "string"
  WebhookPreviewsDto:
    type: "object"
    properties:
      previews:
        type: "array"
        items:
          $ref: "#/definitions/WebhookPreviewDto"
  WildCardSearchByJobRequestDtoV3:
    type: "object"
    required:
    - "query"
    properties:
      query:
        type: "string"
      reverse:
        type: "boolean"
        description: "Default: false"
      count:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 50
      offset:
        type: "integer"
        format: "int32"
  WildCardSearchRequestDto:
    type: "object"
    required:
    - "sourceLang"
    properties:
      query:
        type: "string"
      sourceLang:
        type: "string"
      targetLangs:
        type: "array"
        items:
          type: "string"
      count:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 50
      offset:
        type: "integer"
        format: "int32"
      sourceLangs:
        type: "array"
        items:
          type: "string"
  WorkflowChangesDto:
    type: "object"
    required:
    - "jobs"
    properties:
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/UidReference"
        maxItems: 100
        minItems: 1
  WorkflowStepConfiguration:
    type: "object"
    required:
    - "assignments"
    properties:
      id:
        type: "string"
      assignments:
        type: "array"
        items:
          $ref: "#/definitions/ProvidersPerLanguage"
      due:
        type: "string"
        format: "date-time"
        description: "Use ISO 8601 date format."
      notifyProvider:
        $ref: "#/definitions/NotifyProviderDto"
  WorkflowStepDto:
    type: "object"
    properties:
      id:
        type: "string"
      uid:
        type: "string"
      name:
        type: "string"
      abbr:
        type: "string"
      order:
        type: "integer"
        format: "int32"
      lqaEnabled:
        type: "boolean"
  WorkflowStepReference:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
      order:
        type: "integer"
        format: "int32"
      lqaEnabled:
        type: "boolean"
  WorkflowStepReferenceV2:
    type: "object"
    properties:
      name:
        type: "string"
      uid:
        type: "string"
      id:
        type: "string"
      order:
        type: "integer"
        format: "int32"
      lqaEnabled:
        type: "boolean"
  WorkflowStepReferenceV3:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      uid:
        type: "string"
      order:
        type: "integer"
        format: "int32"
      lqaEnabled:
        type: "boolean"
  WorkflowStepReference_2:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      abbreviation:
        type: "string"
      order:
        type: "integer"
        format: "int32"
      lqaEnabled:
        type: "boolean"
  WorkflowStepSettingsDto:
    type: "object"
    properties:
      workflowStep:
        $ref: "#/definitions/WorkflowStepReference"
      assignedTo:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateWorkflowSettingsAssignedToDto"
      notifyProvider:
        $ref: "#/definitions/ProjectTemplateNotifyProviderDto"
      lqaProfile:
        $ref: "#/definitions/UidReference"
  WorkflowStepSettingsEditDto:
    type: "object"
    properties:
      workflowStep:
        $ref: "#/definitions/IdReference"
      assignedTo:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateWorkflowSettingsAssignedToDto"
      notifyProvider:
        $ref: "#/definitions/NotifyProviderDto"
      lqaProfile:
        $ref: "#/definitions/UidReference"
  WorkflowStepSettingsEditV2Dto:
    type: "object"
    properties:
      workflowStep:
        $ref: "#/definitions/IdReference"
      assignedTo:
        type: "array"
        items:
          $ref: "#/definitions/ProjectTemplateWorkflowSettingsAssignedToDto"
      notifyProvider:
        $ref: "#/definitions/NotifyProviderDto"
      lqaProfile:
        $ref: "#/definitions/UidReference"
  Xlf2SettingsDto:
    type: "object"
    properties:
      icuSubFilter:
        type: "boolean"
        description: "Default: false"
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
      importNotes:
        type: "boolean"
        description: "Default: true"
      saveConfirmedSegments:
        type: "boolean"
        description: "Default: true"
      segmentation:
        type: "boolean"
        description: "Default: true"
      lineBreakTags:
        type: "boolean"
        description: "Default: false"
      preserveWhitespace:
        type: "boolean"
        description: "Default: true"
      copySourceToTargetIfNotImported:
        type: "boolean"
        description: "Default: true"
      respectTranslateAttr:
        type: "boolean"
        description: "Default: true"
      skipImportRules:
        type: "string"
      importAsConfirmedRules:
        type: "string"
        description: "Default: state=final"
      importAsLockedRules:
        type: "string"
      exportAttrsWhenConfirmedAndLocked:
        type: "string"
        description: "Default: state=final"
      exportAttrsWhenConfirmedAndNotLocked:
        type: "string"
        description: "Default: state=final"
      exportAttrsWhenNotConfirmedAndLocked:
        type: "string"
      exportAttrsWhenNotConfirmedAndNotLocked:
        type: "string"
      contextKeyXPath:
        type: "string"
      preserveCharEntities:
        type: "string"
      xslUrl:
        type: "string"
      xslFile:
        type: "string"
        description: "UID of uploaded XSL file, overrides xslUrl"
      tagRegexp:
        type: "string"
  XlfSettingsDto:
    type: "object"
    properties:
      icuSubFilter:
        type: "boolean"
        description: "Default: false"
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
      importNotes:
        type: "boolean"
        description: "Default: true"
      segmentation:
        type: "boolean"
        description: "Default: true"
      skipImportRules:
        type: "string"
        description: "Default: translate=no; examples: translate=no;approved=no;state=needs-adaptation"
      importAsConfirmedRules:
        type: "string"
        description: "Multiple rules must be separated by semicolon"
      importAsLockedRules:
        type: "string"
      exportAttrsWhenConfirmedAndLocked:
        type: "string"
      exportAttrsWhenConfirmedAndNotLocked:
        type: "string"
      exportAttrsWhenNotConfirmedAndLocked:
        type: "string"
      exportAttrsWhenNotConfirmedAndNotLocked:
        type: "string"
      saveConfirmedSegments:
        type: "boolean"
        description: "Default: true"
      lineBreakTags:
        type: "boolean"
        description: "Default: false"
      preserveWhitespace:
        type: "boolean"
        description: "Default: true"
      contextType:
        type: "string"
      preserveCharEntities:
        type: "string"
      copySourceToTargetIfNotImported:
        type: "boolean"
        description: "Default: true"
      importXPath:
        type: "string"
      importAsConfirmedXPath:
        type: "string"
      importAsLockedXPath:
        type: "string"
      xslUrl:
        type: "string"
      xslFile:
        type: "string"
        description: "UID of uploaded XSL file, overrides xslUrl"
      tagRegexp:
        type: "string"
  XlsSettingsDto:
    type: "object"
    properties:
      sheetNames:
        type: "boolean"
        description: "Default: false"
      hidden:
        type: "boolean"
        description: "Default: false"
      comments:
        type: "boolean"
        description: "Default: false"
      other:
        type: "boolean"
        description: "Default: false"
      cellFlow:
        type: "string"
        description: "Default: DownRight"
        enum:
        - "DownRight"
        - "RightDown"
        - "DownLeft"
        - "LeftDown"
      htmlSubfilter:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
      specifiedColumns:
        type: "string"
  XmlAssistantProfileListDto:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      createdBy:
        $ref: "#/definitions/UserReference_2"
      updatedAt:
        type: "string"
        format: "date-time"
      updatedBy:
        $ref: "#/definitions/UserReference_2"
  XmlSettingsDto:
    type: "object"
    properties:
      rulesFormat:
        type: "string"
        description: "Default: `\"PLAIN\"`"
        enum:
        - "PLAIN"
        - "XPATH"
      includeElementsPlain:
        type: "string"
        description: "Default: `\"*\"`, example: `\"para,heading\"`"
      excludeElementsPlain:
        type: "string"
        description: "Example: `\"script,par\"`"
      includeAttributesPlain:
        type: "string"
        description: "Example: `\"title\"`"
      excludeAttributesPlain:
        type: "string"
        description: "Example: `\"lang,href\"`"
      inlineElementsNonTranslatablePlain:
        type: "string"
        description: "Example: `\"tt,b\"`"
      inlineElementsPlain:
        type: "string"
      inlineElementsAutoPlain:
        type: "boolean"
        description: "Default: `false`"
      htmlSubfilterElementsPlain:
        type: "string"
        description: "Example: `\"tt,b\"`"
      entities:
        type: "boolean"
        description: "Default: `false`"
      lockElementsPlain:
        type: "string"
      lockAttributesPlain:
        type: "string"
      includeXPath:
        type: "string"
      inlineElementsXpath:
        type: "string"
      inlineElementsNonTranslatableXPath:
        type: "string"
      inlineElementsAutoXPath:
        type: "boolean"
        description: "Default: `false`"
      htmlSubfilterElementsXpath:
        type: "string"
      lockXPath:
        type: "string"
      segmentation:
        type: "boolean"
        description: "Default: `true`"
      tagRegexp:
        type: "string"
      contextNoteXpath:
        type: "string"
      maxLenXPath:
        type: "string"
      preserveWhitespaceXPath:
        type: "string"
      preserveCharEntities:
        type: "string"
      contextKeyXPath:
        type: "string"
      xslUrl:
        type: "string"
      xslFile:
        type: "string"
        description: "UID of uploaded XSL file, overrides `xslUrl`"
      importComments:
        type: "boolean"
        description: "Default: `true`"
      icuSubFilter:
        type: "boolean"
        description: "Default: `false`"
      assistantProfile:
        type: "string"
  YamlSettingsDto:
    type: "object"
    properties:
      htmlSubFilter:
        type: "boolean"
        description: "Default: false"
      tagRegexp:
        type: "string"
      includeKeyRegexp:
        type: "string"
      excludeValueRegexp:
        type: "string"
      contextPath:
        type: "string"
      contextKeyPath:
        type: "string"
      markdownSubfilter:
        type: "boolean"
        description: "Default: false"
      updateRootElementLang:
        type: "boolean"
        description: "Default: false"
      localeFormat:
        type: "string"
        enum:
        - "MEMSOURCE"
        - "RFC_5646"
        - "ANDROID_QUALIFIER"
        - "ANDROID_QUALIFIER_BCP"
      indentEmptyLinesInString:
        type: "boolean"
        description: "Default: true"
      icuSubFilter:
        type: "boolean"
        description: "Default: `false`"
